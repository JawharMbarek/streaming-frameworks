From: "Von Internet Explorer 11 gespeichert"
Subject: Apache Kafka
Date: Mon, 7 Jul 2014 20:26:58 +0200
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0011_01CF9A21.CD190140"
X-MimeOLE: Produced By Microsoft MimeOLE V6.3.9600.16384

This is a multi-part message in MIME format.

------=_NextPart_000_0011_01CF9A21.CD190140
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: https://kafka.apache.org/documentation.html

=EF=BB=BF<!DOCTYPE HTML>
<!-- should always link the the latest release's documentation =
--><!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" =
"http://www.w3.org/TR/html4/strict.dtd"><HTML=20
xmlns:og=3D"http://ogp.me/ns#"><HEAD><META content=3D"IE=3D11.0000"=20
http-equiv=3D"X-UA-Compatible">
		 <TITLE>Apache Kafka</TITLE>		 <LINK =
href=3D"https://kafka.apache.org/styles.css"=20
rel=3D"stylesheet" type=3D"text/css">		 <LINK =
href=3D"/images/apache_feather.gif" rel=3D"icon"=20
type=3D"image/gif">		 <LINK =
href=3D"http://fonts.googleapis.com/css?family=3DSource+Sans+Pro:400,400i=
talic"=20
rel=3D"stylesheet" type=3D"text/css">		=20
<META name=3D"robots" content=3D"index,follow">		=20
<META name=3D"language" content=3D"en"> 	=09
<META name=3D"keywords" content=3D"apache kafka messaging queuing =
distributed stream processing">
		=20
<META name=3D"description" content=3D"Apache Kafka: A high-throughput, =
distributed, publish-subscribe messaging system.">
		=20
<META http-equiv=3D"Content-Type" content=3D"text/html;charset=3Dutf-8">	=
	=20
<META value=3D"Kafka" property=3D"og:title">		=20
<META value=3D"" property=3D"og:image">		=20
<META value=3D"A high-throughput, distributed, publish-subscribe =
messaging system."=20
property=3D"og:description">		=20
<META value=3D"sna-projects" property=3D"og:site_name">		=20
<META value=3D"website" property=3D"og:type">		=20
<SCRIPT>=0A=
		  =
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=3Dr;i[r]=3Di[r]||func=
tion(){=0A=
		  (i[r].q=3Di[r].q||[]).push(arguments)},i[r].l=3D1*new =
Date();a=3Ds.createElement(o),=0A=
		  =
m=3Ds.getElementsByTagName(o)[0];a.async=3D1;a.src=3Dg;m.parentNode.inser=
tBefore(a,m)=0A=
		  =
})(window,document,'script','//www.google-analytics.com/analytics.js','ga=
');=0A=
=0A=
		  ga('create', 'UA-7818013-4', 'apache.org');=0A=
		  ga('send', 'pageview');=0A=
=0A=
		</SCRIPT>
	=20
<META name=3D"GENERATOR" content=3D"MSHTML 11.00.9600.17126"></HEAD>	=20
<BODY>
<DIV id=3D"everything">
<DIV id=3D"header">
<TABLE>
  <TBODY>
  <TR>
    <TD><A href=3D"https://kafka.apache.org/"><IMG =
src=3D"https://kafka.apache.org/images/kafka_logo.png"></A></TD>
    <TD class=3D"title"><A href=3D"https://kafka.apache.org/">Apache =
Kafka</A>
      							 <BR><SPAN class=3D"subtitle"><A =
href=3D"https://kafka.apache.org/">A=20
      high-throughput distributed messaging system.</A></SPAN>
  						 </TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"lsidebar">
<UL>
  <LI><A =
href=3D"https://kafka.apache.org/downloads.html">download</A></LI>
  <LI><A=20
  =
href=3D"https://kafka.apache.org/documentation.html#introduction">introdu=
ction</A></LI>
  <LI><A =
href=3D"https://kafka.apache.org/documentation.html#uses">uses</A></LI>
  <LI><A=20
  =
href=3D"https://kafka.apache.org/documentation.html">documentation</A></L=
I>
  <LI><A =
href=3D"https://kafka.apache.org/performance.html">performance</A></LI>
  <LI><A=20
  =
href=3D"https://cwiki.apache.org/confluence/display/KAFKA/Clients">client=
s</A></LI>
  <LI><A=20
  =
href=3D"https://cwiki.apache.org/confluence/display/KAFKA/Ecosystem">ecos=
ystem</A></LI>
  <LI><A=20
  =
href=3D"https://cwiki.apache.org/confluence/display/KAFKA/FAQ">faq</A></L=
I>
  <LI>project					=20
  <UL>
    <LI><A=20
href=3D"https://cwiki.apache.org/confluence/display/KAFKA">wiki</A></LI>
    <LI><A =
href=3D"https://issues.apache.org/jira/browse/KAFKA">bugs</A></LI>
    <LI><A=20
    =
href=3D"https://kafka.apache.org/contact.html">mailing&nbsp;lists</A></LI=
>
    <LI><A =
href=3D"https://kafka.apache.org/committers.html">committers</A></LI>
    <LI><A=20
    =
href=3D"https://cwiki.apache.org/confluence/display/KAFKA/Powered+By">pow=
ered&nbsp;by</A></LI>
    <LI><A =
href=3D"https://cwiki.apache.org/confluence/display/KAFKA/Kafka+papers+an=
d+presentations">papers&nbsp;&amp;&nbsp;talks</A></LI></UL></LI>
  <LI>developers					=20
  <UL>
    <LI><A href=3D"https://kafka.apache.org/code.html">code</A></LI>
    <LI><A =
href=3D"https://kafka.apache.org/projects.html">projects</A></LI>
    <LI><A=20
    =
href=3D"https://kafka.apache.org/contributing.html">contributing</A></LI>=

    <LI><A=20
    =
href=3D"https://kafka.apache.org/coding-guide.html">coding&nbsp;guide</A>=
</LI>
    <LI><A=20
href=3D"https://builds.apache.org/">unit&nbsp;tests</A></LI></UL></LI></U=
L></DIV>
<DIV class=3D"content">
<H1>Kafka 0.8.1 Documentation</H1>Prior releases: <A =
href=3D"https://kafka.apache.org/07/documentation.html">0.7.x</A>,=20
<A href=3D"https://kafka.apache.org/08/documentation.html">0.8.0</A>.    =
=20
<UL class=3D"toc">
  <LI><A =
href=3D"https://kafka.apache.org/documentation.html#gettingStarted">1.=20
  Getting Started</A>         =20
  <UL>
    <LI><A =
href=3D"https://kafka.apache.org/documentation.html#introduction">1.1=20
    Introduction</A>             =20
    <LI><A href=3D"https://kafka.apache.org/documentation.html#uses">1.2 =
Use=20
    Cases</A>             =20
    <LI><A =
href=3D"https://kafka.apache.org/documentation.html#quickstart">1.3=20
    Quick Start</A>             =20
    <LI><A =
href=3D"https://kafka.apache.org/documentation.html#ecosystem">1.4=20
    Ecosystem</A>             =20
    <LI><A =
href=3D"https://kafka.apache.org/documentation.html#upgrade">1.5=20
    Upgrading</A>          </LI></UL>
  <LI><A href=3D"https://kafka.apache.org/documentation.html#api">2. =
API</A>      =20
     =20
  <UL>
    <LI><A =
href=3D"https://kafka.apache.org/documentation.html#producerapi">2.1=20
    Producer API</A>              =20
    <LI><A =
href=3D"https://kafka.apache.org/documentation.html#highlevelconsumerapi"=
>2.2=20
    High Level Consumer API</A>              =20
    <LI><A=20
    =
href=3D"https://kafka.apache.org/documentation.html#simpleconsumerapi">2.=
3=20
    Simple Consumer API</A>              =20
    <LI><A =
href=3D"https://kafka.apache.org/documentation.html#kafkahadoopconsumerap=
i">2.4=20
    Kafka Hadoop Consumer API</A>           </LI></UL>
  <LI><A =
href=3D"https://kafka.apache.org/documentation.html#configuration">3.=20
  Configuration</A>        =20
  <UL>
    <LI><A =
href=3D"https://kafka.apache.org/documentation.html#brokerconfigs">3.1=20
    Broker Configs</A>             =20
    <LI><A=20
    =
href=3D"https://kafka.apache.org/documentation.html#consumerconfigs">3.2 =

    Consumer Configs</A>             =20
    <LI><A=20
    =
href=3D"https://kafka.apache.org/documentation.html#producerconfigs">3.3 =

    Producer Configs</A>			 =20
    <LI><A=20
    =
href=3D"https://kafka.apache.org/documentation.html#newproducerconfigs">3=
.4=20
    New Producer Configs</A>         </LI></UL>
  <LI><A href=3D"https://kafka.apache.org/documentation.html#design">4. =
Design</A>=20
         =20
  <UL>
    <LI><A =
href=3D"https://kafka.apache.org/documentation.html#majordesignelements">=
4.1=20
    Motivation</A>             =20
    <LI><A =
href=3D"https://kafka.apache.org/documentation.html#persistence">4.2=20
    Persistence</A>             =20
    <LI><A =
href=3D"https://kafka.apache.org/documentation.html#maximizingefficiency"=
>4.3=20
    Efficiency</A>             =20
    <LI><A =
href=3D"https://kafka.apache.org/documentation.html#theproducer">4.4=20
    The Producer</A>             =20
    <LI><A =
href=3D"https://kafka.apache.org/documentation.html#theconsumer">4.5=20
    The Consumer</A>             =20
    <LI><A =
href=3D"https://kafka.apache.org/documentation.html#semantics">4.6=20
    Message Delivery Semantics</A>             =20
    <LI><A =
href=3D"https://kafka.apache.org/documentation.html#replication">4.7=20
    Replication</A>             =20
    <LI><A =
href=3D"https://kafka.apache.org/documentation.html#compaction">4.8 Log=20
    Compaction</A>         </LI></UL>
  <LI><A =
href=3D"https://kafka.apache.org/documentation.html#implementation">5.=20
  Implementation</A>        =20
  <UL>
    <LI><A =
href=3D"https://kafka.apache.org/documentation.html#apidesign">5.1 API=20
    Design</A>              =20
    <LI><A =
href=3D"https://kafka.apache.org/documentation.html#networklayer">5.2=20
    Network Layer</A>              =20
    <LI><A =
href=3D"https://kafka.apache.org/documentation.html#messages">5.3=20
    Messages</A>              =20
    <LI><A =
href=3D"https://kafka.apache.org/documentation.html#messageformat">5.4=20
    Message format</A>              =20
    <LI><A href=3D"https://kafka.apache.org/documentation.html#log">5.5 =
Log</A>   =20
              =20
    <LI><A=20
    =
href=3D"https://kafka.apache.org/documentation.html#distributionimpl">5.6=
=20
    Distribution</A>         </LI></UL>
  <LI><A =
href=3D"https://kafka.apache.org/documentation.html#operations">6.=20
  Operations</A>        =20
  <UL>
    <LI><A =
href=3D"https://kafka.apache.org/documentation.html#basic_ops">6.1=20
    Basic Kafka Operations</A>                =20
    <UL>
      <LI><A =
href=3D"https://kafka.apache.org/documentation.html#basic_ops_add_topic">=
Adding=20
      and removing topics</A>                     =20
      <LI><A =
href=3D"https://kafka.apache.org/documentation.html#basic_ops_modify_topi=
c">Modifying=20
      topics</A>                     =20
      <LI><A =
href=3D"https://kafka.apache.org/documentation.html#basic_ops_restarting"=
>Graceful=20
      shutdown</A>                     =20
      <LI><A =
href=3D"https://kafka.apache.org/documentation.html#basic_ops_leader_bala=
ncing">Balancing=20
      leadership</A>                     =20
      <LI><A =
href=3D"https://kafka.apache.org/documentation.html#basic_ops_consumer_la=
g">Checking=20
      consumer position</A>                     =20
      <LI><A =
href=3D"https://kafka.apache.org/documentation.html#basic_ops_mirror_make=
r">Mirroring=20
      data between clusters</A>                     =20
      <LI><A =
href=3D"https://kafka.apache.org/documentation.html#basic_ops_cluster_exp=
ansion">Expanding=20
      your cluster</A>                     =20
      <LI><A =
href=3D"https://kafka.apache.org/documentation.html#basic_ops_decommissio=
ning_brokers">Decommissioning=20
      brokers</A>                     =20
      <LI><A =
href=3D"https://kafka.apache.org/documentation.html#basic_ops_increase_re=
plication_factor">Increasing=20
      replication factor</A>                 </LI></UL>
    <LI><A =
href=3D"https://kafka.apache.org/documentation.html#datacenters">6.2=20
    Datacenters</A>             =20
    <LI><A =
href=3D"https://kafka.apache.org/documentation.html#config">6.3=20
    Important Configs</A>                 =20
    <UL>
      <LI><A=20
      =
href=3D"https://kafka.apache.org/documentation.html#serverconfig">Importa=
nt=20
      Server Configs</A>                     =20
      <LI><A=20
      =
href=3D"https://kafka.apache.org/documentation.html#clientconfig">Importa=
nt=20
      Client Configs</A>                     =20
      <LI><A =
href=3D"https://kafka.apache.org/documentation.html#prodconfig">A=20
      Production Server Configs</A>                  </LI></UL>
    <LI><A href=3D"https://kafka.apache.org/documentation.html#java">6.4 =
Java=20
    Version</A>               =20
    <LI><A =
href=3D"https://kafka.apache.org/documentation.html#hwandos">6.5=20
    Hardware and OS</A>                =20
    <UL>
      <LI><A =
href=3D"https://kafka.apache.org/documentation.html#os">OS</A>       =20
                  =20
      <LI><A =
href=3D"https://kafka.apache.org/documentation.html#diskandfs">Disks=20
      and Filesystems</A>                    =20
      <LI><A=20
      =
href=3D"https://kafka.apache.org/documentation.html#appvsosflush">Applica=
tion=20
      vs OS Flush Management</A>                    =20
      <LI><A =
href=3D"https://kafka.apache.org/documentation.html#linuxflush">Linux=20
      Flush Behavior</A>                    =20
      <LI><A =
href=3D"https://kafka.apache.org/documentation.html#ext4">Ext4=20
      Notes</A>                 </LI></UL>
    <LI><A =
href=3D"https://kafka.apache.org/documentation.html#monitoring">6.6=20
    Monitoring</A>              =20
    <LI><A href=3D"https://kafka.apache.org/documentation.html#zk">6.7=20
    ZooKeeper</A>                =20
    <UL>
      <LI><A =
href=3D"https://kafka.apache.org/documentation.html#zkversion">Stable=20
      Version</A>                    =20
      <LI><A=20
      =
href=3D"https://kafka.apache.org/documentation.html#zkops">Operationaliza=
tion</A>=20
                      </LI></UL></LI></UL></LI></UL>
<H2><A id=3D"gettingStarted">1. Getting Started</A></H2>
<H3><A id=3D"introduction">1.1 Introduction</A></H3>Kafka is a =
distributed,=20
partitioned, replicated commit log service. It provides the =
functionality of a=20
messaging system, but with a unique design.=20
<P>What does all that mean?=20
<P>First let's review some basic messaging terminology:=20
<UL>
  <LI>Kafka maintains feeds of messages in categories called =
<I>topics</I>.    =20
  <LI>We'll call processes that publish messages to a Kafka topic=20
  <I>producers</I>.    =20
  <LI>We'll call processes that subscribe to topics and process the feed =
of=20
  published messages <I>consumers</I>..    =20
  <LI>Kafka is run as a cluster comprised of one or more servers each of =
which=20
  is called a <I>broker</I>. </LI></UL>So, at a high level, producers =
send=20
messages over the network to the Kafka cluster which in turn serves them =
up to=20
consumers like this:=20
<DIV style=3D"width: 100%; text-align: center;"><IMG =
src=3D"https://kafka.apache.org/images/producer_consumer.png">=20
</DIV>Communication between the clients and the servers is done with a =
simple,=20
high-performance, language agnostic <A =
href=3D"https://cwiki.apache.org/confluence/display/KAFKA/A+Guide+To+The+=
Kafka+Protocol">TCP=20
protocol</A>. We provide a Java client for Kafka, but clients are =
available in=20
<A =
href=3D"https://cwiki.apache.org/confluence/display/KAFKA/Clients">many=20
languages</A>.=20
<H4>Topics and Logs</H4>Let's first dive into the high-level abstraction =
Kafka=20
provides=E2=80=94the topic.=20
<P>A topic is a category or feed name to which messages are published. =
For each=20
topic, the Kafka cluster maintains a partitioned log that looks like =
this:=20
<DIV style=3D"width: 100%; text-align: center;"><IMG =
src=3D"https://kafka.apache.org/images/log_anatomy.png">=20
</DIV>Each partition is an ordered, immutable sequence of messages that =
is=20
continually appended to=E2=80=94a commit log. The messages in the =
partitions are each=20
assigned a sequential id number called the <I>offset</I> that uniquely=20
identifies each message within the partition.=20
<P>The Kafka cluster retains all published messages=E2=80=94whether or =
not they have=20
been consumed=E2=80=94for a configurable period of time. For example if =
the log=20
retention is set to two days, then for the two days after a message is =
published=20
it is available for consumption, after which it will be discarded to =
free up=20
space. Kafka's performance is effectively constant with respect to data =
size so=20
retaining lots of data is not a problem.=20
<P>In fact the only metadata retained on a per-consumer basis is the =
position of=20
the consumer in the log, called the "offset". This offset is controlled =
by the=20
consumer: normally a consumer will advance its offset linearly as it =
reads=20
messages, but in fact the position is controlled by the consumer and it =
can=20
consume messages in any order it likes. For example a consumer can reset =
to an=20
older offset to reprocess.=20
<P>This combination of features means that Kafka consumers are very =
cheap=E2=80=94they=20
can come and go without much impact on the cluster or on other =
consumers. For=20
example, you can use our command line tools to "tail" the contents of =
any topic=20
without changing what is consumed by any existing consumers.=20
<P>The partitions in the log serve several purposes. First, they allow =
the log=20
to scale beyond a size that will fit on a single server. Each individual =

partition must fit on the servers that host it, but a topic may have =
many=20
partitions so it can handle an arbitrary amount of data. Second they act =
as the=20
unit of parallelism=E2=80=94more on that in a bit. =20
<H4>Distribution</H4>The partitions of the log are distributed over the =
servers=20
in the Kafka cluster with each server handling data and requests for a =
share of=20
the partitions. Each partition is replicated across a configurable =
number of=20
servers for fault tolerance.=20
<P>Each partition has one server which acts as the "leader" and zero or =
more=20
servers which act as "followers". The leader handles all read and write =
requests=20
for the partition while the followers passively replicate the leader. If =
the=20
leader fails, one of the followers will automatically become the new =
leader.=20
Each server acts as a leader for some of its partitions and a follower =
for=20
others so load is well balanced within the cluster.=20
<H4>Producers</H4>Producers publish data to the topics of their choice. =
The=20
producer is responsible for choosing which message to assign to which =
partition=20
within the topic. This can be done in a round-robin fashion simply to =
balance=20
load or it can be done according to some semantic partition function =
(say based=20
on some key in the message). More on the use of partitioning in a =
second.=20
<H4><A id=3D"intro_consumers">Consumers</A></H4>Messaging traditionally =
has two=20
models: <A =
href=3D"http://en.wikipedia.org/wiki/Message_queue">queuing</A> and <A=20
href=3D"http://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern">p=
ublish-subscribe</A>.=20
In a queue, a pool of consumers may read from a server and each message =
goes to=20
one of them; in publish-subscribe the message is broadcast to all =
consumers.=20
Kafka offers a single consumer abstraction that generalizes both of =
these=E2=80=94the=20
<I>consumer group</I>.=20
<P>Consumers label themselves with a consumer group name, and each =
message=20
published to a topic is delivered to one consumer instance within each=20
subscribing consumer group. Consumer instances can be in separate =
processes or=20
on separate machines.=20
<P>If all the consumer instances have the same consumer group, then this =
works=20
just like a traditional queue balancing load over the consumers.=20
<P>If all the consumer instances have different consumer groups, then =
this works=20
like publish-subscribe and all messages are broadcast to all consumers.  =

<P>More commonly, however, we have found that topics have a small number =
of=20
consumer groups, one for each "logical subscriber". Each group is =
composed of=20
many consumer instances for scalability and fault tolerance. This is =
nothing=20
more than publish-subscribe semantics where the subscriber is cluster of =

consumers instead of a single process.=20
<P>
<DIV class=3D"caption" style=3D"margin: 20px; width: 500px; float: =
right;"><IMG =
src=3D"https://kafka.apache.org/images/consumer-groups.png"><BR>=20
 A two server Kafka cluster hosting four partitions (P0-P3) with two =
consumer=20
groups. Consumer group A has two consumer instances and group B has =
four. </DIV>
<P>Kafka has stronger ordering guarantees than a traditional messaging =
system,=20
too.=20
<P>A traditional queue retains messages in-order on the server, and if =
multiple=20
consumers consume from the queue then the server hands out messages in =
the order=20
they are stored. However, although the server hands out messages in =
order, the=20
messages are delivered asynchronously to consumers, so they may arrive =
out of=20
order on different consumers. This effectively means the ordering of the =

messages is lost in the presence of parallel consumption. Messaging =
systems=20
often work around this by having a notion of "exclusive consumer" that =
allows=20
only one process to consume from a queue, but of course this means that =
there is=20
no parallelism in processing.=20
<P>Kafka does it better. By having a notion of parallelism=E2=80=94the =
partition=E2=80=94within=20
the topics, Kafka is able to provide both ordering guarantees and load =
balancing=20
over a pool of consumer processes. This is achieved by assigning the =
partitions=20
in the topic to the consumers in the consumer group so that each =
partition is=20
consumed by exactly one consumer in the group. By doing this we ensure =
that the=20
consumer is the only reader of that partition and consumes the data in =
order.=20
Since there are many partitions this still balances the load over many =
consumer=20
instances. Note however that there cannot be more consumer instances =
than=20
partitions.=20
<P>Kafka only provides a total order over messages <I>within</I> a =
partition,=20
not between different partitions in a topic. Per-partition ordering =
combined=20
with the ability to partition data by key is sufficient for most =
applications.=20
However, if you require a total order over messages this can be achieved =
with a=20
topic that has only one partition, though this will mean only one =
consumer=20
process.=20
<H4>Guarantees</H4>At a high-level Kafka gives the following guarantees: =

<UL>
  <LI>Messages sent by a producer to a particular topic partition will =
be=20
  appended in the order they are sent. That is, if a message M1 is sent =
by the=20
  same producer as a message M2, and M1 is sent first, then M1 will have =
a lower=20
  offset than M2 and appear earlier in the log.  =20
  <LI>A consumer instance sees messages in the order they are stored in =
the log.=20
   =20
  <LI>For a topic with replication factor N, we will tolerate up to N-1 =
server=20
  failures without losing any messages committed to the log. =
</LI></UL>More=20
details on these guarantees are given in the design section of the=20
documentation.=20
<H3><A id=3D"uses">1.2 Use Cases</A></H3>Here is a description of a few =
of the=20
popular use cases for Apache Kafka. For an overview of a number of these =
areas=20
in action, see <A =
href=3D"http://engineering.linkedin.com/distributed-systems/log-what-ever=
y-software-engineer-should-know-about-real-time-datas-unifying">this=20
blog post</A>.=20
<H4>Messaging</H4>Kafka works well as a replacement for a more =
traditional=20
message broker. Message brokers are used for a variety of reasons (to =
decouple=20
processing from data producers, to buffer unprocessed messages, etc). In =

comparison to most messaging systems Kafka has better throughput, =
built-in=20
partitioning, replication, and fault-tolerance which makes it a good =
solution=20
for large scale message processing applications.=20
<P>In our experience messaging uses are often comparatively =
low-throughput, but=20
may require low end-to-end latency and often depend on the strong =
durability=20
guarantees Kafka provides.=20
<P>In this domain Kafka is comparable to traditional messaging systems =
such as=20
<A href=3D"http://activemq.apache.org/">ActiveMQ</A> or <A =
href=3D"https://www.rabbitmq.com/">RabbitMQ</A>.=20
<H4>Website Activity Tracking</H4>The original use case for Kafka was to =
be able=20
to rebuild a user activity tracking pipeline as a set of real-time=20
publish-subscribe feeds. This means site activity (page views, searches, =
or=20
other actions users may take) is published to central topics with one =
topic per=20
activity type. These feeds are available for subscription for a range of =
use=20
cases including real-time processing, real-time monitoring, and loading =
into=20
Hadoop or offline data warehousing systems for offline processing and =
reporting.=20
<P>Activity tracking is often very high volume as many activity messages =
are=20
generated for each user page view.=20
<H4>Metrics</H4>Kafka is often used for operational monitoring data. =
This=20
involves aggregating statistics from distributed applications to produce =

centralized feeds of operational data.=20
<H4>Log Aggregation</H4>Many people use Kafka as a replacement for a log =

aggregation solution. Log aggregation typically collects physical log =
files off=20
servers and puts them in a central place (a file server or HDFS perhaps) =
for=20
processing. Kafka abstracts away the details of files and gives a =
cleaner=20
abstraction of log or event data as a stream of messages. This allows =
for=20
lower-latency processing and easier support for multiple data sources =
and=20
distributed data consumption. In comparison to log-centric systems like =
Scribe=20
or Flume, Kafka offers equally good performance, stronger durability =
guarantees=20
due to replication, and much lower end-to-end latency.=20
<H4>Stream Processing</H4>Many users end up doing stage-wise processing =
of data=20
where data is consumed from topics of raw data and then aggregated, =
enriched, or=20
otherwise transformed into new Kafka topics for further consumption. For =
example=20
a processing flow for article recommendation might crawl article content =
from=20
RSS feeds and publish it to an "articles" topic; further processing =
might help=20
normalize or deduplicate this content to a topic of cleaned article =
content; a=20
final stage might attempt to match this content to users. This creates a =
graph=20
of real-time data flow out of the individual topics. <A =
href=3D"https://github.com/nathanmarz/storm">Storm</A>=20
and <A href=3D"http://samza.incubator.apache.org/">Samza</A> are popular =

frameworks for implementing these kinds of transformations.=20
<H4>Event Sourcing</H4><A =
href=3D"http://martinfowler.com/eaaDev/EventSourcing.html">Event=20
sourcing</A> is a style of application design where state changes are =
logged as=20
a time-ordered sequence of records. Kafka's support for very large =
stored log=20
data makes it an excellent backend for an application built in this =
style.=20
<H4>Commit Log</H4>Kafka can serve as a kind of external commit-log for =
a=20
distributed system. The log helps replicate data between nodes and acts =
as a=20
re-syncing mechanism for failed nodes to restore their data. The <A =
href=3D"https://kafka.apache.org/documentation.html#compaction">log=20
compaction</A> feature in Kafka helps support this usage. In this usage =
Kafka is=20
similar to <A href=3D"http://zookeeper.apache.org/bookkeeper/">Apache=20
BookKeeper</A> project.=20
<H3><A id=3D"quickstart">1.3 Quick Start</A></H3>This tutorial assumes =
you are=20
starting fresh and have no existing Kafka or ZooKeeper data.=20
<H4> Step 1: Download the code </H4><A title=3D"Kafka downloads" =
href=3D"https://www.apache.org/dyn/closer.cgi?path=3D/kafka/0.8.1/kafka_2=
.9.2-0.8.1.1.tgz">Download</A>=20
the 0.8.1 release and un-tar it.=20
<PRE>&gt; <B>tar -xzf kafka_2.9.2-0.8.1.1.tgz</B>=0A=
&gt; <B>cd kafka_2.9.2-0.8.1.1</B>=0A=
</PRE>
<H4>Step 2: Start the server</H4>
<P>Kafka uses ZooKeeper so you need to first start a ZooKeeper server if =
you=20
don't already have one. You can use the convenience script packaged with =
kafka=20
to get a quick-and-dirty single-node ZooKeeper instance.=20
<PRE>&gt; <B>bin/zookeeper-server-start.sh =
config/zookeeper.properties</B>=0A=
[2013-04-22 15:01:37,495] INFO Reading configuration from: =
config/zookeeper.properties =
(org.apache.zookeeper.server.quorum.QuorumPeerConfig)=0A=
...=0A=
</PRE>
Now start the Kafka server:=20
<PRE>&gt; <B>bin/kafka-server-start.sh config/server.properties</B>=0A=
[2013-04-22 15:01:47,028] INFO Verifying properties =
(kafka.utils.VerifiableProperties)=0A=
[2013-04-22 15:01:47,051] INFO Property socket.send.buffer.bytes is =
overridden to 1048576 (kafka.utils.VerifiableProperties)=0A=
...=0A=
</PRE>
<H4>Step 3: Create a topic</H4>Let's create a topic named "test" with a =
single=20
partition and only one replica:=20
<PRE>&gt; <B>bin/kafka-topics.sh --create --zookeeper localhost:2181 =
--replication-factor 1 --partitions 1 --topic test</B>=0A=
</PRE>
We can now see that topic if we run the list topic command:=20
<PRE>&gt; <B>bin/kafka-topics.sh --list --zookeeper localhost:2181</B>=0A=
test=0A=
</PRE>
Alternatively, instead of manually creating topics you can also =
configure your=20
brokers to auto-create topics when a non-existent topic is published to. =

<H4>Step 4: Send some messages</H4>Kafka comes with a command line =
client that=20
will take input from a file or from standard input and send it out as =
messages=20
to the Kafka cluster. By default each line will be sent as a separate =
message.=20
<P>Run the producer and then type a few messages into the console to =
send to the=20
server.=20
<PRE>&gt; <B>bin/kafka-console-producer.sh --broker-list localhost:9092 =
--topic test</B> =0A=
<B>This is a message</B>=0A=
<B>This is another message</B>=0A=
</PRE>
<H4>Step 5: Start a consumer</H4>Kafka also has a command line consumer =
that=20
will dump out messages to standard output.=20
<PRE>&gt; <B>bin/kafka-console-consumer.sh --zookeeper localhost:2181 =
--topic test --from-beginning</B>=0A=
This is a message=0A=
This is another message=0A=
</PRE>
<P>If you have each of the above commands running in a different =
terminal then=20
you should now be able to type messages into the producer terminal and =
see them=20
appear in the consumer terminal. </P>
<P>All of the command line tools have additional options; running the =
command=20
with no arguments will display usage information documenting them in =
more=20
detail.	 </P>
<H4>Step 6: Setting up a multi-broker cluster</H4>So far we have been =
running=20
against a single broker, but that's no fun. For Kafka, a single broker =
is just a=20
cluster of size one, so nothing much changes other than starting a few =
more=20
broker instances. But just to get feel for it, let's expand our cluster =
to three=20
nodes (still all on our local machine).=20
<P>First we make a config file for each of the brokers:=20
<PRE>&gt; <B>cp config/server.properties config/server-1.properties</B> =0A=
&gt; <B>cp config/server.properties config/server-2.properties</B>=0A=
</PRE>
Now edit these new files and set the following properties:=20
<PRE> =0A=
config/server-1.properties:=0A=
    broker.id=3D1=0A=
    port=3D9093=0A=
    log.dir=3D/tmp/kafka-logs-1=0A=
 =0A=
config/server-2.properties:=0A=
    broker.id=3D2=0A=
    port=3D9094=0A=
    log.dir=3D/tmp/kafka-logs-2=0A=
</PRE>
The <CODE>broker.id</CODE> property is the unique and permanent name of =
each=20
node in the cluster. We have to override the port and log directory only =
because=20
we are running these all on the same machine and we want to keep the =
brokers=20
from all trying to register on the same port or overwrite each others =
data.=20
<P>We already have Zookeeper and our single node started, so we just =
need to=20
start the two new nodes:=20
<PRE>&gt; <B>bin/kafka-server-start.sh config/server-1.properties =
&amp;</B>=0A=
...=0A=
&gt; <B>bin/kafka-server-start.sh config/server-2.properties &amp;</B>=0A=
...=0A=
</PRE>
Now create a new topic with a replication factor of three:=20
<PRE>&gt; <B>bin/kafka-topics.sh --create --zookeeper localhost:2181 =
--replication-factor 3 --partitions 1 --topic my-replicated-topic</B>=0A=
</PRE>
Okay but now that we have a cluster how can we know which broker is =
doing what?=20
To see that run the "describe topics" command:=20
<PRE>&gt; <B>bin/kafka-topics.sh --describe --zookeeper localhost:2181 =
--topic my-replicated-topic</B>=0A=
Topic:my-replicated-topic	PartitionCount:1	ReplicationFactor:3	Configs:=0A=
	Topic: my-replicated-topic	Partition: 0	Leader: 1	Replicas: 1,2,0	Isr: =
1,2,0=0A=
</PRE>
Here is an explanation of output. The first line gives a summary of all =
the=20
partitions, each additional line gives information about one partition. =
Since we=20
have only one partition for this topic there is only one line.=20
<UL>
  <LI>"leader" is the node responsible for all reads and writes for the =
given=20
  partition. Each node will be the leader for a randomly selected =
portion of the=20
  partitions.  =20
  <LI>"replicas" is the list of nodes that replicate the log for this =
partition=20
  regardless of whether they are the leader or even if they are =
currently alive.=20
   =20
  <LI>"isr" is the set of "in-sync" replicas. This is the subset of the =
replicas=20
  list that is currently alive and caught-up to the leader. </LI></UL> =
Note that=20
in my example node 1 is the leader for the only partition of the topic.=20
<P>We can run the same command on the original topic we created to see =
where it=20
is:=20
<PRE>&gt; <B>bin/kafka-topics.sh --describe --zookeeper localhost:2181 =
--topic test</B>=0A=
Topic:test	PartitionCount:1	ReplicationFactor:1	Configs:=0A=
	Topic: test	Partition: 0	Leader: 0	Replicas: 0	Isr: 0=0A=
</PRE>
So there is no surprise there=E2=80=94the original topic has no replicas =
and is on=20
server 0, the only server in our cluster when we created it.=20
<P>Let's publish a few messages to our new topic:=20
<PRE>&gt; <B>bin/kafka-console-producer.sh --broker-list localhost:9092 =
--topic my-replicated-topic</B>=0A=
...=0A=
<B>my test message 1</B>=0A=
<B>my test message 2</B>=0A=
<B>^C</B> =0A=
</PRE>
Now let's consume these messages:=20
<PRE>&gt; <B>bin/kafka-console-consumer.sh --zookeeper localhost:2181 =
--from-beginning --topic my-replicated-topic</B>=0A=
...=0A=
my test message 1=0A=
my test message 2=0A=
<B>^C</B>=0A=
</PRE>
Now let's test out fault-tolerance. Broker 1 was acting as the leader so =
let's=20
kill it:=20
<PRE>&gt; <B>ps | grep server-1.properties</B>=0A=
<I>7564</I> ttys002    0:15.91 =
/System/Library/Frameworks/JavaVM.framework/Versions/1.6/Home/bin/java...=0A=
&gt; <B>kill -9 7564</B>=0A=
</PRE>
Leadership has switched to one of the slaves and node 1 is no longer in =
the=20
in-sync replica set:=20
<PRE>&gt; <B>bin/kafka-topics.sh --describe --zookeeper localhost:218192 =
--topic my-replicated-topic</B>=0A=
Topic:my-replicated-topic	PartitionCount:1	ReplicationFactor:3	Configs:=0A=
	Topic: my-replicated-topic	Partition: 0	Leader: 2	Replicas: 1,2,0	Isr: =
2,0=0A=
</PRE>
But the messages are still be available for consumption even though the =
leader=20
that took the writes originally is down:=20
<PRE>&gt; <B>bin/kafka-console-consumer.sh --zookeeper localhost:2181 =
--from-beginning --topic my-replicated-topic</B>=0A=
...=0A=
my test message 1=0A=
my test message 2=0A=
<B>^C</B>=0A=
</PRE>
<H3><A id=3D"upgrade">1.4 Ecosystem</A></H3>There are a plethora of =
tools that=20
integrate with Kafka outside the main distribution. The <A =
href=3D"https://cwiki.apache.org/confluence/display/KAFKA/Ecosystem">=20
ecosystem page</A> lists many of these, including stream processing =
systems,=20
Hadoop integration, monitoring, and deployment tools.=20
<H3><A id=3D"upgrade">1.5 Upgrading From Previous Versions</A></H3>
<H4>Upgrading from 0.8.0 to 0.8.1</H4>0.8.1 is fully compatible with =
0.8. The=20
upgrade can be done one broker at a time by simply bringing it down, =
updating=20
the code, and restarting it.=20
<H4>Upgrading from 0.7</H4>0.8, the release in which added replication, =
was our=20
first backwards-incompatible release: major changes were made to the =
API,=20
ZooKeeper data structures, and protocol, and configuration. The upgrade =
from 0.7=20
to 0.8.x requires a <A =
href=3D"https://cwiki.apache.org/confluence/display/KAFKA/Migrating+from+=
0.7+to+0.8">special=20
tool</A> for migration. This migration can be done without downtime.=20
<H2><A id=3D"api">2. API</A></H2>
<H3><A id=3D"producerapi">2.1 Producer API</A></H3>
<PRE>/**=0A=
 *  V: type of the message=0A=
 *  K: type of the optional key associated with the message=0A=
 */=0A=
class kafka.javaapi.producer.Producer&lt;K,V&gt;=0A=
{=0A=
  public Producer(ProducerConfig config);=0A=
=0A=
  /**=0A=
   * Sends the data to a single topic, partitioned by key, using either =
the=0A=
   * synchronous or the asynchronous producer=0A=
   * @param message the producer data object that encapsulates the =
topic, key and message data=0A=
   */=0A=
  public void send(KeyedMessage&lt;K,V&gt; message);=0A=
=0A=
  /**=0A=
   * Use this API to send data to multiple topics=0A=
   * @param messages list of producer data objects that encapsulate the =
topic, key and message data=0A=
   */=0A=
  public void send(List&lt;KeyedMessage&lt;K,V&gt;&gt; messages);=0A=
=0A=
  /**=0A=
   * Close API to close the producer pool connections to all Kafka =
brokers.=0A=
   */=0A=
  public void close();=0A=
}=0A=
=0A=
</PRE>
You can follow  <A title=3D"Kafka 0.8 producer example" =
href=3D"https://cwiki.apache.org/confluence/display/KAFKA/0.8.0+Producer+=
Example">this=20
example</A> to learn how to use the producer api.=20
<H3><A id=3D"highlevelconsumerapi">2.2 High Level Consumer API</A></H3>
<PRE>class Consumer {=0A=
  /**=0A=
   *  Create a ConsumerConnector=0A=
   *=0A=
   *  @param config  at the minimum, need to specify the groupid of the =
consumer and the zookeeper=0A=
   *                 connection string zookeeper.connect.=0A=
   */=0A=
  public static kafka.javaapi.consumer.ConsumerConnector =
createJavaConsumerConnector(config: ConsumerConfig);=0A=
}=0A=
=0A=
/**=0A=
 *  V: type of the message=0A=
 *  K: type of the optional key assciated with the message=0A=
 */=0A=
public interface kafka.javaapi.consumer.ConsumerConnector {=0A=
  /**=0A=
   *  Create a list of message streams of type T for each topic.=0A=
   *=0A=
   *  @param topicCountMap  a map of (topic, #streams) pair=0A=
   *  @param decoder a decoder that converts from Message to T=0A=
   *  @return a map of (topic, list of  KafkaStream) pairs.=0A=
   *          The number of items in the list is #streams. Each stream =
supports=0A=
   *          an iterator over message/metadata pairs.=0A=
   */=0A=
  public &lt;K,V&gt; Map&lt;String, =
List&lt;KafkaStream&lt;K,V&gt;&gt;&gt; =0A=
    createMessageStreams(Map&lt;String, Integer&gt; topicCountMap, =
Decoder&lt;K&gt; keyDecoder, Decoder&lt;V&gt; valueDecoder);=0A=
  =0A=
  /**=0A=
   *  Create a list of message streams of type T for each topic, using =
the default decoder.=0A=
   */=0A=
  public Map&lt;String, List&lt;KafkaStream&lt;byte[], =
byte[]&gt;&gt;&gt; createMessageStreams(Map&lt;String, Integer&gt; =
topicCountMap);=0A=
=0A=
  /**=0A=
   *  Create a list of message streams for topics matching a wildcard.=0A=
   *=0A=
   *  @param topicFilter a TopicFilter that specifies which topics to=0A=
   *                    subscribe to (encapsulates a whitelist or a =
blacklist).=0A=
   *  @param numStreams the number of message streams to return.=0A=
   *  @param keyDecoder a decoder that decodes the message key=0A=
   *  @param valueDecoder a decoder that decodes the message itself=0A=
   *  @return a list of KafkaStream. Each stream supports an=0A=
   *          iterator over its MessageAndMetadata elements.=0A=
   */=0A=
  public &lt;K,V&gt; List&lt;KafkaStream&lt;K,V&gt;&gt; =0A=
    createMessageStreamsByFilter(TopicFilter topicFilter, int =
numStreams, Decoder&lt;K&gt; keyDecoder, Decoder&lt;V&gt; valueDecoder);=0A=
  =0A=
  /**=0A=
   *  Create a list of message streams for topics matching a wildcard, =
using the default decoder.=0A=
   */=0A=
  public List&lt;KafkaStream&lt;byte[], byte[]&gt;&gt; =
createMessageStreamsByFilter(TopicFilter topicFilter, int numStreams);=0A=
  =0A=
  /**=0A=
   *  Create a list of message streams for topics matching a wildcard, =
using the default decoder, with one stream.=0A=
   */=0A=
  public List&lt;KafkaStream&lt;byte[], byte[]&gt;&gt; =
createMessageStreamsByFilter(TopicFilter topicFilter);=0A=
=0A=
  /**=0A=
   *  Commit the offsets of all topic/partitions connected by this =
connector.=0A=
   */=0A=
  public void commitOffsets();=0A=
=0A=
  /**=0A=
   *  Shut down the connector=0A=
   */=0A=
  public void shutdown();=0A=
}=0A=
=0A=
</PRE>
You can follow  <A title=3D"Kafka 0.8 consumer example" =
href=3D"https://cwiki.apache.org/confluence/display/KAFKA/Consumer+Group+=
Example">this=20
example</A> to learn how to use the high level consumer api.=20
<H3><A id=3D"simpleconsumerapi">2.3 Simple Consumer API</A></H3>
<PRE>class kafka.javaapi.consumer.SimpleConsumer {=0A=
  /**=0A=
   *  Fetch a set of messages from a topic.=0A=
   *=0A=
   *  @param request specifies the topic name, topic partition, starting =
byte offset, maximum bytes to be fetched.=0A=
   *  @return a set of fetched messages=0A=
   */=0A=
  public FetchResponse fetch(request: kafka.javaapi.FetchRequest);=0A=
=0A=
  /**=0A=
   *  Fetch metadata for a sequence of topics.=0A=
   *  =0A=
   *  @param request specifies the versionId, clientId, sequence of =
topics.=0A=
   *  @return metadata for each topic in the request.=0A=
   */=0A=
  public kafka.javaapi.TopicMetadataResponse send(request: =
kafka.javaapi.TopicMetadataRequest);=0A=
=0A=
  /**=0A=
   *  Get a list of valid offsets (up to maxSize) before the given time.=0A=
   *=0A=
   *  @param request a [[kafka.javaapi.OffsetRequest]] object.=0A=
   *  @return a [[kafka.javaapi.OffsetResponse]] object.=0A=
   */=0A=
  public kafka.javaapi.OffsetResponse getOffsetsBefore(request: =
OffsetRequest);=0A=
=0A=
  /**=0A=
   * Close the SimpleConsumer.=0A=
   */=0A=
  public void close();=0A=
}=0A=
</PRE>
For most applications, the high level consumer Api is good enough. Some=20
applications want features not exposed to the high level consumer yet =
(e.g., set=20
initial offset when restarting the consumer). They can instead use our =
low level=20
SimpleConsumer Api. The logic will be a bit more complicated and you can =
follow=20
the example in <A title=3D"Kafka 0.8 SimpleConsumer example" =
href=3D"https://cwiki.apache.org/confluence/display/KAFKA/0.8.0+SimpleCon=
sumer+Example">here</A>.=20
<H3><A id=3D"kafkahadoopconsumerapi">2.4 Kafka Hadoop Consumer =
API</A></H3>
<P>Providing a horizontally scalable solution for aggregating and =
loading data=20
into Hadoop was one of our basic use cases. To support this use case, we =
provide=20
a Hadoop-based consumer which spawns off many map tasks to pull data =
from the=20
Kafka cluster in parallel. This provides extremely fast pull-based =
Hadoop data=20
load capabilities (we were able to fully saturate the network with only =
a=20
handful of Kafka servers). </P>
<P>Usage information on the hadoop consumer can be found <A =
href=3D"https://github.com/linkedin/camus/tree/camus-kafka-0.8/">here</A>=
.=20
</P>
<H2><A id=3D"configuration">3. Configuration</A></H2>Kafka uses =
key-value pairs in=20
the <A href=3D"http://en.wikipedia.org/wiki/.properties">property file =
format</A>=20
for configuration. These values can be supplied either from a file or=20
programmatically.=20
<H3><A id=3D"brokerconfigs">3.1 Broker Configs</A></H3>The essential=20
configurations are the following:=20
<UL>
  <LI><CODE>broker.id</CODE>    =20
  <LI><CODE>log.dirs</CODE>    =20
  <LI><CODE>zookeeper.connect</CODE> </LI></UL>Topic-level =
configurations and=20
defaults are discussed in more detail <A =
href=3D"https://kafka.apache.org/documentation.html#topic-config">below</=
A>.=20
<TABLE class=3D"data-table">
  <TBODY>
  <TR>
    <TH>Property</TH>
    <TH>Default</TH>
    <TH>Description</TH></TR>
  <TR>
    <TD>broker.id</TD>
    <TD></TD>
    <TD>Each broker is uniquely identified by a non-negative integer id. =
This=20
      id serves as the broker's "name" and allows the broker to be moved =
to a=20
      different host/port without confusing consumers. You can choose =
any number=20
      you like so long as it is unique.     </TD></TR>
  <TR>
    <TD>log.dirs</TD>
    <TD nowrap=3D"">/tmp/kafka-logs</TD>
    <TD>A comma-separated list of one or more directories in which Kafka =
data=20
      is stored. Each new partition that is created will be placed in =
the=20
      directory which currently has the fewest partitions.</TD></TR>
  <TR>
    <TD>port</TD>
    <TD>6667</TD>
    <TD>The port on which the server accepts client =
connections.</TD></TR>
  <TR>
    <TD>zookeeper.connect</TD>
    <TD>null</TD>
    <TD>Specifies the ZooKeeper connection string in the form=20
      <CODE>hostname:port</CODE>, where hostname and port are the host =
and port=20
      for a node in your ZooKeeper cluster. To allow connecting through =
other=20
      ZooKeeper nodes when that host is down you can also specify =
multiple hosts=20
      in the form =
<CODE>hostname1:port1,hostname2:port2,hostname3:port3</CODE>. =20
        =20
      <P>ZooKeeper also allows you to add a "chroot" path which will =
make all=20
      kafka data for this cluster appear under a particular path. This =
is a way=20
      to setup multiple Kafka clusters or other applications on the same =

      ZooKeeper cluster. To do this give a connection string in the form =

      =
<CODE>hostname1:port1,hostname2:port2,hostname3:port3/chroot/path</CODE> =

      which would put all this cluster's data under the path=20
      <CODE>/chroot/path</CODE>. Note that you must create this path =
yourself=20
      prior to starting the broker and consumers must use the same =
connection=20
      string.</P></TD></TR>
  <TR>
    <TD>message.max.bytes</TD>
    <TD>1000000</TD>
    <TD>The maximum size of a message that the server can receive. It is =

      important that this property be in sync with the maximum fetch =
size your=20
      consumers use or else an unruly producer will be able to publish =
messages=20
      too large for consumers to consume.</TD></TR>
  <TR>
    <TD>num.network.threads</TD>
    <TD>3</TD>
    <TD>The number of network threads that the server uses for handling=20
      network requests. You probably don't need to change =
this.</TD></TR>
  <TR>
    <TD>num.io.threads</TD>
    <TD>8</TD>
    <TD>The number of I/O threads that the server uses for executing =
requests.=20
      You should have at least as many threads as you have =
disks.</TD></TR>
  <TR>
    <TD>background.threads</TD>
    <TD>4</TD>
    <TD>The number of threads to use for various background processing =
tasks=20
      such as file deletion. You should not need to change =
this.</TD></TR>
  <TR>
    <TD>queued.max.requests</TD>
    <TD>500</TD>
    <TD>The number of requests that can be queued up for processing by =
the I/O=20
      threads before the network threads stop reading in new =
requests.</TD></TR>
  <TR>
    <TD>host.name</TD>
    <TD>null</TD>
    <TD>
      <P>Hostname of broker. If this is set, it will only bind to this =
address.=20
      If this is not set, it will bind to all interfaces, and publish =
one to=20
      ZK.</P></TD></TR>
  <TR>
    <TD>advertised.host.name</TD>
    <TD>null</TD>
    <TD>
      <P>If this is set this is the hostname that will be given out to=20
      producers, consumers, and other brokers to connect =
to.</P></TD></TR>
  <TR>
    <TD>advertised.port</TD>
    <TD>null</TD>
    <TD>
      <P>The port to give out to producers, consumers, and other brokers =
to use=20
      in establishing connections. This only needs to be set if this =
port is=20
      different from the port the server should bind to.</P></TD></TR>
  <TR>
    <TD>socket.send.buffer.bytes</TD>
    <TD>100 * 1024</TD>
    <TD>The SO_SNDBUFF buffer the server prefers for socket =
connections.</TD></TR>
  <TR>
    <TD>socket.receive.buffer.bytes</TD>
    <TD>100 * 1024</TD>
    <TD>The SO_RCVBUFF buffer the server prefers for socket =
connections.</TD></TR>
  <TR>
    <TD>socket.request.max.bytes</TD>
    <TD>100 * 1024 * 1024</TD>
    <TD>The maximum request size the server will allow. This prevents =
the=20
      server from running out of memory and should be smaller than the =
Java heap=20
      size.</TD></TR>
  <TR>
    <TD>num.partitions</TD>
    <TD>1</TD>
    <TD>The default number of partitions per topic if a partition count =
isn't=20
      given at topic creation time.</TD></TR>
  <TR>
    <TD>log.segment.bytes</TD>
    <TD nowrap=3D"">1024 * 1024 * 1024</TD>
    <TD>The log for a topic partition is stored as a directory of =
segment=20
      files. This setting controls the size to which a segment file will =
grow=20
      before a new segment is rolled over in the log. This setting can =
be=20
      overridden on a per-topic basis (see <A =
href=3D"https://kafka.apache.org/documentation.html#topic-config">the=20
      per-topic configuration section</A>).</TD></TR>
  <TR>
    <TD>log.roll.hours</TD>
    <TD>24 * 7</TD>
    <TD>This setting will force Kafka to roll a new log segment even if =
the=20
      log.segment.bytes size has not been reached. This setting can be=20
      overridden on a per-topic basis (see <A =
href=3D"https://kafka.apache.org/documentation.html#topic-config">the=20
      per-topic configuration section</A>).</TD></TR>
  <TR>
    <TD>log.cleanup.policy</TD>
    <TD>delete</TD>
    <TD>This can take either the value <I>delete</I> or <I>compact</I>. =
If=20
      <I>delete</I> is set, log segments will be deleted when they reach =
the=20
      size or time limits set. If <I>compact</I> is set <A =
href=3D"https://kafka.apache.org/documentation.html#compaction">log=20
      compaction</A> will be used to clean out obsolete records. This =
setting=20
      can be overridden on a per-topic basis (see <A =
href=3D"https://kafka.apache.org/documentation.html#topic-config">the=20
      per-topic configuration section</A>).</TD></TR>
  <TR>
    <TD>log.retention.minutes</TD>
    <TD>7 days</TD>
    <TD>The number of minutes to keep a log segment before it is =
deleted, i.e.=20
      the default data retention window for all topics. Note that if =
both=20
      log.retention.minutes and log.retention.bytes are both set we =
delete a=20
      segment when either limit is exceeded. This setting can be =
overridden on a=20
      per-topic basis (see <A =
href=3D"https://kafka.apache.org/documentation.html#topic-config">the=20
      per-topic configuration section</A>).</TD></TR>
  <TR>
    <TD>log.retention.bytes</TD>
    <TD>-1</TD>
    <TD>The amount of data to retain in the log for each =
topic-partitions.=20
      Note that this is the limit per-partition so multiply by the =
number of=20
      partitions to get the total data retained for the topic. Also note =
that if=20
      both log.retention.hours and log.retention.bytes are both set we =
delete a=20
      segment when either limit is exceeded. This setting can be =
overridden on a=20
      per-topic basis (see <A =
href=3D"https://kafka.apache.org/documentation.html#topic-config">the=20
      per-topic configuration section</A>).</TD></TR>
  <TR>
    <TD>log.retention.check.interval.ms</TD>
    <TD>5 minutes</TD>
    <TD>The period with which we check whether any log segment is =
eligible for=20
      deletion to meet the retention policies.</TD></TR>
  <TR>
    <TD>log.cleaner.enable</TD>
    <TD>false</TD>
    <TD>This configuration must be set to true for log compaction to=20
run.</TD></TR>
  <TR>
    <TD>log.cleaner.threads</TD>
    <TD>1</TD>
    <TD>The number of threads to use for cleaning logs in log=20
compaction.</TD></TR>
  <TR>
    <TD>log.cleaner.io.max.bytes.per.second</TD>
    <TD>None</TD>
    <TD>The maximum amount of I/O the log cleaner can do while =
performing log=20
      compaction. This setting allows setting a limit for the cleaner to =
avoid=20
      impacting live request serving.</TD></TR>
  <TR>
    <TD>log.cleaner.dedupe.buffer.size</TD>
    <TD>500*1024*1024</TD>
    <TD>The size of the buffer the log cleaner uses for indexing and=20
      deduplicating logs during cleaning. Larger is better provided you =
have=20
      sufficient memory.</TD></TR>
  <TR>
    <TD>log.cleaner.io.buffer.size</TD>
    <TD>512*1024</TD>
    <TD>The size of the I/O chunk used during log cleaning. You probably =
don't=20
      need to change this.</TD></TR>
  <TR>
    <TD>log.cleaner.io.buffer.load.factor</TD>
    <TD>0.9</TD>
    <TD>The load factor of the hash table used in log cleaning. You =
probably=20
      don't need to change this.</TD></TR>
  <TR>
    <TD>log.cleaner.backoff.ms</TD>
    <TD>15000</TD>
    <TD>The interval between checks to see if any logs need =
cleaning.</TD></TR>
  <TR>
    <TD>log.cleaner.min.cleanable.ratio</TD>
    <TD>0.5</TD>
    <TD>This configuration controls how frequently the log compactor =
will=20
      attempt to clean the log (assuming <A =
href=3D"https://kafka.apache.org/documentation.html#compaction">log=20
      compaction</A> is enabled). By default we will avoid cleaning a =
log where=20
      more than 50% of the log has been compacted. This ratio bounds the =
maximum=20
      space wasted in the log by duplicates (at 50% at most 50% of the =
log could=20
      be duplicates). A higher ratio will mean fewer, more efficient =
cleanings=20
      but will mean more wasted space in the log. This setting can be =
overridden=20
      on a per-topic basis (see <A =
href=3D"https://kafka.apache.org/documentation.html#topic-config">the=20
      per-topic configuration section</A>).</TD></TR>
  <TR>
    <TD>log.cleaner.delete.retention.ms</TD>
    <TD>1 day</TD>
    <TD>The amount of time to retain delete tombstone markers for <A =
href=3D"https://kafka.apache.org/documentation.html#compaction">log=20
      compacted</A> topics. This setting also gives a bound on the time =
in which=20
      a consumer must complete a read if they begin from offset 0 to =
ensure that=20
      they get a valid snapshot of the final stage (otherwise delete =
tombstones=20
      may be collected before they complete their scan). This setting =
can be=20
      overridden on a per-topic basis (see <A =
href=3D"https://kafka.apache.org/documentation.html#topic-config">the=20
      per-topic configuration section</A>).</TD></TR>
  <TR>
    <TD>log.index.size.max.bytes</TD>
    <TD>10 * 1024 * 1024</TD>
    <TD>The maximum size in bytes we allow for the offset index for each =
log=20
      segment. Note that we will always pre-allocate a sparse file with =
this=20
      much space and shrink it down when the log rolls. If the index =
fills up we=20
      will roll a new log segment even if we haven't reached the=20
      log.segment.bytes limit. This setting can be overridden on a =
per-topic=20
      basis (see <A =
href=3D"https://kafka.apache.org/documentation.html#topic-config">the=20
      per-topic configuration section</A>).</TD></TR>
  <TR>
    <TD>log.index.interval.bytes</TD>
    <TD>4096</TD>
    <TD>The byte interval at which we add an entry to the offset index. =
When=20
      executing a fetch request the server must do a linear scan for up =
to this=20
      many bytes to find the correct position in the log to begin and =
end the=20
      fetch. So setting this value to be larger will mean larger index =
files=20
      (and a bit more memory usage) but less scanning. However the =
server will=20
      never add more than one index entry per log append (even if more =
than=20
      log.index.interval worth of messages are appended). In general you =

      probably don't need to mess with this value.</TD></TR>
  <TR>
    <TD>log.flush.interval.messages</TD>
    <TD>None</TD>
    <TD>The number of messages written to a log partition before we =
force an=20
      fsync on the log. Setting this lower will sync data to disk more =
often but=20
      will have a major impact on performance. We generally recommend =
that=20
      people make use of replication for durability rather than =
depending on=20
      single-server fsync, however this setting can be used to be extra=20
    certain.</TD></TR>
  <TR>
    <TD>log.flush.scheduler.interval.ms</TD>
    <TD>3000</TD>
    <TD>The frequency in ms that the log flusher checks whether any log =
is=20
      eligible to be flushed to disk.</TD></TR>
  <TR>
    <TD>log.flush.interval.ms</TD>
    <TD>None</TD>
    <TD>The maximum time between fsync calls on the log. If used in =
conjuction=20
      with log.flush.interval.messages the log will be flushed when =
either=20
      criteria is met.</TD></TR>
  <TR>
    <TD>log.delete.delay.ms</TD>
    <TD>60000</TD>
    <TD>The period of time we hold log files around after they are =
removed=20
      from the index. This period of time allows any in-progress reads =
to=20
      complete uninterrupted without locking. You generally don't need =
to change=20
      this.</TD></TR>
  <TR>
    <TD>log.flush.offset.checkpoint.interval.ms</TD>
    <TD>60000</TD>
    <TD>The frequency with which we checkpoint the last flush point for =
logs=20
      for recovery. You should not need to change this.</TD></TR>
  <TR>
    <TD>auto.create.topics.enable</TD>
    <TD>true</TD>
    <TD>Enable auto creation of topic on the server.  If this is set to =
true=20
      then attempts to produce, consume, or fetch metadata for a =
non-existent=20
      topic will automatically create it with the default replication =
factor and=20
      number of partitions.</TD></TR>
  <TR>
    <TD>controller.socket.timeout.ms</TD>
    <TD>30000</TD>
    <TD>The socket timeout for commands from the partition management=20
      controller to the replicas.</TD></TR>
  <TR>
    <TD>controller.message.queue.size</TD>
    <TD>10</TD>
    <TD>The buffer size for controller-to-broker-channels</TD></TR>
  <TR>
    <TD>default.replication.factor</TD>
    <TD>1</TD>
    <TD>The default replication factor for automatically created =
topics.</TD></TR>
  <TR>
    <TD>replica.lag.time.max.ms</TD>
    <TD>10000</TD>
    <TD>If a follower hasn't sent any fetch requests for this window of =
time,=20
      the leader will remove the follower from ISR (in-sync replicas) =
and treat=20
      it as dead.</TD></TR>
  <TR>
    <TD>replica.lag.max.messages</TD>
    <TD>4000</TD>
    <TD>If a replica falls more than this many messages behind the =
leader, the=20
      leader will remove the follower from ISR and treat it as =
dead.</TD></TR>
  <TR>
    <TD>replica.socket.timeout.ms</TD>
    <TD>30 * 1000</TD>
    <TD>The socket timeout for network requests to the leader for =
replicating=20
      data.</TD></TR>
  <TR>
    <TD>replica.socket.receive.buffer.bytes</TD>
    <TD>64 * 1024</TD>
    <TD>The socket receive buffer for network requests to the leader for =

      replicating data.</TD></TR>
  <TR>
    <TD>replica.fetch.max.bytes</TD>
    <TD nowrap=3D"">1024 * 1024</TD>
    <TD>The number of byes of messages to attempt to fetch for each =
partition=20
      in the fetch requests the replicas send to the leader.</TD></TR>
  <TR>
    <TD>replica.fetch.wait.max.ms</TD>
    <TD>500</TD>
    <TD>The maximum amount of time to wait time for data to arrive on =
the=20
      leader in the fetch requests sent by the replicas to the =
leader.</TD></TR>
  <TR>
    <TD>replica.fetch.min.bytes</TD>
    <TD>1</TD>
    <TD>Minimum bytes expected for each fetch response for the fetch =
requests=20
      from the replica to the leader. If not enough bytes, wait up to=20
      replica.fetch.wait.max.ms for this many bytes to arrive.</TD></TR>
  <TR>
    <TD>num.replica.fetchers</TD>
    <TD>1</TD>
    <TD>
      <P>Number of threads used to replicate messages from leaders. =
Increasing=20
      this value can increase the degree of I/O parallelism in the =
follower=20
      broker.</P></TD></TR>
  <TR>
    <TD>replica.high.watermark.checkpoint.interval.ms</TD>
    <TD>5000</TD>
    <TD>The frequency with which each replica saves its high watermark =
to disk=20
      to handle recovery.</TD></TR>
  <TR>
    <TD>fetch.purgatory.purge.interval.requests</TD>
    <TD>10000</TD>
    <TD>The purge interval (in number of requests) of the fetch request=20
      purgatory.</TD></TR>
  <TR>
    <TD>producer.purgatory.purge.interval.requests</TD>
    <TD>10000</TD>
    <TD>The purge interval (in number of requests) of the producer =
request=20
      purgatory.</TD></TR>
  <TR>
    <TD>zookeeper.session.timeout.ms</TD>
    <TD>6000</TD>
    <TD>ZooKeeper session timeout. If the server fails to heartbeat to=20
      ZooKeeper within this period of time it is considered dead. If you =
set=20
      this too low the server may be falsely considered dead; if you set =
it too=20
      high it may take too long to recognize a truly dead =
server.</TD></TR>
  <TR>
    <TD>zookeeper.connection.timeout.ms</TD>
    <TD>6000</TD>
    <TD>The maximum amount of time that the client waits to establish a=20
      connection to zookeeper.</TD></TR>
  <TR>
    <TD>zookeeper.sync.time.ms</TD>
    <TD>2000</TD>
    <TD>How far a ZK follower can be behind a ZK leader.</TD></TR>
  <TR>
    <TD>controlled.shutdown.enable</TD>
    <TD>false</TD>
    <TD>Enable controlled shutdown of the broker. If enabled, the broker =
will=20
      move all leaders on it to some other brokers before shutting =
itself down.=20
      This reduces the unavailability window during shutdown.</TD></TR>
  <TR>
    <TD>controlled.shutdown.max.retries</TD>
    <TD>3</TD>
    <TD>Number of retries to complete the controlled shutdown =
successfully=20
      before executing an unclean shutdown.</TD></TR>
  <TR>
    <TD>controlled.shutdown.retry.backoff.ms</TD>
    <TD>5000</TD>
    <TD>Backoff time between shutdown retries.</TD></TR>
  <TR>
    <TD>auto.leader.rebalance.enable</TD>
    <TD>false</TD>
    <TD>If this is enabled the controller will automatically try to =
balance=20
      leadership for partitions among the brokers by periodically =
returning=20
      leadership to the "preferred" replica for each partition if it is=20
      available.</TD></TR>
  <TR>
    <TD>leader.imbalance.per.broker.percentage</TD>
    <TD>10</TD>
    <TD>The percentage of leader imbalance allowed per broker. The =
controller=20
      will rebalance leadership if this ratio goes above       the =
configured=20
      value per broker.</TD></TR>
  <TR>
    <TD>leader.imbalance.check.interval.seconds</TD>
    <TD>300</TD>
    <TD>The frequency with which to check for leader =
imbalance.</TD></TR>
  <TR>
    <TD>offset.metadata.max.bytes</TD>
    <TD>1024</TD>
    <TD>The maximum amount of metadata to allow clients to save with =
their=20
      offsets.</TD></TR></TBODY></TABLE>
<P>More details about broker configuration can be found in the scala =
class=20
<CODE>kafka.server.KafkaConfig</CODE>.</P>
<H4><A id=3D"topic-config">Topic-level configuration</A></H4>    =
Configurations=20
pertinent to topics have both a global default as well an optional =
per-topic=20
override. If no per-topic configuration is given the global default is =
used. The=20
override can be set at topic creation time by giving one or more=20
<CODE>--config</CODE> options. This example creates a topic named=20
<I>my-topic</I> with a custom max message size and flush rate:=20
<PRE><B> &gt; bin/kafka-topics.sh --zookeeper localhost:2181 --create =
--topic my-topic --partitions 1 =0A=
        --replication-factor 1 --config max.message.bytes=3D64000 =
--config flush.messages=3D1</B>=0A=
</PRE>
Overrides can also be changed or set later using the alter topic =
command. This=20
example updates the max message size for <I>my-topic</I>:=20
<PRE><B> &gt; bin/kafka-topics.sh --zookeeper localhost:2181 --alter =
--topic my-topic =0A=
    --config max.message.bytes=3D128000</B>=0A=
</PRE>
To remove an override you can do=20
<PRE><B> &gt; bin/kafka-topics.sh --zookeeper localhost:2181 --alter =
--topic my-topic =0A=
    --deleteConfig max.message.bytes</B>=0A=
</PRE>=20
   The following are the topic-level configurations. The server's =
default=20
configuration for this property is given under the Server Default =
Property=20
heading, setting this default in the server config allows you to change =
the=20
default given to topics that have no override specified.=20
<TABLE class=3D"data-table">
  <TBODY>
  <TR>
    <TH>Property</TH>
    <TH>Default</TH>
    <TH>Server Default Property</TH>
    <TH>Description</TH></TR>
  <TR>
    <TD>cleanup.policy</TD>
    <TD>delete</TD>
    <TD>log.cleanup.policy</TD>
    <TD>A string that is either "delete" or "compact". This string =
designates=20
      the retention policy to use on old log segments. The default =
policy=20
      ("delete") will discard old segments when their retention time or =
size=20
      limit has been reached. The "compact" setting will enable <A =
href=3D"https://kafka.apache.org/documentation.html#compaction">log=20
      compaction</A> on the topic.</TD></TR>
  <TR>
    <TD>delete.retention.ms</TD>
    <TD>86400000 (24 hours)</TD>
    <TD>log.cleaner.delete.retention.ms</TD>
    <TD>The amount of time to retain delete tombstone markers for <A =
href=3D"https://kafka.apache.org/documentation.html#compaction">log=20
      compacted</A> topics. This setting also gives a bound on the time =
in which=20
      a consumer must complete a read if they begin from offset 0 to =
ensure that=20
      they get a valid snapshot of the final stage (otherwise delete =
tombstones=20
      may be collected before they complete their scan).</TD></TR>
  <TR>
    <TD>flush.messages</TD>
    <TD>None</TD>
    <TD>log.flush.interval.messages</TD>
    <TD>This setting allows specifying an interval at which we will =
force an=20
      fsync of data written to the log. For example if this was set to 1 =
we=20
      would fsync after every message; if it were 5 we would fsync after =
every=20
      five messages. In general we recommend you not set this and use=20
      replication for durability and allow the operating system's =
background=20
      flush capabilities as it is more efficient. This setting can be =
overridden=20
      on a per-topic basis (see <A =
href=3D"https://kafka.apache.org/documentation.html#topic-config">the=20
      per-topic configuration section</A>).</TD></TR>
  <TR>
    <TD>flush.ms</TD>
    <TD>None</TD>
    <TD>log.flush.interval.ms</TD>
    <TD>This setting allows specifying a time interval at which we will =
force=20
      an fsync of data written to the log. For example if this was set =
to 1000=20
      we would fsync after 1000 ms had passed. In general we recommend =
you not=20
      set this and use replication for durability and allow the =
operating=20
      system's background flush capabilities as it is more =
efficient.</TD></TR>
  <TR>
    <TD>index.interval.bytes</TD>
    <TD>4096</TD>
    <TD>log.index.interval.bytes</TD>
    <TD>This setting controls how frequently Kafka adds an index entry =
to it's=20
      offset index. The default setting ensures that we index a message =
roughly=20
      every 4096 bytes. More indexing allows reads to jump closer to the =
exact=20
      position in the log but makes the index larger. You probably don't =
need to=20
      change this.</TD></TR>
  <TR>
    <TD>max.message.bytes</TD>
    <TD>1,000,000</TD>
    <TD>message.max.bytes</TD>
    <TD>This is largest message size Kafka will allow to be appended to =
this=20
      topic. Note that if you increase this size you must also increase =
your=20
      consumer's fetch size so they can fetch messages this =
large.</TD></TR>
  <TR>
    <TD>min.cleanable.dirty.ratio</TD>
    <TD>0.5</TD>
    <TD>log.cleaner.min.cleanable.ratio</TD>
    <TD>This configuration controls how frequently the log compactor =
will=20
      attempt to clean the log (assuming <A =
href=3D"https://kafka.apache.org/documentation.html#compaction">log=20
      compaction</A> is enabled). By default we will avoid cleaning a =
log where=20
      more than 50% of the log has been compacted. This ratio bounds the =
maximum=20
      space wasted in the log by duplicates (at 50% at most 50% of the =
log could=20
      be duplicates). A higher ratio will mean fewer, more efficient =
cleanings=20
      but will mean more wasted space in the log.</TD></TR>
  <TR>
    <TD>retention.bytes</TD>
    <TD>None</TD>
    <TD>log.retention.bytes</TD>
    <TD>This configuration controls the maximum size a log can grow to =
before=20
      we will discard old log segments to free up space if we are using =
the=20
      "delete" retention policy. By default there is no size limit only =
a time=20
      limit.</TD></TR>
  <TR>
    <TD>retention.ms</TD>
    <TD>7 days</TD>
    <TD>log.retention.minutes</TD>
    <TD>This configuration controls the maximum time we will retain a =
log=20
      before we will discard old log segments to free up space if we are =
using=20
      the "delete" retention policy. This represents an SLA on how soon=20
      consumers must read their data.</TD></TR>
  <TR>
    <TD>segment.bytes</TD>
    <TD>1 GB</TD>
    <TD>log.segment.bytes</TD>
    <TD>This configuration controls the segment file size for the log.=20
      Retention and cleaning is always done a file at a time so a larger =
segment=20
      size means fewer files but less granular control over =
retention.</TD></TR>
  <TR>
    <TD>segment.index.bytes</TD>
    <TD>10 MB</TD>
    <TD>log.index.size.max.bytes</TD>
    <TD>This configuration controls the size of the index that maps =
offsets to=20
      file positions. We preallocate this index file and shrink it only =
after=20
      log rolls. You generally should not need to change this =
setting.</TD></TR>
  <TR>
    <TD>segment.ms</TD>
    <TD>7 days</TD>
    <TD>log.roll.hours</TD>
    <TD>This configuration controls the period of time after which Kafka =
will=20
      force the log to roll even if the segment file isn't full to =
ensure that=20
      retention can delete or compact old =
data.</TD></TR></TBODY></TABLE>
<H3><A id=3D"consumerconfigs">3.2 Consumer Configs</A></H3>The essential =
consumer=20
configurations are the following:=20
<UL>
  <LI><CODE>group.id</CODE>        =20
  <LI><CODE>zookeeper.connect</CODE> </LI></UL>
<TABLE class=3D"data-table">
  <TBODY>
  <TR>
    <TH>Property</TH>
    <TH>Default</TH>
    <TH>Description</TH></TR>
  <TR>
    <TD>group.id</TD>
    <TD colspan=3D"1"></TD>
    <TD>A string that uniquely identifies the group of consumer =
processes to=20
      which this consumer belongs. By setting the same group id multiple =

      processes indicate that they are all part of the same consumer=20
group.</TD></TR>
  <TR>
    <TD>zookeeper.connect</TD>
    <TD colspan=3D"1"></TD>
    <TD>Specifies the ZooKeeper connection string in the form=20
      <CODE>hostname:port</CODE> where host and port are the host and =
port of a=20
      ZooKeeper server. To allow connecting through other ZooKeeper =
nodes when=20
      that ZooKeeper machine is down you can also specify multiple hosts =
in the=20
      form <CODE>hostname1:port1,hostname2:port2,hostname3:port3</CODE>. =
       =20
      <P>    The server may also have a ZooKeeper chroot path as part of =
it's=20
      ZooKeeper connection string which puts its data under some path in =
the=20
      global ZooKeeper namespace. If so the consumer should use the same =
chroot=20
      path in its connection string. For example to give a chroot path =
of=20
      <CODE>/chroot/path</CODE> you would give the connection string as  =

      =
<CODE>hostname1:port1,hostname2:port2,hostname3:port3/chroot/path</CODE>.=
</P></TD></TR>
  <TR>
    <TD>consumer.id</TD>
    <TD colspan=3D"1">null</TD>
    <TD>
      <P>Generated automatically if not set.</P></TD></TR>
  <TR>
    <TD>socket.timeout.ms</TD>
    <TD colspan=3D"1">30 * 1000</TD>
    <TD>The socket timeout for network requests. The actual timeout set =
will=20
      be max.fetch.wait + socket.timeout.ms.</TD></TR>
  <TR>
    <TD>socket.receive.buffer.bytes</TD>
    <TD colspan=3D"1">64 * 1024</TD>
    <TD>The socket receive buffer for network requests</TD></TR>
  <TR>
    <TD>fetch.message.max.bytes</TD>
    <TD nowrap=3D"">1024 * 1024</TD>
    <TD>The number of byes of messages to attempt to fetch for each=20
      topic-partition in each fetch request. These bytes will be read =
into=20
      memory for each partition, so this helps control the memory used =
by the=20
      consumer. The fetch request size must be at least as large as the =
maximum=20
      message size the server allows or else it is possible for the =
producer to=20
      send messages larger than the consumer can fetch.</TD></TR>
  <TR>
    <TD>auto.commit.enable</TD>
    <TD colspan=3D"1">true</TD>
    <TD>If true, periodically commit to ZooKeeper the offset of messages =

      already fetched by the consumer. This committed offset will be =
used when=20
      the process fails as the position from which the new consumer will =

    begin.</TD></TR>
  <TR>
    <TD>auto.commit.interval.ms</TD>
    <TD colspan=3D"1">60 * 1000</TD>
    <TD>The frequency in ms that the consumer offsets are committed to=20
      zookeeper.</TD></TR>
  <TR>
    <TD>queued.max.message.chunks</TD>
    <TD colspan=3D"1">10</TD>
    <TD>Max number of message chunks buffered for consumption. Each =
chunk can=20
      be up to fetch.message.max.bytes.</TD></TR>
  <TR>
    <TD>rebalance.max.retries</TD>
    <TD colspan=3D"1">4</TD>
    <TD>When a new consumer joins a consumer group the set of consumers=20
      attempt to "rebalance" the load to assign partitions to each =
consumer. If=20
      the set of consumers changes while this assignment is taking place =
the=20
      rebalance will fail and retry. This setting controls the maximum =
number of=20
      attempts before giving up.</TD></TR>
  <TR>
    <TD>fetch.min.bytes</TD>
    <TD colspan=3D"1">1</TD>
    <TD>The minimum amount of data the server should return for a fetch=20
      request. If insufficient data is available the request will wait =
for that=20
      much data to accumulate before answering the request.</TD></TR>
  <TR>
    <TD>fetch.wait.max.ms</TD>
    <TD colspan=3D"1">100</TD>
    <TD>The maximum amount of time the server will block before =
answering the=20
      fetch request if there isn't sufficient data to immediately =
satisfy=20
      fetch.min.bytes</TD></TR>
  <TR>
    <TD>rebalance.backoff.ms</TD>
    <TD>2000</TD>
    <TD>Backoff time between retries during rebalance.</TD></TR>
  <TR>
    <TD>refresh.leader.backoff.ms</TD>
    <TD colspan=3D"1">200</TD>
    <TD>Backoff time to wait before trying to determine the leader of a=20
      partition that has just lost its leader.</TD></TR>
  <TR>
    <TD>auto.offset.reset</TD>
    <TD colspan=3D"1">largest</TD>
    <TD>
      <P>What to do when there is no initial offset in ZooKeeper or if =
an offset=20
      is out of range:<BR>* smallest : automatically reset the offset to =
the=20
      smallest offset<BR>* largest : automatically reset the offset to =
the=20
      largest offset<BR>* anything else: throw exception to the=20
  consumer</P></TD></TR>
  <TR>
    <TD>consumer.timeout.ms</TD>
    <TD colspan=3D"1">-1</TD>
    <TD>Throw a timeout exception to the consumer if no message is =
available=20
      for consumption after the specified interval</TD></TR>
  <TR>
    <TD>client.id</TD>
    <TD colspan=3D"1">group id value</TD>
    <TD>The client id is a user-specified string sent in each request to =
help=20
      trace calls. It should logically identify the application making =
the=20
      request.</TD></TR>
  <TR>
    <TD>zookeeper.session.timeout.ms&nbsp;</TD>
    <TD colspan=3D"1">6000</TD>
    <TD>ZooKeeper session timeout. If the consumer fails to heartbeat to =

      ZooKeeper for this period of time it is considered dead and a =
rebalance=20
      will occur.</TD></TR>
  <TR>
    <TD>zookeeper.connection.timeout.ms</TD>
    <TD colspan=3D"1">6000</TD>
    <TD>The max time that the client waits while establishing a =
connection to=20
      zookeeper.</TD></TR>
  <TR>
    <TD>zookeeper.sync.time.ms&nbsp;</TD>
    <TD colspan=3D"1">2000</TD>
    <TD>How far a ZK follower can be behind a ZK =
leader</TD></TR></TBODY></TABLE>
<P>More details about consumer configuration can be found in the scala =
class=20
<CODE>kafka.consumer.ConsumerConfig</CODE>.</P>
<H3><A id=3D"producerconfigs">3.3 Producer Configs</A></H3>Essential =
configuration=20
properties for the producer include:=20
<UL>
  <LI><CODE>metadata.broker.list</CODE>        =20
  <LI><CODE>request.required.acks</CODE>        =20
  <LI><CODE>producer.type</CODE>        =20
  <LI><CODE>serializer.class</CODE> </LI></UL>
<TABLE class=3D"data-table">
  <TBODY>
  <TR>
    <TH>Property</TH>
    <TH>Default</TH>
    <TH>Description</TH></TR>
  <TR>
    <TD>metadata.broker.list</TD>
    <TD colspan=3D"1"></TD>
    <TD>
      <P>This is for bootstrapping and the producer will only use it for =
getting=20
      metadata (topics, partitions and replicas). The socket connections =
for=20
      sending the actual data will be established based on the broker=20
      information returned in the metadata. The format is=20
      host1:port1,host2:port2, and the list can be a subset of brokers =
or a VIP=20
      pointing to a subset of brokers.</P></TD></TR>
  <TR>
    <TD>request.required.acks</TD>
    <TD colspan=3D"1">0</TD>
    <TD>
      <P>This value controls when a produce request is considered =
completed.=20
      Specifically, how many other brokers must have committed the data =
to their=20
      log and acknowledged this to the leader? Typical values are        =
    =20
      <UL>
        <LI>0, which means that the producer never waits for an =
acknowledgement=20
        from the broker (the same behavior as 0.7). This option provides =
the=20
        lowest latency but the weakest durability guarantees (some data =
will be=20
        lost when a server fails).             =20
        <LI> 1, which means that the producer gets an acknowledgement =
after the=20
        leader replica has received the data. This option provides =
better=20
        durability as the client waits until the server acknowledges the =
request=20
        as successful (only messages that were written to the now-dead =
leader=20
        but not yet replicated will be lost).             =20
        <LI> -1, which means that the producer gets an acknowledgement =
after all=20
        in-sync replicas have received the data. This option provides =
the best=20
        durability, we guarantee that no messages will be lost as long =
as at=20
        least one in sync replica remains.             </LI></UL>
      <P></P></TD></TR>
  <TR>
    <TD>request.timeout.ms</TD>
    <TD colspan=3D"1">10000</TD>
    <TD>The amount of time the broker will wait trying to meet the=20
      request.required.acks requirement before sending back an error to =
the=20
      client.</TD></TR>
  <TR>
    <TD>producer.type</TD>
    <TD colspan=3D"1">sync</TD>
    <TD>
      <P>This parameter specifies whether the messages are sent =
asynchronously=20
      in a background thread. Valid values are (1) async for =
asynchronous send=20
      and (2) sync for synchronous send. By setting the producer to =
async we=20
      allow batching together of requests (which is great for =
throughput) but=20
      open the possibility of a failure of the client machine dropping =
unsent=20
      data.</P></TD>
  <TR>
    <TD>serializer.class</TD>
    <TD colspan=3D"1">kafka.serializer.DefaultEncoder</TD>
    <TD>The serializer class for messages. The default encoder takes a =
byte[]=20
      and returns the same byte[].</TD></TR>
  <TR>
    <TD>key.serializer.class</TD>
    <TD colspan=3D"1"></TD>
    <TD>The serializer class for keys (defaults to the same as for =
messages if=20
      nothing is given).</TD></TR>
  <TR>
    <TD>partitioner.class</TD>
    <TD colspan=3D"1">kafka.producer.DefaultPartitioner</TD>
    <TD>The partitioner class for partitioning messages amongst =
sub-topics.=20
      The default partitioner is based on the hash of the key.</TD></TR>
  <TR>
    <TD>compression.codec</TD>
    <TD colspan=3D"1">none</TD>
    <TD>
      <P>This parameter allows you to specify the compression codec for =
all data=20
      generated by this producer. Valid values are "none", "gzip" and=20
      "snappy".</P></TD></TR>
  <TR>
    <TD>compressed.topics</TD>
    <TD colspan=3D"1">null</TD>
    <TD>
      <P>This parameter allows you to set whether compression should be =
turned=20
      on for particular topics. If the compression codec is anything =
other than=20
      NoCompressionCodec, enable compression only for specified topics =
if any.=20
      If the list of compressed topics is empty, then enable the =
specified=20
      compression codec for all topics. If the compression codec is=20
      NoCompressionCodec, compression is disabled for all =
topics</P></TD></TR>
  <TR>
    <TD>message.send.max.retries</TD>
    <TD colspan=3D"1">3</TD>
    <TD>
      <P>This property will cause the producer to automatically retry a =
failed=20
      send request. This property specifies the number of retries when =
such=20
      failures occur. Note that setting a non-zero value here can lead =
to=20
      duplicates in the case of network errors that cause a message to =
be sent=20
      but the acknowledgement to be lost.</P></TD></TR>
  <TR>
    <TD>retry.backoff.ms</TD>
    <TD colspan=3D"1">100</TD>
    <TD>
      <P>Before each retry, the producer refreshes the metadata of =
relevant=20
      topics to see if a new leader has been elected. Since leader =
election=20
      takes a bit of time, this property specifies the amount of time =
that the=20
      producer waits before refreshing the metadata.</P></TD></TR>
  <TR>
    <TD>topic.metadata.refresh.interval.ms</TD>
    <TD colspan=3D"1">600 * 1000</TD>
    <TD>
      <P>The producer generally refreshes the topic metadata from =
brokers when=20
      there is a failure (partition missing, leader not available...). =
It will=20
      also poll regularly (default: every 10min so 600000ms). If you set =
this to=20
      a negative value, metadata will only get refreshed on failure. If =
you set=20
      this to zero, the metadata will get refreshed after each message =
sent (not=20
      recommended). Important note: the refresh happen only AFTER the =
message is=20
      sent, so if the producer never sends a message the metadata is =
never=20
      refreshed</P></TD></TR>
  <TR>
    <TD>queue.buffering.max.ms</TD>
    <TD colspan=3D"1">5000</TD>
    <TD>Maximum time to buffer data when using async mode. For example a =

      setting of 100 will try to batch together 100ms of messages to =
send at=20
      once. This will improve throughput but adds message delivery =
latency due=20
      to the buffering.</TD></TR>
  <TR>
    <TD>queue.buffering.max.messages</TD>
    <TD colspan=3D"1">10000</TD>
    <TD>The maximum number of unsent messages that can be queued up the=20
      producer when using async mode before either the producer must be =
blocked=20
      or data must be dropped.</TD></TR>
  <TR>
    <TD>queue.enqueue.timeout.ms</TD>
    <TD colspan=3D"1">-1</TD>
    <TD>
      <P>The amount of time to block before dropping messages when =
running in=20
      async mode and the buffer has reached =
queue.buffering.max.messages. If set=20
      to 0 events will be enqueued immediately or dropped if the queue =
is full=20
      (the producer send call will never block). If set to -1 the =
producer will=20
      block indefinitely and never willingly drop a send.</P></TD></TR>
  <TR>
    <TD>batch.num.messages</TD>
    <TD colspan=3D"1">200</TD>
    <TD>The number of messages to send in one batch when using async =
mode. The=20
      producer will wait until either this number of messages are ready =
to send=20
      or queue.buffer.max.ms is reached.</TD></TR>
  <TR>
    <TD>send.buffer.bytes</TD>
    <TD colspan=3D"1">100 * 1024</TD>
    <TD>Socket write buffer size</TD></TR>
  <TR>
    <TD>client.id</TD>
    <TD colspan=3D"1">""</TD>
    <TD>The client id is a user-specified string sent in each request to =
help=20
      trace calls. It should logically identify the application making =
the=20
      request.</TD></TR></TBODY></TABLE>
<P>More details about producer configuration can be found in the scala =
class=20
<CODE>kafka.producer.ProducerConfig</CODE>.</P>
<H3><A id=3D"newproducerconfigs">3.4 New Producer Configs</A></H3>We are =
working=20
on a replacement for our existing producer. The code is available in =
trunk now=20
and can be considered beta quality. Below is the configuration for the =
new=20
producer.=20
<TABLE class=3D"data-table">
  <TBODY>
  <TR>
    <TH>Name</TH>
    <TH>Type</TH>
    <TH>Default</TH>
    <TH>Importance</TH>
    <TH>Description</TH></TR>
  <TR>
    <TD>bootstrap.servers</TD>
    <TD>list</TD>
    <TD></TD>
    <TD>high</TD>
    <TD>A list of host/port pairs to use for establishing the initial=20
      connection to the Kafka cluster. Data will be load balanced over =
all=20
      servers irrespective of which servers are specified here for=20
      bootstrapping=E2=80=94this list only impacts the initial hosts =
used to discover=20
      the full set of servers. This list should be in the form=20
      <CODE>host1:port1,host2:port2,...</CODE>. Since these servers are =
just=20
      used for the initial connection to discover the full cluster =
membership=20
      (which may change dynamically), this list need not contain the =
full set of=20
      servers (you may want more than one, though, in case a server is =
down). If=20
      no server in this list is available sending data will fail until =
on=20
      becomes available.</TD></TR>
  <TR>
    <TD>acks</TD>
    <TD>string</TD>
    <TD>1</TD>
    <TD>high</TD>
    <TD>The number of acknowledgments the producer requires the leader =
to have=20
      received before considering a request complete. This controls the  =

      durability of records that are sent. The following settings are =
common: =20
      <UL>
        <LI><CODE>acks=3D0</CODE> If set to zero then the producer will =
not wait=20
        for any acknowledgment from the server at all. The record will =
be=20
        immediately added to the socket buffer and considered sent. No =
guarantee=20
        can be made that the server has received the record in this =
case, and=20
        the <CODE>retries</CODE> configuration will not take effect (as =
the=20
        client won't generally know of any failures). The offset given =
back for=20
        each record will always be set to -1.=20
        <LI><CODE>acks=3D1</CODE> This will mean the leader will write =
the record=20
        to its local log but will respond without awaiting full =
acknowledgement=20
        from all followers. In this case should the leader fail =
immediately=20
        after acknowledging the record but before the followers have =
replicated=20
        it then the record will be lost.=20
        <LI><CODE>acks=3Dall</CODE> This means the leader will wait for =
the full=20
        set of in-sync replicas to acknowledge the record. This =
guarantees that=20
        the record will not be lost as long as at least one in-sync =
replica=20
        remains alive. This is the strongest available guarantee.=20
        <LI>Other settings such as <CODE>acks=3D2</CODE> are also =
possible, and=20
        will require the given number of acknowledgements but this is =
generally=20
        less useful.</LI></UL></TD></TR>
  <TR>
    <TD>buffer.memory</TD>
    <TD>long</TD>
    <TD>33554432</TD>
    <TD>high</TD>
    <TD>The total bytes of memory the producer can use to buffer records =

      waiting to be sent to the server. If records are sent faster than =
they can=20
      be delivered to the server the producer will either block or throw =
an=20
      exception based on the preference specified by=20
      <CODE>block.on.buffer.full</CODE>.=20
      <P>This setting should correspond roughly to the total memory the =
producer=20
      will use, but is not a hard bound since not all memory the =
producer uses=20
      is used for buffering. Some additional memory will be used for =
compression=20
      (if compression is enabled) as well as for maintaining in-flight=20
      requests.</P></TD></TR>
  <TR>
    <TD>compression.type</TD>
    <TD>string</TD>
    <TD>none</TD>
    <TD>high</TD>
    <TD>The compression type for all data generated by the producer. The =

      default is none (i.e. no compression). Valid  values are=20
      <CODE>none</CODE>, <CODE>gzip</CODE>, or <CODE>snappy</CODE>. =
Compression=20
      is of full batches of data,  so the efficacy of batching will also =
impact=20
      the compression ratio (more batching means better =
compression).</TD></TR>
  <TR>
    <TD>retries</TD>
    <TD>int</TD>
    <TD>0</TD>
    <TD>high</TD>
    <TD>Setting a value greater than zero will cause the client to =
resend any=20
      record whose send fails with a potentially transient error. Note =
that this=20
      retry is no different than if the client resent the record upon =
receiving=20
      the error. Allowing retries will potentially change the ordering =
of=20
      records because if two records are sent to a single partition, and =
the=20
      first fails and is retried but the second succeeds, then the =
second record=20
      may appear first.</TD></TR>
  <TR>
    <TD>batch.size</TD>
    <TD>int</TD>
    <TD>16384</TD>
    <TD>medium</TD>
    <TD>The producer will attempt to batch records together into fewer=20
      requests whenever multiple records are being sent to the same =
partition.=20
      This helps performance on both the client and the server. This=20
      configuration controls the default batch size in bytes.=20
      <P>No attempt will be made to batch records larger than this size. =

      <P>Requests sent to brokers will contain multiple batches, one for =
each=20
      partition with data available to be sent.=20
      <P>A small batch size will make batching less common and may =
reduce=20
      throughput (a batch size of zero will disable batching entirely). =
A very=20
      large batch size may use memory a bit more wastefully as we will =
always=20
      allocate a buffer of the specified batch size in anticipation of=20
      additional records.</P></TD></TR>
  <TR>
    <TD>client.id</TD>
    <TD>string</TD>
    <TD></TD>
    <TD>medium</TD>
    <TD>The id string to pass to the server when making requests. The =
purpose=20
      of this is to be able to track the source of requests beyond just =
ip/port=20
      by allowing a logical application name to be included with the =
request.=20
      The application can set any string it wants as this has no =
functional=20
      purpose other than in logging and metrics.</TD></TR>
  <TR>
    <TD>linger.ms</TD>
    <TD>long</TD>
    <TD>0</TD>
    <TD>medium</TD>
    <TD>The producer groups together any records that arrive in between=20
      request transmissions into a single batched request. Normally this =
occurs=20
      only under load when records arrive faster than they can be sent =
out.=20
      However in some circumstances the client may want to reduce the =
number of=20
      requests even under moderate load. This setting accomplishes this =
by=20
      adding a small amount of artificial delay=E2=80=94that is, rather =
than immediately=20
      sending out a record the producer will wait for up to the given =
delay to=20
      allow other records to be sent so that the sends can be batched =
together.=20
      This can be thought of as analogous to Nagle's algorithm in TCP. =
This=20
      setting gives the upper bound on the delay for batching: once we =
get=20
      <CODE>batch.size</CODE> worth of records for a partition it will =
be sent=20
      immediately regardless of this setting, however if we have fewer =
than this=20
      many bytes accumulated for this partition we will 'linger' for the =

      specified time waiting for more records to show up. This setting =
defaults=20
      to 0 (i.e. no delay). Setting <CODE>linger.ms=3D5</CODE>, for =
example, would=20
      have the effect of reducing the number of requests sent but would =
add up=20
      to 5ms of latency to records sent in the absense of =
load.</TD></TR>
  <TR>
    <TD>max.request.size</TD>
    <TD>int</TD>
    <TD>1048576</TD>
    <TD>medium</TD>
    <TD>The maximum size of a request. This is also effectively a cap on =
the=20
      maximum record size. Note that the server has its own cap on =
record size=20
      which may be different from this. This setting will limit the =
number of=20
      record batches the producer will send in a single request to avoid =
sending=20
      huge requests.</TD></TR>
  <TR>
    <TD>receive.buffer.bytes</TD>
    <TD>int</TD>
    <TD>32768</TD>
    <TD>medium</TD>
    <TD>The size of the TCP receive buffer to use when reading =
data</TD></TR>
  <TR>
    <TD>send.buffer.bytes</TD>
    <TD>int</TD>
    <TD>131072</TD>
    <TD>medium</TD>
    <TD>The size of the TCP send buffer to use when sending =
data</TD></TR>
  <TR>
    <TD>timeout.ms</TD>
    <TD>int</TD>
    <TD>30000</TD>
    <TD>medium</TD>
    <TD>The configuration controls the maximum amount of time the server =
will=20
      wait for acknowledgments from followers to meet the acknowledgment =

      requirements the producer has specified with the <CODE>acks</CODE> =

      configuration. If the requested number of acknowledgments are not =
met when=20
      the timeout elapses an error will be returned. This timeout is =
measured on=20
      the server side and does not include the network latency of the=20
  request.</TD></TR>
  <TR>
    <TD>block.on.buffer.full</TD>
    <TD>boolean</TD>
    <TD>true</TD>
    <TD>low</TD>
    <TD>When our memory buffer is exhausted we must either stop =
accepting new=20
      records (block) or throw errors. By default this setting is true =
and we=20
      block, however in some scenarios blocking is not desirable and it =
is=20
      better to immediately give an error. Setting this to =
<CODE>false</CODE>=20
      will accomplish that: the producer will throw a =
BufferExhaustedException=20
      if a recrord is sent and the buffer space is full.</TD></TR>
  <TR>
    <TD>metadata.fetch.timeout.ms</TD>
    <TD>long</TD>
    <TD>60000</TD>
    <TD>low</TD>
    <TD>The first time data is sent to a topic we must fetch metadata =
about=20
      that topic to know which servers host the topic's partitions. This =

      configuration controls the maximum amount of time we will block =
waiting=20
      for the metadata fetch to succeed before throwing an exception =
back to the=20
      client.</TD></TR>
  <TR>
    <TD>metadata.max.age.ms</TD>
    <TD>long</TD>
    <TD>300000</TD>
    <TD>low</TD>
    <TD>The period of time in milliseconds after which we force a =
refresh of=20
      metadata even if we haven't seen any  partition leadership changes =
to=20
      proactively discover any new brokers or partitions.</TD></TR>
  <TR>
    <TD>metric.reporters</TD>
    <TD>list</TD>
    <TD>[]</TD>
    <TD>low</TD>
    <TD>A list of classes to use as metrics reporters. Implementing the=20
      <CODE>MetricReporter</CODE> interface allows plugging in classes =
that will=20
      be notified of new metric creation. The JmxReporter is always =
included to=20
      register JMX statistics.</TD></TR>
  <TR>
    <TD>metrics.num.samples</TD>
    <TD>int</TD>
    <TD>2</TD>
    <TD>low</TD>
    <TD>The number of samples maintained to compute metrics.</TD></TR>
  <TR>
    <TD>metrics.sample.window.ms</TD>
    <TD>long</TD>
    <TD>30000</TD>
    <TD>low</TD>
    <TD>The metrics system maintains a configurable number of samples =
over a=20
      fixed window size. This configuration controls the size of the =
window. For=20
      example we might maintain two samples each measured over a 30 =
second=20
      period. When a window expires we erase and overwrite the oldest=20
  window.</TD></TR>
  <TR>
    <TD>reconnect.backoff.ms</TD>
    <TD>long</TD>
    <TD>10</TD>
    <TD>low</TD>
    <TD>The amount of time to wait before attempting to reconnect to a =
given=20
      host when a connection fails. This avoids a scenario where the =
client=20
      repeatedly attempts to connect to a host in a tight =
loop.</TD></TR>
  <TR>
    <TD>retry.backoff.ms</TD>
    <TD>long</TD>
    <TD>100</TD>
    <TD>low</TD>
    <TD>The amount of time to wait before attempting to retry a failed =
produce=20
      request to a given topic partition. This avoids repeated=20
      sending-and-failing in a tight loop.</TD></TR></TBODY></TABLE>
<H2><A id=3D"design">4. Design</A></H2>
<H3><A id=3D"majordesignelements">4.1 Motivation</A></H3>
<P>We designed Kafka to be able to act as a unified platform for =
handling all=20
the real-time data feeds <A =
href=3D"https://kafka.apache.org/documentation.html#introduction">a=20
large company might have</A>. To do this we had to think through a =
fairly broad=20
set of use cases.=20
<P>It would have to have high-throughput to support high volume event =
streams=20
such as real-time log aggregation.=20
<P>It would need to deal gracefully with large data backlogs to be able =
to=20
support periodic data loads from offline systems.=20
<P>It also meant the system would have to handle low-latency delivery to =
handle=20
more traditional messaging use-cases.=20
<P>We wanted to support partitioned, distributed, real-time processing =
of these=20
feeds to create new, derived feeds. This motivated our partitioning and =
consumer=20
model.=20
<P>Finally in cases where the stream is fed into other data systems for =
serving=20
we new the system would have to be able to guarantee fault-tolerance in =
the=20
presence of machine failures.=20
<P>Supporting these uses led use to a design with a number of unique =
elements,=20
more akin to a database log then a traditional messaging system. We will =
outline=20
some elements of the design in the following sections.=20
<H3><A id=3D"persistence">4.2 Persistence</A></H3>
<H4>Don't fear the filesystem!</H4>
<P>Kafka relies heavily on the filesystem for storing and caching =
messages.=20
There is a general perception that "disks are slow" which makes people =
skeptical=20
that a persistent structure can offer competitive performance. In fact =
disks are=20
both much slower and much faster than people expect depending on how =
they are=20
used; and a properly designed disk structure can often be as fast as the =

network.=20
<P>The key fact about disk performance is that the throughput of hard =
drives has=20
been diverging from the latency of a disk seek for the last decade. As a =
result=20
the performance of linear writes on a <A =
href=3D"http://en.wikipedia.org/wiki/Non-RAID_drive_architectures">JBOD</=
A>=20
configuration with six 7200rpm SATA RAID-5 array is about 600MB/sec but =
the=20
performance of random writes is only about 100k/sec=E2=80=94a difference =
of over 6000X.=20
These linear reads and writes are the most predictable of all usage =
patterns,=20
and are heavily optimized by the operating system. A modern operating =
system=20
provides read-ahead and write-behind techniques that prefetch data in =
large=20
block multiples and group smaller logical writes into large physical =
writes. A=20
further discussion of this issue can be found in this <A =
href=3D"http://queue.acm.org/detail.cfm?id=3D1563874">ACM=20
Queue article</A>; they actually find that <A =
href=3D"http://deliveryimages.acm.org/10.1145/1570000/1563874/jacobs3.jpg=
">sequential=20
disk access can in some cases be faster than random memory access!</A>=20
<P>To compensate for this performance divergence modern operating =
systems have=20
become increasingly aggressive in their use of main memory for disk =
caching. A=20
modern OS will happily divert <I>all</I> free memory to disk caching =
with little=20
performance penalty when the memory is reclaimed. All disk reads and =
writes will=20
go through this unified cache. This feature cannot easily be turned off =
without=20
using direct I/O, so even if a process maintains an in-process cache of =
the=20
data, this data will likely be duplicated in OS pagecache, effectively =
storing=20
everything twice.=20
<P>Furthermore we are building on top of the JVM, and anyone who has =
spent any=20
time with Java memory usage knows two things:=20
<OL>
  <LI>The memory overhead of objects is very high, often doubling the =
size of=20
  the data stored (or worse).</LI>
  <LI>Java garbage collection becomes increasingly fiddly and slow as =
the=20
  in-heap data increases.</LI></OL>
<P>As a result of these factors using the filesystem and relying on =
pagecache is=20
superior to maintaining an in-memory cache or other structure=E2=80=94we =
at least double=20
the available cache by having automatic access to all free memory, and =
likely=20
double again by storing a compact byte structure rather than individual =
objects.=20
Doing so will result in a cache of up to 28-30GB on a 32GB machine =
without GC=20
penalties. Furthermore this cache will stay warm even if the service is=20
restarted, whereas the in-process cache will need to be rebuilt in =
memory (which=20
for a 10GB cache may take 10 minutes) or else it will need to start with =
a=20
completely cold cache (which likely means terrible initial performance). =
This=20
also greatly simplifies the code as all logic for maintaining coherency =
between=20
the cache and filesystem is now in the OS, which tends to do so more =
efficiently=20
and more correctly than one-off in-process attempts. If your disk usage =
favors=20
linear reads then read-ahead is effectively pre-populating this cache =
with=20
useful data on each disk read.=20
<P>This suggests a design which is very simple: rather than maintain as =
much as=20
possible in-memory and flush it all out to the filesystem in a panic =
when we run=20
out of space, we invert that. All data is immediately written to a =
persistent=20
log on the filesystem without necessarily flushing to disk. In effect =
this just=20
means that it is transferred into the kernel's pagecache.=20
<P>This style of pagecache-centric design is described in an <A =
href=3D"http://varnish.projects.linpro.no/wiki/ArchitectNotes">article</A=
>=20
on the design of Varnish here (along with a healthy dose of arrogance).=20
<H4>Constant Time Suffices</H4>
<P>The persistent data structure used in messaging systems are often a=20
per-consumer queue with an associated BTree or other general-purpose =
random=20
access data structures to maintain metadata about messages. BTrees are =
the most=20
versatile data structure available, and make it possible to support a =
wide=20
variety of transactional and non-transactional semantics in the =
messaging=20
system. They do come with a fairly high cost, though: Btree operations =
are O(log=20
N). Normally O(log N) is considered essentially equivalent to constant =
time, but=20
this is not true for disk operations. Disk seeks come at 10 ms a pop, =
and each=20
disk can do only one seek at a time so parallelism is limited. Hence =
even a=20
handful of disk seeks leads to very high overhead. Since storage systems =
mix=20
very fast cached operations with very slow physical disk operations, the =

observed performance of tree structures is often superlinear as data =
increases=20
with fixed cache--i.e. doubling your data makes things much worse then =
twice as=20
slow.=20
<P>Intuitively a persistent queue could be built on simple reads and =
appends to=20
files as is commonly the case with logging solutions. This structure has =
the=20
advantage that all operations are O(1) and reads do not block writes or =
each=20
other. This has obvious performance advantages since the performance is=20
completely decoupled from the data size=E2=80=94one server can now take =
full advantage=20
of a number of cheap, low-rotational speed 1+TB SATA drives. Though they =
have=20
poor seek performance, these drives have acceptable performance for =
large reads=20
and writes and come at 1/3 the price and 3x the capacity.=20
<P>Having access to virtually unlimited disk space without any =
performance=20
penalty means that we can provide some features not usually found in a =
messaging=20
system. For example, in Kafka, instead of attempting to deleting =
messages as=20
soon as they are consumed, we can retain messages for a relative long =
period=20
(say a week). This leads to a great deal of flexibility for consumers, =
as we=20
will describe.=20
<H3><A id=3D"maximizingefficiency">4.3 Efficiency</A></H3>
<P>We have put significant effort into efficiency. One of our primary =
use cases=20
is handling web activity data, which is very high volume: each page view =
may=20
generate dozens of writes. Furthermore we assume each message published =
is read=20
by at least one consumer (often many), hence we strive to make =
consumption as=20
cheap as possible.=20
<P>We have also found, from experience building and running a number of =
similar=20
systems, that efficiency is a key to effective multi-tenant operations. =
If the=20
downstream infrastructure service can easily become a bottleneck due to =
a small=20
bump in usage by the application, such small changes will often create =
problems.=20
By being very fast we help ensure that the application will tip-over =
under load=20
before the infrastructure. This is particularly important when trying to =
run a=20
centralized service that supports dozens or hundreds of applications on =
a=20
centralized cluster as changes in usage patterns are a near-daily =
occurrence.=20
<P>We discussed disk efficiency in the previous section. Once poor disk =
access=20
patterns have been eliminated, there are two common causes of =
inefficiency in=20
this type of system: too many small I/O operations, and excessive byte =
copying.=20
<P>The small I/O problem happens both between the client and the server =
and in=20
the server's own persistent operations.=20
<P>To avoid this, our protocol is built around a "message set" =
abstraction that=20
naturally groups messages together. This allows network requests to =
group=20
messages together and amortize the overhead of the network roundtrip =
rather than=20
sending a single message at a time. The server in turn appends chunks of =

messages to its log in one go, and the consumer fetches large linear =
chunks at a=20
time.=20
<P>This simple optimization produces orders of magnitude speed up. =
Batching=20
leads to larger network packets, larger sequential disk operations, =
contiguous=20
memory blocks, and so on, all of which allows Kafka to turn a bursty =
stream of=20
random message writes into linear writes that flow to the consumers.=20
<P>The other inefficiency is in byte copying. At low message rates this =
is not=20
an issue, but under load the impact is significant. To avoid this we =
employ a=20
standardized binary message format that is shared by the producer, the =
broker,=20
and the consumer (so data chunks can be transferred without modification =
between=20
them). =20
<P>The message log maintained by the broker is itself just a directory =
of files,=20
each populated by a sequence of message sets that have been written to =
disk in=20
the same format used by the producer and consumer. Maintaining this =
common=20
format allows optimization of the most important operation: network =
transfer of=20
persistent log chunks. Modern unix operating systems offer a highly =
optimized=20
code path for transferring data out of pagecache to a socket; in Linux =
this is=20
done with the <A=20
href=3D"http://man7.org/linux/man-pages/man2/sendfile.2.html">sendfile =
system=20
call</A>.=20
<P>To understand the impact of sendfile, it is important to understand =
the=20
common data path for transfer of data from file to socket:=20
<OL>
  <LI>The operating system reads data from the disk into pagecache in =
kernel=20
  space</LI>
  <LI>The application reads the data from kernel space into a user-space =

  buffer</LI>
  <LI>The application writes the data back into kernel space into a =
socket=20
  buffer</LI>
  <LI>The operating system copies the data from the socket buffer to the =
NIC=20
  buffer where it is sent over the network</LI></OL>
<P>This is clearly inefficient, there are four copies and two system =
calls.=20
Using sendfile, this re-copying is avoided by allowing the OS to send =
the data=20
from pagecache to the network directly. So in this optimized path, only =
the=20
final copy to the NIC buffer is needed.=20
<P>We expect a common use case to be multiple consumers on a topic. =
Using the=20
zero-copy optimization above, data is copied into pagecache exactly once =
and=20
reused on each consumption instead of being stored in memory and copied =
out to=20
kernel space every time it is read. This allows messages to be consumed =
at a=20
rate that approaches the limit of the network connection.=20
<P>This combination of pagecache and sendfile means that on a Kafka =
cluster=20
where the consumers are mostly caught up you will see no read activity =
on the=20
disks whatsoever as they will be serving data entirely from cache.=20
<P>For more background on the sendfile and zero-copy support in Java, =
see this=20
<A=20
href=3D"http://www.ibm.com/developerworks/linux/library/j-zerocopy">artic=
le</A>.=20
<H4>End-to-end Batch Compression</H4>
<P>In some cases the bottleneck is actually not CPU or disk but network=20
bandwidth. This is particularly true for a data pipeline that needs to =
send=20
messages between data centers over a wide-area network. Of course the =
user can=20
always compress its messages one at a time without any support needed =
from=20
Kafka, but this can lead to very poor compression ratios as much of the=20
redundancy is due to repetition between messages of the same type (e.g. =
field=20
names in JSON or user agents in web logs or common string values). =
Efficient=20
compression requires compressing multiple messages together rather than=20
compressing each message individually.=20
<P>Kafka supports this by allowing recursive message sets. A batch of =
messages=20
can be clumped together compressed and sent to the server in this form. =
This=20
batch of messages will be written in compressed form and will remain =
compressed=20
in the log and will only be decompressed by the consumer.=20
<P>Kafka supports GZIP and Snappy compression protocols. More details on =

compression can be found <A =
href=3D"https://cwiki.apache.org/confluence/display/KAFKA/Compression">he=
re</A>.=20
<H3><A id=3D"theproducer">4.4 The Producer</A></H3>
<H4>Load balancing</H4>
<P>The producer sends data directly to the broker that is the leader for =
the=20
partition without any intervening routing tier. To help the producer do =
this all=20
Kafka nodes can answer a request for metadata about which servers are =
alive and=20
where the leaders for the partitions of a topic are at any given time to =
allow=20
the producer to appropriate direct its requests.=20
<P>The client controls which partition it publishes messages to. This =
can be=20
done at random, implementing a kind of random load balancing, or it can =
be done=20
by some semantic partitioning function. We expose the interface for =
semantic=20
partitioning by allowing the user to specify a key to partition by and =
using=20
this to hash to a partition (there is also an option to override the =
partition=20
function if need be). For example if the key chosen was a user id then =
all data=20
for a given user would be sent to the same partition. This in turn will =
allow=20
consumers to make locality assumptions about their consumption. This =
style of=20
partitioning is explicitly designed to allow locality-sensitive =
processing in=20
consumers.=20
<H4>Asynchronous send</H4>
<P>Batching is one of the big drivers of efficiency, and to enable =
batching the=20
Kafka producer has an asynchronous mode that accumulates data in memory =
and=20
sends out larger batches in a single request. The batching can be =
configured to=20
accumulate no more than a fixed number of messages and to wait no longer =
than=20
some fixed latency bound (say 100 messages or 5 seconds). This allows =
the=20
accumulation of more bytes to send, and few larger I/O operations on the =

servers. Since this buffering happens in the client it obviously reduces =
the=20
durability as any data buffered in memory and not yet sent will be lost =
in the=20
event of a producer crash.=20
<P>Note that as of Kafka 0.8.1 the async producer does not have a =
callback,=20
which could be used to register handlers to catch send errors.  Adding =
such=20
callback functionality is proposed for Kafka 0.9, see <A =
href=3D"https://cwiki.apache.org/confluence/display/KAFKA/Client+Rewrite#=
ClientRewrite-ProposedProducerAPI">Proposed=20
Producer API</A>.=20
<H3><A id=3D"theconsumer">4.5 The Consumer</A></H3>The Kafka consumer =
works by=20
issuing "fetch" requests to the brokers leading the partitions it wants =
to=20
consume. The consumer specifies its offset in the log with each request =
and=20
receives back a chunk of log beginning from that position. The consumer =
thus has=20
significant control over this position and can rewind it to re-consume =
data if=20
need be.=20
<H4>Push vs. pull</H4>
<P>An initial question we considered is whether consumers should pull =
data from=20
brokers or brokers should push data to the consumer. In this respect =
Kafka=20
follows a more traditional design, shared by most messaging systems, =
where data=20
is pushed to the broker from the producer and pulled from the broker by =
the=20
consumer. Some logging-centric systems, such as <A =
href=3D"http://github.com/facebook/scribe">Scribe</A>=20
and <A href=3D"http://flume.apache.org/">Apache Flume</A> follow a very =
different=20
push based path where  data is pushed downstream. There are pros and =
cons to=20
both approaches. However a push-based system has difficulty dealing with =
diverse=20
consumers as the broker controls the rate at which data is transferred. =
The goal=20
is generally for the consumer to be able to consume at the maximum =
possible=20
rate; unfortunately in a push system this means the consumer tends to be =

overwhelmed when its rate of consumption falls below the rate of =
production (a=20
denial of service attack, in essence). A pull-based system has the nicer =

property that the consumer simply falls behind and catches up when it =
can. This=20
can be mitigated with some kind of backoff protocol by which the =
consumer can=20
indicate it is overwhelmed, but getting the rate of transfer to fully =
utilize=20
(but never over-utilize) the consumer is trickier than it seems. =
Previous=20
attempts at building systems in this fashion led us to go with a more=20
traditional pull model.=20
<P>Another advantage of a pull-based system is that it lends itself to=20
aggressive batching of data sent to the consumer. A push-based system =
must=20
choose to either send a request immediately or accumulate more data and =
then=20
send it later without knowledge of whether the downstream consumer will =
be able=20
to immediately process it. If tuned for low latency this will result in =
sending=20
a single message at a time only for the transfer to end up being =
buffered=20
anyway, which is wasteful. A pull-based design fixes this as the =
consumer always=20
pulls all available messages after its current position in the log (or =
up to=20
some configurable max size). So one gets optimal batching without =
introducing=20
unnecessary latency.=20
<P>The deficiency of a naive pull-based system is that if the broker has =
no data=20
the consumer may end up polling in a tight loop, effectively =
busy-waiting for=20
data to arrive. To avoid this we have parameters in our pull request =
that allow=20
the consumer request to block in a "long poll" waiting until data =
arrives (and=20
optionally waiting until a given number of bytes is available to ensure =
large=20
transfer sizes).=20
<P>You could imagine other possible designs which would be only pull,=20
end-to-end. The producer would locally write to a local log, and brokers =
would=20
pull from that with consumers pulling from them. A similar type of=20
"store-and-forward" producer is often proposed. This is intriguing but =
we felt=20
not very suitable for our target use cases which have thousands of =
producers.=20
Our experience running persistent data systems at scale led us to feel =
that=20
involving thousands of disks in the system across many applications =
would not=20
actually make things more reliable and would be a nightmare to operate. =
And in=20
practice we have found that we can run a pipeline with strong SLAs at =
large=20
scale without a need for producer persistence.=20
<H4>Consumer Position</H4>Keeping track of <I>what</I> has been =
consumed, is,=20
surprisingly, one of the key performance points of a messaging system.=20
<P>Most messaging systems keep metadata about what messages have been =
consumed=20
on the broker. That is, as a message is handed out to a consumer, the =
broker=20
either records that fact locally immediately or it may wait for =
acknowledgement=20
from the consumer. This is a fairly intuitive choice, and indeed for a =
single=20
machine server it is not clear where else this state could go. Since the =
data=20
structure used for storage in many messaging systems scale poorly, this =
is also=20
a pragmatic choice--since the broker knows what is consumed it can =
immediately=20
delete it, keeping the data size small.=20
<P>What is perhaps not obvious, is that getting the broker and consumer =
to come=20
into agreement about what has been consumed is not a trivial problem. If =
the=20
broker records a message as <B>consumed</B> immediately every time it is =
handed=20
out over the network, then if the consumer fails to process the message =
(say=20
because it crashes or the request times out or whatever) that message =
will be=20
lost. To solve this problem, many messaging systems add an =
acknowledgement=20
feature which means that messages are only marked as <B>sent</B> not=20
<B>consumed</B> when they are sent; the broker waits for a specific=20
acknowledgement from the consumer to record the message as =
<B>consumed</B>. This=20
strategy fixes the problem of losing messages, but creates new problems. =
First=20
of all, if the consumer processes the message but fails before it can =
send an=20
acknowledgement then the message will be consumed twice. The second =
problem is=20
around performance, now the broker must keep multiple states about every =
single=20
message (first to lock it so it is not given out a second time, and then =
to mark=20
it as permanently consumed so that it can be removed). Tricky problems =
must be=20
dealt with, like what to do with messages that are sent but never =
acknowledged.=20
<P>Kafka handles this differently. Our topic is divided into a set of =
totally=20
ordered partitions, each of which is consumed by one consumer at any =
given time.=20
This means that the position of consumer in each partition is just a =
single=20
integer, the offset of the next message to consume. This makes the state =
about=20
what has been consumed very small, just one number for each partition. =
This=20
state can be periodically checkpointed. This makes the equivalent of =
message=20
acknowledgements very cheap.=20
<P>There is a side benefit of this decision. A consumer can deliberately =

<I>rewind</I> back to an old offset and re-consume data. This violates =
the=20
common contract of a queue, but turns out to be an essential feature for =
many=20
consumers. For example, if the consumer code has a bug and is discovered =
after=20
some messages are consumed, the consumer can re-consume those messages =
once the=20
bug is fixed.=20
<H4>Offline Data Load</H4>Scalable persistence allows for the =
possibility of=20
consumers that only periodically consume such as batch data loads that=20
periodically bulk-load data into an offline system such as Hadoop or a=20
relational data warehouse.=20
<P>In the case of Hadoop we parallelize the data load by splitting the =
load over=20
individual map tasks, one for each node/topic/partition combination, =
allowing=20
full parallelism in the loading. Hadoop provides the task management, =
and tasks=20
which fail can restart without danger of duplicate data=E2=80=94they =
simply restart from=20
their original position.=20
<H3><A id=3D"semantics">4.6 Message Delivery Semantics</A></H3>
<P>Now that we understand a little about how producers and consumers =
work, let's=20
discuss the semantic guarantees Kafka provides between producer and =
consumer.=20
Clearly there are multiple possible message delivery guarantees that =
could be=20
provided:=20
<UL>
  <LI><I>At most once</I>=E2=80=94Messages may be lost but are never =
redelivered.  =20
</LI>
  <LI><I>At least once</I>=E2=80=94Messages are never lost but may be =
redelivered.  =20
  </LI>
  <LI><I>Exactly once</I>=E2=80=94this is what people actually want, =
each message is=20
  delivered once and only once.   </LI></UL>	It's worth noting that this =
breaks=20
down into two problems: the durability guarantees for publishing a =
message and=20
the guarantees when consuming a message.=20
<P>Many systems claim to provide "exactly once" delivery semantics, but =
it is=20
important to read the fine print, most of these claims are misleading =
(i.e. they=20
don't translate to the case where consumers or producers can fail, or =
cases=20
where there are multiple consumer processes, or cases where data written =
to disk=20
can be lost).=20
<P>Kafka's semantics are straight-forward. When publishing a message we =
have a=20
notion of the message being "committed" to the log. Once a published =
message is=20
committed it will not be lost as long as one broker that replicates the=20
partition to which this message was written remains "alive". The =
definition of=20
alive as well as a description of which types of failures we attempt to =
handle=20
will be described in more detail in the next section. For now let's =
assume a=20
perfect, lossless broker and try to understand the guarantees to the =
producer=20
and consumer. If a producer attempts to publish a message and =
experiences a=20
network error it cannot be sure if this error happened before or after =
the=20
message was committed. This is similar to the semantics of inserting =
into a=20
database table with an autogenerated key.=20
<P>These are not the strongest possible semantics for publishers. =
Although we=20
cannot be sure of what happened in the case of a network error, it is =
possible=20
to allow the producer to generate a sort of "primary key" that makes =
retrying=20
the produce request idempotent. This feature is not trivial for a =
replicated=20
system because of course it must work even (or especially) in the case =
of a=20
server failure. With this feature it would suffice for the producer to =
retry=20
until it receives acknowledgement of a successfully committed message at =
which=20
point we would guarantee the message had been published exactly once. We =
hope to=20
add this in a future Kafka version.=20
<P>Not all use cases require such strong guarantees. For uses which are =
latency=20
sensitive we allow the producer to specify the durability level it =
desires. If=20
the producer specifies that it wants to wait on the message being =
committed this=20
can take on the order of 10 ms. However the producer can also specify =
that it=20
wants to perform the send completely asynchronously or that it wants to =
wait=20
only until the leader (but not necessarily the followers) have the =
message.=20
<P>Now let's describe the semantics from the point-of-view of the =
consumer. All=20
replicas have the exact same log with the same offsets. The consumer =
controls=20
its position in this log. If the consumer never crashed it could just =
store this=20
position in memory, but if the consumer fails and we want this topic =
partition=20
to be taken over by another process the new process will need to choose =
an=20
appropriate position from which to start processing. Let's say the =
consumer=20
reads some messages -- it has several options for processing the =
messages and=20
updating its position.=20
<OL>
  <LI>It can read the messages, then save its position in the log, and =
finally=20
  process the messages. In this case there is a possibility that the =
consumer=20
  process crashes after saving its position but before saving the output =
of its=20
  message processing. In this case the process that took over processing =
would=20
  start at the saved position even though a few messages prior to that =
position=20
  had not been processed. This corresponds to "at-most-once" semantics =
as in the=20
  case of a consumer failure messages may not be processed.  =20
  <LI>It can read the messages, process the messages, and finally save =
its=20
  position. In this case there is a possibility that the consumer =
process=20
  crashes after processing messages but before saving its position. In =
this case=20
  when the new process takes over the first few messages it receives =
will=20
  already have been processed. This corresponds to the "at-least-once" =
semantics=20
  in the case of consumer failure. In many cases messages have a primary =
key and=20
  so the updates are idempotent (receiving the same message twice just=20
  overwrites a record with another copy of itself).  =20
  <LI>So what about exactly once semantics (i.e. the thing you actually =
want)?=20
  The limitation here is not actually a feature of the messaging system =
but=20
  rather the need to co-ordinate the consumer's position with what is =
actually=20
  stored as output. The classic way of achieving this would be to =
introduce a=20
  two-phase commit between the storage for the consumer position and the =
storage=20
  of the consumers output. But this can be handled more simply and =
generally by=20
  simply letting the consumer store its offset in the same place as its =
output.=20
  This is better because many of the output systems a consumer might =
want to=20
  write to will not support a two-phase commit. As an example of this, =
our=20
  Hadoop ETL that populates data in HDFS stores its offsets in HDFS with =
the=20
  data it reads so that it is guaranteed that either data and offsets =
are both=20
  updated or neither is. We follow similar patterns for many other data =
systems=20
  which require these stronger semantics and for which the messages do =
not have=20
  a primary key to allow for deduplication. </LI></OL>
<P>So effectively Kafka guarantees at-least-once delivery by default and =
allows=20
the user to implement at most once delivery by disabling retries on the =
producer=20
and committing its offset prior to processing a batch of messages. =
Exactly-once=20
delivery requires co-operation with the destination storage system but =
Kafka=20
provides the offset which makes implementing this straight-forward.=20
<H3><A id=3D"replication">4.7 Replication</A></H3>
<P>Kafka replicates the log for each topic's partitions across a =
configurable=20
number of servers (you can set this replication factor on a =
topic-by-topic=20
basis). This allows automatic failover to these replicas when a server =
in the=20
cluster fails so messages remain available in the presence of failures.=20
<P>Other messaging systems provide some replication-related features, =
but, in=20
our (totally biased) opinion, this appears to be a tacked-on thing, not =
heavily=20
used, and with large downsides: slaves are inactive, throughput is =
heavily=20
impacted, it requires fiddly manual configuration, etc. Kafka is meant =
to be=20
used with replication by default=E2=80=94in fact we implement =
un-replicated topics as=20
replicated topics where the replication factor is one.=20
<P>The unit of replication is the topic partition. Under non-failure =
conditions,=20
each partition in Kafka has a single leader and zero or more followers. =
The=20
total number of replicas including the leader constitute the replication =
factor.=20
All reads and writes go to the leader of the partition. Typically, there =
are=20
many more partitions than brokers and the leaders are evenly distributed =
among=20
brokers. The logs on the followers are identical to the leader's =
log=E2=80=94all have=20
the same offsets and messages in the same order (though, of course, at =
any given=20
time the leader may have a few as-yet unreplicated messages at the end =
of its=20
log).=20
<P>Followers consume messages from the leader just as a normal Kafka =
consumer=20
would and apply them to their own log. Having the followers pull from =
the leader=20
has the nice property of allowing the follower to naturally batch =
together log=20
entries they are applying to their log.=20
<P>As with most distributed systems automatically handling failures =
requires=20
having a precise definition of what it means for a node to be "alive". =
For Kafka=20
node liveness has two conditions=20
<OL>
  <LI>A node must be able to maintain its session with ZooKeeper (via=20
  ZooKeeper's heartbeat mechanism)    =20
  <LI>If it is a slave it must replicate the writes happening on the =
leader and=20
  not fall "too far" behind </LI></OL>We refer to nodes satisfying these =
two=20
conditions as being "in sync" to avoid the vagueness of "alive" or =
"failed". The=20
leader keeps track of the set of "in sync" nodes. If a follower dies, =
gets=20
stuck, or falls behind, the leader will remove it from the list of in =
sync=20
replicas. The definition of, how far behind is too far, is controlled by =
the=20
replica.lag.max.messages configuration and the definition of a stuck =
replica is=20
controlled by the replica.lag.time.max.ms configuration.=20
<P>In distributed systems terminology we only attempt to handle a =
"fail/recover"=20
model of failures where nodes suddenly cease working and then later =
recover=20
(perhaps without knowing that they have died). Kafka does not handle =
so-called=20
"Byzantine" failures in which nodes produce arbitrary or malicious =
responses=20
(perhaps due to bugs or foul play).=20
<P>A message is considered "committed" when all in sync replicas for =
that=20
partition have applied it to their log. Only committed messages are ever =
given=20
out to the consumer. This means that the consumer need not worry about=20
potentially seeing a message that could be lost if the leader fails. =
Producers,=20
on the other hand, have the option of either waiting for the message to =
be=20
committed or not, depending on their preference for tradeoff between =
latency and=20
durability. This preference is controlled by the request.required.acks =
setting=20
that the producer uses.=20
<P>The guarantee that Kafka offers is that a committed message will not =
be lost,=20
as long as there is at least one in sync replica alive, at all times.=20
<P>Kafka will remain available in the presence of node failures after a =
short=20
fail-over period, but may not remain available in the presence of =
network=20
partitions.=20
<H4>Replicated Logs: Quorums, ISRs, and State Machines (Oh my!)</H4>At =
its heart=20
a Kafka partition is a replicated log. The replicated log is one of the =
most=20
basic primitives in distributed data systems, and there are many =
approaches for=20
implementing one. A replicated log can be used by other systems as a =
primitive=20
for implementing other distributed systems in the <A =
href=3D"http://en.wikipedia.org/wiki/State_machine_replication">state-mac=
hine=20
style</A>.=20
<P>A replicated log models the process of coming into consensus on the =
order of=20
a series of values (generally numbering the log entries 0, 1, 2, ...). =
There are=20
many ways to implement this, but the simplest and fastest is with a =
leader who=20
chooses the ordering of values provided to it. As long as the leader =
remains=20
alive, all followers need to only copy the values and ordering, the =
leader=20
chooses.=20
<P>Of course if leaders didn't fail we wouldn't need followers! When the =
leader=20
does die we need to choose a new leader from among the followers. But =
followers=20
themselves may fall behind or crash so we must ensure we choose an =
up-to-date=20
follower. The fundamental guarantee a log replication algorithm must =
provide is=20
that if we tell the client a message is committed, and the leader fails, =
the new=20
leader we elect must also have that message. This yields a tradeoff: if =
the=20
leader waits for more followers to acknowledge a message before =
declaring it=20
committed then there will be more potentially electable leaders.=20
<P>If you choose the number of acknowledgements required and the number =
of logs=20
that must be compared to elect a leader such that there is guaranteed to =
be an=20
overlap, then this is called a Quorum.=20
<P>A common approach to this tradeoff is to use a majority vote for both =
the=20
commit decision and the leader election. This is not what Kafka does, =
but let's=20
explore it anyway to understand the tradeoffs. Let's say we have =
2<I>f</I>+1=20
replicas. If <I>f</I>+1 replicas must receive a message prior to a =
commit being=20
declared by the leader, and if we elect a new leader by electing the =
follower=20
with the most complete log from at least <I>f</I>+1 replicas, then, with =
no more=20
than <I>f</I> failures, the leader is guaranteed to have all committed =
messages.=20
This is because among any <I>f</I>+1 replicas, there must be at least =
one=20
replica that contains all committed messages. That replica's log will be =
the=20
most complete and therefore will be selected as the new leader. There =
are many=20
remaining details that each algorithm must handle (such as precisely =
defined=20
what makes a log more complete, ensuring log consistency during leader =
failure=20
or changing the set of servers in the replica set) but we will ignore =
these for=20
now.=20
<P>This majority vote approach has a very nice property: the latency is=20
dependent on only the fastest servers. That is, if the replication =
factor is=20
three, the latency is determined by the faster slave not the slower one. =

<P>There are a rich variety of algorithms in this family including =
ZooKeeper's=20
<A href=3D"http://www.stanford.edu/class/cs347/reading/zab.pdf">Zab</A>, =
<A =
href=3D"https://ramcloud.stanford.edu/wiki/download/attachments/11370504/=
raft.pdf">Raft</A>,=20
and <A =
href=3D"http://pmg.csail.mit.edu/papers/vr-revisited.pdf">Viewstamped=20
Replication</A>. The most similar academic publication we are aware of =
to=20
Kafka's actual implementation is <A =
href=3D"http://research.microsoft.com/apps/pubs/default.aspx?id=3D66814">=
PacificA</A>=20
from Microsoft.=20
<P>The downside of majority vote is that it doesn't take many failures =
to leave=20
you with no electable leaders. To tolerate one failure requires three =
copies of=20
the data, and to tolerate two failures requires five copies of the data. =
In our=20
experience having only enough redundancy to tolerate a single failure is =
not=20
enough for a practical system, but doing every write five times, with 5x =
the=20
disk space requirements and 1/5th the throughput, is not very practical =
for=20
large volume data problems. This is likely why quorum algorithms more =
commonly=20
appear for shared cluster configuration such as ZooKeeper but are less =
common=20
for primary data storage. For example in HDFS the namenode's =
high-availability=20
feature is built on a <A =
href=3D"http://blog.cloudera.com/blog/2012/10/quorum-based-journaling-in-=
cdh4-1">majority-vote-based=20
journal</A>, but this more expensive approach is not used for the data =
itself.=20
<P>Kafka takes a slightly different approach to choosing its quorum set. =
Instead=20
of majority vote, Kafka dynamically maintains a set of in-sync replicas =
(ISR)=20
that are caught-up to the leader. Only members of this set are eligible =
for=20
election as leader. A write to a Kafka partition is not considered =
committed=20
until <I>all</I> in-sync replicas have received the write. This ISR set =
is=20
persisted to ZooKeeper whenever it changes. Because of this, any replica =
in the=20
ISR is eligible to be elected leader. This is an important factor for =
Kafka's=20
usage model where there are many partitions and ensuring leadership =
balance is=20
important. With this ISR model and <I>f+1</I> replicas, a Kafka topic =
can=20
tolerate <I>f</I> failures without losing committed messages.=20
<P>For most use cases we hope to handle, we think this tradeoff is a =
reasonable=20
one. In practice, to tolerate <I>f</I> failures, both the majority vote =
and the=20
ISR approach will wait for the same number of replicas to acknowledge =
before=20
committing a message (e.g. to survive one failure a majority quorum =
needs three=20
replicas and one acknowledgement and the ISR approach requires two =
replicas and=20
one acknowledgement). The ability to commit without the slowest servers =
is an=20
advantage of the majority vote approach. However, we think it is =
ameliorated by=20
allowing the client to choose whether they block on the message commit =
or not,=20
and the additional throughput and disk space due to the lower required=20
replication factor is worth it.=20
<P>Another important design distinction is that Kafka does not require =
that=20
crashed nodes recover with all their data intact. It is not uncommon for =

replication algorithms in this space to depend on the existence of =
"stable=20
storage" that cannot be lost in any failure-recovery scenario without =
potential=20
consistency violations. There are two primary problems with this =
assumption.=20
First, disk errors are the most common problem we observe in real =
operation of=20
persistent data systems and they often do not leave data intact. =
Secondly, even=20
if this were not a problem, we do not want to require the use of fsync =
on every=20
write for our consistency guarantees as this can reduce performance by =
two to=20
three orders of magnitude. Our protocol for allowing a replica to rejoin =
the ISR=20
ensures that before rejoining, it must fully re-sync again even if it =
lost=20
unflushed data in its crash.=20
<H4>Unclean leader election: What if they all die?</H4>Note that Kafka's =

guarantee with respect to data loss is predicated on at least on replica =

remaining in sync. If all the nodes replicating a partition die, this =
guarantee=20
no longer holds.=20
<P>However a practical system needs to do something reasonable when all =
the=20
replicas die. If you are unlucky enough to have this occur, it is =
important to=20
consider what will happen. There are two behaviors that could be =
implemented:=20
<OL>
  <LI>Wait for a replica in the ISR to come back to life and choose this =
replica=20
  as the leader (hopefully it still has all its data).    =20
  <LI>Choose the first replica (not necessarily in the ISR) that comes =
back to=20
  life as the leader. </LI></OL>
<P>This is a simple tradeoff between availability and consistency. If we =
wait=20
for replicas in the ISR, then we will remain unavailable as long as =
those=20
replicas are down. If such replicas were destroyed or their data was =
lost, then=20
we are permanently down. If, on the other hand, a non-in-sync replica =
comes back=20
to life and we allow it to become leader, then its log becomes the =
source of=20
truth even though it is not guaranteed to have every committed message. =
In our=20
current release we choose the second strategy and favor choosing a =
potentially=20
inconsistent replica when all replicas in the ISR are dead. In the =
future, we=20
would like to make this configurable to better support use cases where =
downtime=20
is preferable to inconsistency.=20
<P>This dilemma is not specific to Kafka. It exists in any quorum-based =
scheme.=20
For example in a majority voting scheme, if a majority of servers suffer =
a=20
permanent failure, then you must either choose to lose 100% of your data =
or=20
violate consistency by taking what remains on an existing server as your =
new=20
source of truth.=20
<H4>Replica Management</H4>The above discussion on replicated logs =
really covers=20
only a single log, i.e. one topic partition. However a Kafka cluster =
will manage=20
hundreds or thousands of these partitions. We attempt to balance =
partitions=20
within a cluster in a round-robin fashion to avoid clustering all =
partitions for=20
high-volume topics on a small number of nodes. Likewise we try to =
balance=20
leadership so that each node is the leader for a proportional share of =
its=20
partitions.=20
<P>It is also important to optimize the leadership election process as =
that is=20
the critical window of unavailability. A naive implementation of leader =
election=20
would end up running an election per partition for all partitions a node =
hosted=20
when that node failed. Instead, we elect one of the brokers as the =
"controller".=20
This controller detects failures at the broker level and is responsible =
for=20
changing the leader of all affected partitions in a failed broker. The =
result is=20
that we are able to batch together many of the required leadership =
change=20
notifications which makes the election process far cheaper and faster =
for a=20
large number of partitions. If the controller fails, one of the =
surviving=20
brokers will become the new controller.=20
<H3><A id=3D"compaction">4.8 Log Compaction</A></H3>Log compaction =
ensures that=20
Kafka will always retain at least the last known value for each message =
key=20
within the log of data for a single topic partition.  It addresses use =
cases and=20
scenarios such as restoring state after application crashes or system =
failure,=20
or reloading caches after application restarts during operational =
maintenance.=20
Let's dive into these use cases in more detail and then describe how =
compaction=20
works.=20
<P>So far we have described only the simpler approach to data retention =
where=20
old log data is discarded after a fixed period of time or when the log =
reaches=20
some predetermined size. This works well for temporal event data such as =
logging=20
where each record stands alone. However an important class of data =
streams are=20
the log of changes to keyed, mutable data (for example, the changes to a =

database table).=20
<P>Let's discuss a concrete example of such a stream. Say we have a =
topic=20
containing user email addresses; every time a user updates their email =
address=20
we send a message to this topic using their user id as the primary key. =
Now say=20
we send the following messages over some time period for a user with id =
123,=20
each message corresponding to a change in email address (messages for =
other ids=20
are omitted):=20
<PRE>    123 =3D&gt; bill@microsoft.com=0A=
            .=0A=
            .=0A=
            .=0A=
    123 =3D&gt; bill@gatesfoundation.org=0A=
            .=0A=
            .=0A=
            .=0A=
    123 =3D&gt; bill@gmail.com=0A=
</PRE>
Log compaction gives us a more granular retention mechanism so that we =
are=20
guaranteed to retain at least the last update for each primary key (e.g. =

<CODE>bill@gmail.com</CODE>). By doing this we guarantee that the log =
contains a=20
full snapshot of the final value for every key not just keys that =
changed=20
recently. This means downstream consumers can restore their own state =
off this=20
topic without us having to retain a complete log of all changes.=20
<P>Let's start by looking at a few use cases where this is useful, then =
we'll=20
see how it can be used.=20
<OL>
  <LI><I>Database change subscription</I>. It is often necessary to have =
a data=20
  set in multiple data systems, and often one of these systems is a =
database of=20
  some kind (either a RDBMS or perhaps a new-fangled key-value store). =
For=20
  example you might have a database, a cache, a search cluster, and a =
Hadoop=20
  cluster. Each change to the database will need to be reflected in the =
cache,=20
  the search cluster, and eventually in Hadoop. In the case that one is =
only=20
  handling the real-time updates you only need recent log. But if you =
want to be=20
  able to reload the cache or restore a failed search node you may need =
a=20
  complete data set.=20
  <LI><I>Event sourcing</I>. This is a style of application design which =

  co-locates query processing with application design and uses a log of =
changes=20
  as the primary store for the application.=20
  <LI><I>Journaling for high-availability</I>. A process that does local =

  computation can be made fault-tolerant by logging out changes that it =
makes to=20
  it's local state so another process can reload these changes and carry =
on if=20
  it should fail. A concrete example of this is handling counts, =
aggregations,=20
  and other "group by"-like processing in a stream query system. Samza, =
a=20
  real-time stream-processing framework, <A =
href=3D"http://samza.incubator.apache.org/learn/documentation/0.7.0/conta=
iner/state-management.html">uses=20
  this feature</A> for exactly this purpose. </LI></OL>In each of these =
cases one=20
needs primarily to handle the real-time feed of changes, but =
occasionally, when=20
a machine crashes or data needs to be re-loaded or re-processed, one =
needs to do=20
a full load. Log compaction allows feeding both of these use cases off =
the same=20
backing topic. This style of usage of a log is described in more detail =
in <A=20
href=3D"http://engineering.linkedin.com/distributed-systems/log-what-ever=
y-software-engineer-should-know-about-real-time-datas-unifying">this=20
blog post</A>.=20
<P>The general idea is quite simple. If we had infinite log retention, =
and we=20
logged each change in the above cases, then we would have captured the =
state of=20
the system at each time from when it first began. Using this complete =
log we=20
could restore to any point in time by replaying the first N records in =
the log.=20
This hypothetical complete log is not very practical for systems that =
update a=20
single record many times as the log will grow without bound even for a =
stable=20
dataset. The simple log retention mechanism which throws away old =
updates will=20
bound space but the log is no longer a way to restore the current =
state=E2=80=94now=20
restoring from the beginning of the log no longer recreates the current =
state as=20
old updates may not be captured at all.=20
<P>Log compaction is a mechanism to give finer-grained per-record =
retention,=20
rather than the coarser-grained time-based retention. The idea is to =
selectively=20
remove records where we have a more recent update with the same primary =
key.=20
This way the log is guaranteed to have at least the last state for each =
key.=20
<P>This retention policy can be set per-topic, so a single cluster can =
have some=20
topics where retention is enforced by size or time and other topics =
where=20
retention is enforced by compaction.=20
<P> This functionality is inspired by one of LinkedIn's oldest and most=20
successful pieces of infrastructure=E2=80=94a database changelog caching =
service called=20
<A href=3D"https://github.com/linkedin/databus">Databus</A>. Unlike most =

log-structured storage systems Kafka is built for subscription and =
organizes=20
data for fast linear reads and writes. Unlike Databus, Kafka acts a=20
source-of-truth store so it is useful even in situations where the =
upstream data=20
source would not otherwise be replayable.=20
<H4>Log Compaction Basics</H4>Here is a high-level picture that shows =
the=20
logical structure of a Kafka log with the offset for each message.=20
<P><IMG src=3D"https://kafka.apache.org/images/log_cleaner_anatomy.png"> =

<P>The head of the log is identical to a traditional Kafka log. It has =
dense,=20
sequential offsets and retains all messages. Log compaction adds an =
option for=20
handling the tail of the log. The picture above shows a log with a =
compacted=20
tail. Note that the messages in the tail of the log retain the original =
offset=20
assigned when they were first written=E2=80=94that never changes. Note =
also that all=20
offsets remain valid positions in the log, even if the message with that =
offset=20
has been compacted away; in this case this position is indistinguishable =
from=20
the next highest offset that does appear in the log. For example, in the =
picture=20
above the offsets 36, 37, and 38 are all equivalent positions and a read =

beginning at any of these offsets would return a message set beginning =
with 38.=20
<P>Compaction also allows for deletes. A message with a key and a null =
payload=20
will be treated as a delete from the log. This delete marker will cause =
any=20
prior message with that key to be removed (as would any new message with =
that=20
key), but delete markers are special in that they will themselves be =
cleaned out=20
of the log after a period of time to free up space. The point in time at =
which=20
deletes are no longer retained is marked as the "delete retention point" =
in the=20
above diagram.=20
<P>The compaction is done in the background by periodically recopying =
log=20
segments. Cleaning does not block reads and can be throttled to use no =
more than=20
a configurable amount of I/O throughput to avoid impacting producers and =

consumers. The actual process of compacting a log segment looks =
something like=20
this:=20
<P><IMG src=3D"https://kafka.apache.org/images/log_compaction.png">=20
<P>
<H4>What guarantees does log compaction provide?</H4>Log compaction =
guarantees=20
the following:=20
<OL>
  <LI>Any consumer that stays caught-up to within the head of the log =
will see=20
  every message that is written; these messages will have sequential =
offsets.=20
  <LI>Ordering of messages is always maintained.  Compaction will never =
re-order=20
  messages, just remove some.=20
  <LI>The offset for a message never changes.  It is the permanent =
identifier=20
  for a position in the log.=20
  <LI>Any read progressing from offset 0 will see at least the final =
state of=20
  all records in the order they were written. All delete markers for =
deleted=20
  records will be seen provided the reader reaches the head of the log =
in a time=20
  period less than the topic's delete.retention.ms setting (the default =
is 24=20
  hours). This is important as delete marker removal happens =
concurrently with=20
  read (and thus it is important that we not remove any delete marker =
prior to=20
  the reader seeing it).=20
  <LI>Any consumer progressing from the start of the log, will see at =
least the=20
  <EM>final</EM> state of all records in the order they were written.  =
All=20
  delete markers for deleted records will be seen provided the consumer =
reaches=20
  the head of the log in a time period less than the topic's=20
  <CODE>delete.retention.ms</CODE> setting (the default is 24 hours).  =
This is=20
  important as delete marker removal happens concurrently with read, and =
thus it=20
  is important that we do not remove any delete marker prior to the =
consumer=20
  seeing it. </LI></OL>
<H4>Log Compaction Details</H4>Log compaction is handled by the log =
cleaner, a=20
pool of background threads that recopy log segment files, removing =
records whose=20
key appears in the head of the log. Each compactor thread works as =
follows:=20
<OL>
  <LI>It chooses the log that has the highest ratio of log head to log =
tail=20
  <LI>It creates a succinct summary of the last offset for each key in =
the head=20
  of the log=20
  <LI>It recopies the log from beginning to end removing keys which have =
a later=20
  occurrence in the log. New, clean segments are swapped into the log=20
  immediately so the additional disk space required is just one =
additional log=20
  segment (not a fully copy of the log).=20
  <LI>The summary of the log head is essentially just a space-compact =
hash=20
  table. It uses exactly 24 bytes per entry. As a result with 8GB of =
cleaner=20
  buffer one cleaner iteration can clean around 366GB of log head =
(assuming 1k=20
  messages). </LI></OL>
<P>
<H4>Configuring The Log Cleaner</H4>As of 0.8.1 the log cleaner is =
disabled by=20
default. To enable it set the server config  =20
<PRE>  log.cleaner.enable=3Dtrue</PRE>This will start the pool of =
cleaner threads.=20
To enable log cleaning on a particular topic you can add the =
log-specific=20
property  =20
<PRE>  log.cleanup.policy=3Dcompact</PRE>This can be done either at =
topic creation=20
time or using the alter topic command.=20
<P>Further cleaner configurations are described <A =
href=3D"https://kafka.apache.org/documentation.html#brokerconfigs">here</=
A>.=20
<H4>Log Compaction Limitations</H4>
<OL>
  <LI>You cannot configure yet how much log is retained without =
compaction (the=20
  "head" of the log).  Currently all segments are eligible except for =
the last=20
  segment, i.e. the one currently being written to.</LI>
  <LI>Log compaction is not yet compatible with compressed =
topics.</LI></OL>
<H2><A id=3D"implementation">5. Implementation</A></H2>
<H3><A id=3D"apidesign">5.1 API Design</A></H3>
<H4>Producer APIs</H4>
<P>The Producer API that wraps the 2 low-level producers -=20
<CODE>kafka.producer.SyncProducer</CODE> and=20
<CODE>kafka.producer.async.AsyncProducer</CODE>. =20
<PRE>class Producer<t> {=0A=
	=0A=
  /* Sends the data, partitioned by key to the topic using either the */=0A=
  /* synchronous or the asynchronous producer */=0A=
  public void send(kafka.javaapi.producer.ProducerData&lt;K,V&gt; =
producerData);=0A=
=0A=
  /* Sends a list of data, partitioned by key to the topic using either =
*/=0A=
  /* the synchronous or the asynchronous producer */=0A=
  public void =
send(java.util.List&lt;kafka.javaapi.producer.ProducerData&lt;K,V&gt;&gt;=
 producerData);=0A=
=0A=
  /* Closes the producer and cleans up */	=0A=
  public void close();=0A=
=0A=
}=0A=
</t></PRE>
The goal is to expose all the producer functionality through a single =
API to the=20
client.   The new producer -=20
<UL>
  <LI>can handle queueing/buffering of multiple producer requests and=20
  asynchronous dispatch of the batched data - 	=20
  <P><CODE>kafka.producer.Producer</CODE> provides the ability to batch =
multiple=20
  produce requests (<CODE>producer.type=3Dasync</CODE>), before =
serializing and=20
  dispatching them to the appropriate kafka broker partition. The size =
of the=20
  batch can be controlled by a few config parameters. As events enter a =
queue,=20
  they are buffered in a queue, until either <CODE>queue.time</CODE> or=20
  <CODE>batch.size</CODE> is reached. A background thread=20
  (<CODE>kafka.producer.async.ProducerSendThread</CODE>) dequeues the =
batch of=20
  data and lets the <CODE>kafka.producer.EventHandler</CODE> serialize =
and send=20
  the data to the appropriate kafka broker partition. A custom event =
handler can=20
  be plugged in through the <CODE>event.handler</CODE> config parameter. =
At=20
  various stages of this producer queue pipeline, it is helpful to be =
able to=20
  inject callbacks, either for plugging in custom logging/tracing code =
or custom=20
  monitoring logic. This is possible by implementing the=20
  <CODE>kafka.producer.async.CallbackHandler</CODE> interface and =
setting=20
  <CODE>callback.handler</CODE> config parameter to that class. =
</P></LI>
  <LI>handles the serialization of data through a user-specified=20
  <CODE>Encoder</CODE> - =20
<PRE>interface Encoder&lt;T&gt; {=0A=
  public Message toMessage(T data);=0A=
}=0A=
</PRE>
  <P>The default is the no-op=20
  <CODE>kafka.serializer.DefaultEncoder</CODE></P></LI>
  <LI>provides ZooKeeper based automatic broker discovery - =20
  <P>The ZooKeeper based broker discovery and load balancing can be used =
by=20
  specifying the ZooKeeper connection url through the =
<CODE>zk.connect</CODE>=20
  config parameter. For some applications, however, the dependence on =
ZooKeeper=20
  is inappropriate. In that case, the producer can take in a static list =
of=20
  brokers through the <CODE>broker.list</CODE> config parameter. Each =
produce=20
  requests gets routed to a random broker partition in this case. If =
that broker=20
  is down, the produce request fails.  </P></LI>
  <LI>provides software load balancing through an optionally =
user-specified=20
  <CODE>Partitioner</CODE> - =20
  <P>The routing decision is influenced by the=20
  <CODE>kafka.producer.Partitioner</CODE>. =20
<PRE>interface Partitioner&lt;T&gt; {=0A=
   int partition(T key, int numPartitions);=0A=
}=0A=
</PRE>
  The partition API uses the key and the number of available broker =
partitions=20
  to return a partition id. This id is used as an index into a sorted =
list of=20
  broker_ids and partitions to pick a broker partition for the producer =
request.=20
  The default partitioning strategy is =
<CODE>hash(key)%numPartitions</CODE>. If=20
  the key is null, then a random broker partition is picked. A custom=20
  partitioning strategy can also be plugged in using the=20
  <CODE>partitioner.class</CODE> config parameter.	=20
  <P></P></LI></UL>
<P></P>
<H4>Consumer APIs</H4>
<P>We have 2 levels of consumer APIs. The low-level "simple" API =
maintains a=20
connection to a single broker and has a close correspondence to the =
network=20
requests sent to the server. This API is completely stateless, with the =
offset=20
being passed in on every request, allowing the user to maintain this =
metadata=20
however they choose. </P>
<P>The high-level API hides the details of brokers from the consumer and =
allows=20
consuming off the cluster of machines without concern for the underlying =

topology. It also maintains the state of what has been consumed. The =
high-level=20
API also provides the ability to subscribe to topics that match a filter =

expression (i.e., either a whitelist or a blacklist regular expression). =
</P>
<H5>Low-level API</H5>
<PRE>class SimpleConsumer {=0A=
	=0A=
  /* Send fetch request to a broker and get back a set of messages. */ =0A=
  public ByteBufferMessageSet fetch(FetchRequest request);=0A=
=0A=
  /* Send a list of fetch requests to a broker and get back a response =
set. */ =0A=
  public MultiFetchResponse multifetch(List&lt;FetchRequest&gt; fetches);=0A=
=0A=
  /**=0A=
   * Get a list of valid offsets (up to maxSize) before the given time.=0A=
   * The result is a list of offsets, in descending order.=0A=
   * @param time: time in millisecs,=0A=
   *              if set to OffsetRequest$.MODULE$.LATIEST_TIME(), get =
from the latest offset available.=0A=
   *              if set to OffsetRequest$.MODULE$.EARLIEST_TIME(), get =
from the earliest offset available.=0A=
   */=0A=
  public long[] getOffsetsBefore(String topic, int partition, long time, =
int maxNumOffsets);=0A=
}=0A=
</PRE>
The low-level API is used to implement the high-level API as well as =
being used=20
directly for some of our offline consumers (such as the hadoop consumer) =
which=20
have particular requirements around maintaining state.=20
<H5>High-level API</H5>
<PRE>=0A=
/* create a connection to the cluster */ =0A=
ConsumerConnector connector =3D Consumer.create(consumerConfig);=0A=
=0A=
interface ConsumerConnector {=0A=
	=0A=
  /**=0A=
   * This method is used to get a list of KafkaStreams, which are =
iterators over=0A=
   * MessageAndMetadata objects from which you can obtain messages and =
their=0A=
   * associated metadata (currently only topic).=0A=
   *  Input: a map of &lt;topic, #streams&gt;=0A=
   *  Output: a map of &lt;topic, list of message streams&gt;=0A=
   */=0A=
  public Map&lt;String,List&lt;KafkaStream&gt;&gt; =
createMessageStreams(Map&lt;String,Int&gt; topicCountMap); =0A=
=0A=
  /**=0A=
   * You can also obtain a list of KafkaStreams, that iterate over =
messages=0A=
   * from topics that match a TopicFilter. (A TopicFilter encapsulates a=0A=
   * whitelist or a blacklist which is a standard Java regex.)=0A=
   */=0A=
  public List&lt;KafkaStream&gt; createMessageStreamsByFilter(=0A=
      TopicFilter topicFilter, int numStreams);=0A=
=0A=
  /* Commit the offsets of all messages consumed so far. */=0A=
  public commitOffsets()=0A=
  =0A=
  /* Shut down the connector */=0A=
  public shutdown()=0A=
}=0A=
</PRE>
<P>This API is centered around iterators, implemented by the KafkaStream =
class.=20
Each KafkaStream represents the stream of messages from one or more =
partitions=20
on one or more servers. Each stream is used for single threaded =
processing, so=20
the client can provide the number of desired streams in the create call. =
Thus a=20
stream may represent the merging of multiple server partitions (to =
correspond to=20
the number of processing threads), but each partition only goes to one =
stream.=20
</P>
<P>The createMessageStreams call registers the consumer for the topic, =
which=20
results in rebalancing the consumer/broker assignment. The API =
encourages=20
creating many topic streams in a single call in order to minimize this=20
rebalancing. The createMessageStreamsByFilter call (additionally) =
registers=20
watchers to discover new topics that match its filter. Note that each =
stream=20
that createMessageStreamsByFilter returns may iterate over messages from =

multiple topics (i.e., if multiple topics are allowed by the filter). =
</P>
<H3><A id=3D"networklayer">5.2 Network Layer</A></H3>
<P>The network layer is a fairly straight-forward NIO server, and will =
not be=20
described in great detail. The sendfile implementation is done by giving =
the=20
<CODE>MessageSet</CODE> interface a <CODE>writeTo</CODE> method. This =
allows the=20
file-backed message set to use the more efficient =
<CODE>transferTo</CODE>=20
implementation instead of an in-process buffered write. The threading =
model is a=20
single acceptor thread and <I>N</I> processor threads which handle a =
fixed=20
number of connections each. This design has been pretty thoroughly =
tested <A=20
href=3D"http://sna-projects.com/blog/2009/08/introducing-the-nio-socketse=
rver-implementation">elsewhere</A>=20
and found to be simple to implement and fast. The protocol is kept quite =
simple=20
to allow for future implementation of clients in other languages. </P>
<H3><A id=3D"messages">5.3 Messages</A></H3>
<P>Messages consist of a fixed-size header and variable length opaque =
byte array=20
payload. The header contains a format version and a CRC32 checksum to =
detect=20
corruption or truncation. Leaving the payload opaque is the right =
decision:=20
there is a great deal of progress being made on serialization libraries =
right=20
now, and any particular choice is unlikely to be right for all uses. =
Needless to=20
say a particular application using Kafka would likely mandate a =
particular=20
serialization type as part of its usage. The <CODE>MessageSet</CODE> =
interface=20
is simply an iterator over messages with specialized methods for bulk =
reading=20
and writing to an NIO <CODE>Channel</CODE>.=20
<H3><A id=3D"messageformat">5.4 Message Format</A></H3>
<PRE>	/** =0A=
	 * A message. The format of an N byte message is the following: =0A=
	 * =0A=
	 * If magic byte is 0 =0A=
	 * =0A=
	 * 1. 1 byte "magic" identifier to allow format changes =0A=
	 * =0A=
	 * 2. 4 byte CRC32 of the payload =0A=
	 * =0A=
	 * 3. N - 5 byte payload =0A=
	 * =0A=
	 * If magic byte is 1 =0A=
	 * =0A=
	 * 1. 1 byte "magic" identifier to allow format changes =0A=
	 * =0A=
	 * 2. 1 byte "attributes" identifier to allow annotations on the =
message independent of the version (e.g. compression enabled, type of =
codec used) =0A=
	 * =0A=
	 * 3. 4 byte CRC32 of the payload =0A=
	 * =0A=
	 * 4. N - 6 byte payload =0A=
	 * =0A=
	 */=0A=
</PRE>
<P></P>
<H3><A id=3D"log">5.5 Log</A></H3>
<P>A log for a topic named "my_topic" with two partitions consists of =
two=20
directories (namely <CODE>my_topic_0</CODE> and <CODE>my_topic_1</CODE>) =

populated with data files containing the messages for that topic. The =
format of=20
the log files is a sequence of "log entries""; each log entry is a 4 =
byte=20
integer <I>N</I> storing the message length which is followed by the =
<I>N</I>=20
message bytes. Each message is uniquely identified by a 64-bit integer=20
<I>offset</I> giving the byte position of the start of this message in =
the=20
stream of all messages ever sent to that topic on that partition. The =
on-disk=20
format of each message is given below. Each log file is named with the =
offset of=20
the first message it contains. So the first file created will be=20
00000000000.kafka, and each additional file will have an integer name =
roughly=20
<I>S</I> bytes from the previous file where <I>S</I> is the max log file =
size=20
given in the configuration. </P>
<P>The exact binary format for messages is versioned and maintained as a =

standard interface so message sets can be transfered between producer, =
broker,=20
and client without recopying or conversion when desirable. This format =
is as=20
follows: </P>
<PRE>On-disk format of a message=0A=
=0A=
message length : 4 bytes (value: 1+4+n) =0A=
"magic" value  : 1 byte=0A=
crc            : 4 bytes=0A=
payload        : n bytes=0A=
</PRE>
<P>The use of the message offset as the message id is unusual. Our =
original idea=20
was to use a GUID generated by the producer, and maintain a mapping from =
GUID to=20
offset on each broker. But since a consumer must maintain an ID for each =
server,=20
the global uniqueness of the GUID provides no value. Furthermore the =
complexity=20
of maintaining the mapping from a random id to an offset requires a =
heavy weight=20
index structure which must be synchronized with disk, essentially =
requiring a=20
full persistent random-access data structure. Thus to simplify the =
lookup=20
structure we decided to use a simple per-partition atomic counter which =
could be=20
coupled with the partition id and node id to uniquely identify a =
message; this=20
makes the lookup structure simpler, though multiple seeks per consumer =
request=20
are still likely. However once we settled on a counter, the jump to =
directly=20
using the offset seemed natural=E2=80=94both after all are monotonically =
increasing=20
integers unique to a partition. Since the offset is hidden from the =
consumer API=20
this decision is ultimately an implementation detail and we went with =
the more=20
efficient approach. </P><IMG=20
src=3D"https://kafka.apache.org/images/kafka_log.png">=20
<H4>Writes</H4>
<P>The log allows serial appends which always go to the last file. This =
file is=20
rolled over to a fresh file when it reaches a configurable size (say =
1GB). The=20
log takes two configuration parameter <I>M</I> which gives the number of =

messages to write before forcing the OS to flush the file to disk, and =
<I>S</I>=20
which gives a number of seconds after which a flush is forced. This =
gives a=20
durability guarantee of losing at most <I>M</I> messages or <I>S</I> =
seconds of=20
data in the event of a system crash. </P>
<H4>Reads</H4>
<P>Reads are done by giving the 64-bit logical offset of a message and =
an=20
<I>S</I>-byte max chunk size. This will return an iterator over the =
messages=20
contained in the <I>S</I>-byte buffer. <I>S</I> is intended to be larger =
than=20
any single message, but in the event of an abnormally large message, the =
read=20
can be retried multiple times, each time doubling the buffer size, until =
the=20
message is read successfully. A maximum message and buffer size can be =
specified=20
to make the server reject messages larger than some size, and to give a =
bound to=20
the client on the maximum it need ever read to get a complete message. =
It is=20
likely that the read buffer ends with a partial message, this is easily =
detected=20
by the size delimiting. </P>
<P>The actual process of reading from an offset requires first locating =
the log=20
segment file in which the data is stored, calculating the file-specific =
offset=20
from the global offset value, and then reading from that file offset. =
The search=20
is done as a simple binary search variation against an in-memory range=20
maintained for each file. </P>
<P>The log provides the capability of getting the most recently written =
message=20
to allow clients to start subscribing as of "right now". This is also =
useful in=20
the case the consumer fails to consume its data within its SLA-specified =
number=20
of days. In this case when the client attempts to consume a non-existant =
offset=20
it is given an OutOfRangeException and can either reset itself or fail =
as=20
appropriate to the use case. </P>
<P> The following is the format of the results sent to the consumer.=20
<PRE>MessageSetSend (fetch result)=0A=
=0A=
total length     : 4 bytes=0A=
error code       : 2 bytes=0A=
message 1        : x bytes=0A=
...=0A=
message n        : x bytes=0A=
</PRE>
<PRE>MultiMessageSetSend (multiFetch result)=0A=
=0A=
total length       : 4 bytes=0A=
error code         : 2 bytes=0A=
messageSetSend 1=0A=
...=0A=
messageSetSend n=0A=
</PRE>
<H4>Deletes</H4>
<P>Data is deleted one log segment at a time. The log manager allows =
pluggable=20
delete policies to choose which files are eligible for deletion. The =
current=20
policy deletes any log with a modification time of more than <I>N</I> =
days ago,=20
though a policy which retained the last <I>N</I> GB could also be =
useful. To=20
avoid locking reads while still allowing deletes that modify the segment =
list we=20
use a copy-on-write style segment list implementation that provides =
consistent=20
views to allow a binary search to proceed on an immutable static =
snapshot view=20
of the log segments while deletes are progressing. </P>
<H4>Guarantees</H4>
<P>The log provides a configuration parameter <I>M</I> which controls =
the=20
maximum number of messages that are written before forcing a flush to =
disk. On=20
startup a log recovery process is run that iterates over all messages in =
the=20
newest log segment and verifies that each message entry is valid. A =
message=20
entry is valid if the sum of its size and offset are less than the =
length of the=20
file AND the CRC32 of the message payload matches the CRC stored with =
the=20
message. In the event corruption is detected the log is truncated to the =
last=20
valid offset. </P>
<P>Note that two kinds of corruption must be handled: truncation in =
which an=20
unwritten block is lost due to a crash, and corruption in which a =
nonsense block=20
is ADDED to the file. The reason for this is that in general the OS =
makes no=20
guarantee of the write order between the file inode and the actual block =
data so=20
in addition to losing written data the file can gain nonsense data if =
the inode=20
is updated with a new size but a crash occurs before the block =
containing that=20
data is not written. The CRC detects this corner case, and prevents it =
from=20
corrupting the log (though the unwritten messages are, of course, lost). =
</P>
<H3><A id=3D"distributionimpl">5.6 Distribution</A></H3>
<H4>ZooKeeper Directories</H4>
<P>The following gives the ZooKeeper structures and algorithms used for=20
co-ordination between consumers and brokers. </P>
<H4>Notation</H4>
<P>When an element in a path is denoted [xyz], that means that the value =
of xyz=20
is not fixed and there is in fact a ZooKeeper znode for each possible =
value of=20
xyz. For example /topics/[topic] would be a directory named /topics =
containing a=20
sub-directory for each topic name. Numerical ranges are also given such =
as=20
[0...5] to indicate the subdirectories 0, 1, 2, 3, 4. An arrow -&gt; is =
used to=20
indicate the contents of a znode. For example /hello -&gt; world would =
indicate=20
a znode /hello containing the value "world". </P>
<H4>Broker Node Registry</H4>
<PRE>/brokers/ids/[0...N] --&gt; host:port (ephemeral node)=0A=
</PRE>
<P>This is a list of all present broker nodes, each of which provides a =
unique=20
logical broker id which identifies it to consumers (which must be given =
as part=20
of its configuration). On startup, a broker node registers itself by =
creating a=20
znode with the logical broker id under /brokers/ids. The purpose of the =
logical=20
broker id is to allow a broker to be moved to a different physical =
machine=20
without affecting consumers. An attempt to register a broker id that is =
already=20
in use (say because two servers are configured with the same broker id) =
is an=20
error. </P>
<P>Since the broker registers itself in ZooKeeper using ephemeral =
znodes, this=20
registration is dynamic and will disappear if the broker is shutdown or =
dies=20
(thus notifying consumers it is no longer available).	 </P>
<H4>Broker Topic Registry</H4>
<PRE>/brokers/topics/[topic]/[0...N] --&gt; nPartions (ephemeral node)=0A=
</PRE>
<P>Each broker registers itself under the topics it maintains and stores =
the=20
number of partitions for that topic. </P>
<H4>Consumers and Consumer Groups</H4>
<P>Consumers of topics also register themselves in ZooKeeper, in order =
to=20
balance the consumption of data and track their offsets in each =
partition for=20
each broker they consume from. </P>
<P>Multiple consumers can form a group and jointly consume a single =
topic. Each=20
consumer in the same group is given a shared group_id.  For example if =
one=20
consumer is your foobar process, which is run across three machines, =
then you=20
might assign this group of consumers the id "foobar". This group id is =
provided=20
in the configuration of the consumer, and is your way to tell the =
consumer which=20
group it belongs to. </P>
<P>The consumers in a group divide up the partitions as fairly as =
possible, each=20
partition is consumed by exactly one consumer in a consumer group. </P>
<H4>Consumer Id Registry</H4>
<P>In addition to the group_id which is shared by all consumers in a =
group, each=20
consumer is given a transient, unique consumer_id (of the form =
hostname:uuid)=20
for identification purposes. Consumer ids are registered in the =
following=20
directory.=20
<PRE>/consumers/[group_id]/ids/[consumer_id] --&gt; {"topic1": #streams, =
..., "topicN": #streams} (ephemeral node)=0A=
</PRE>
Each of the consumers in the group registers under its group and creates =
a znode=20
with its consumer_id. The value of the znode contains a map of =
&lt;topic,=20
#streams&gt;. This id is simply used to identify each of the consumers =
which is=20
currently active within a group. This is an ephemeral node so it will =
disappear=20
if the consumer process dies.=20
<P></P>
<H4>Consumer Offset Tracking</H4>
<P>Consumers track the maximum offset they have consumed in each =
partition. This=20
value is stored in a ZooKeeper directory </P>
<PRE>/consumers/[group_id]/offsets/[topic]/[broker_id-partition_id] =
--&gt; offset_counter_value ((persistent node)=0A=
</PRE>
<H4>Partition Owner registry</H4>
<P>Each broker partition is consumed by a single consumer within a given =

consumer group. The consumer must establish its ownership of a given =
partition=20
before any consumption can begin. To establish its ownership, a consumer =
writes=20
its own id in an ephemeral node under the particular broker partition it =
is=20
claiming. </P>
<PRE>/consumers/[group_id]/owners/[topic]/[broker_id-partition_id] =
--&gt; consumer_node_id (ephemeral node)=0A=
</PRE>
<H4>Broker node registration</H4>
<P>The broker nodes are basically independent, so they only publish =
information=20
about what they have. When a broker joins, it registers itself under the =
broker=20
node registry directory and writes information about its host name and =
port. The=20
broker also register the list of existing topics and their logical =
partitions in=20
the broker topic registry. New topics are registered dynamically when =
they are=20
created on the broker. </P>
<H4>Consumer registration algorithm</H4>
<P>When a consumer starts, it does the following:=20
<OL>
  <LI> Register itself in the consumer id registry under its group.    =
</LI>
  <LI> Register a watch on changes (new consumers joining or any =
existing=20
  consumers leaving) under the consumer id registry. (Each change =
triggers=20
  rebalancing among all consumers within the group to which the changed =
consumer=20
  belongs.)    </LI>
  <LI> Register a watch on changes (new brokers joining or any existing =
brokers=20
  leaving) under the broker id registry. (Each change triggers =
rebalancing among=20
  all consumers in all consumer groups.) </LI>
  <LI> If the consumer creates a message stream using a topic filter, it =
also=20
  registers a watch on changes (new topics being added) under the broker =
topic=20
  registry. (Each change will trigger re-evaluation of the available =
topics to=20
  determine which topics are allowed by the topic filter. A new allowed =
topic=20
  will trigger rebalancing among all consumers within the consumer =
group.)</LI>
  <LI> Force itself to rebalance within in its consumer group.    =
</LI></OL>
<P></P>
<H4>Consumer rebalancing algorithm</H4>
<P>The consumer rebalancing algorithms allows all the consumers in a =
group to=20
come into consensus on which consumer is consuming which partitions. =
Consumer=20
rebalancing is triggered on each addition or removal of both broker =
nodes and=20
other consumers within the same group. For a given topic and a given =
consumer=20
group, broker partitions are divided evenly among consumers within the =
group. A=20
partition is always consumed by a single consumer. This design =
simplifies the=20
implementation. Had we allowed a partition to be concurrently consumed =
by=20
multiple consumers, there would be contention on the partition and some =
kind of=20
locking would be required. If there are more consumers than partitions, =
some=20
consumers won't get any data at all. During rebalancing, we try to =
assign=20
partitions to consumers in such a way that reduces the number of broker =
nodes=20
each consumer has to connect to. </P>
<P>Each consumer does the following during rebalancing: </P>
<PRE>   1. For each topic T that C<SUB>i</SUB> subscribes to =0A=
   2.   let P<SUB>T</SUB> be all partitions producing topic T=0A=
   3.   let C<SUB>G</SUB> be all consumers in the same group as =
C<SUB>i</SUB> that consume topic T=0A=
   4.   sort P<SUB>T</SUB> (so partitions on the same broker are =
clustered together)=0A=
   5.   sort C<SUB>G</SUB>=0A=
   6.   let i be the index position of C<SUB>i</SUB> in C<SUB>G</SUB> =
and let N =3D size(P<SUB>T</SUB>)/size(C<SUB>G</SUB>)=0A=
   7.   assign partitions from i*N to (i+1)*N - 1 to consumer =
C<SUB>i</SUB>=0A=
   8.   remove current entries owned by C<SUB>i</SUB> from the partition =
owner registry=0A=
   9.   add newly assigned partitions to the partition owner registry=0A=
        (we may need to re-try this until the original partition owner =
releases its ownership)=0A=
</PRE>
<P>When rebalancing is triggered at one consumer, rebalancing should be=20
triggered in other consumers within the same group about the same time. =
</P>
<H2><A id=3D"operations">6. Operations</A></H2>Here is some information =
on=20
actually running Kafka as a production system based on usage and =
experience at=20
LinkedIn. Please send us any additional tips you know of.=20
<H3><A id=3D"basic_ops">6.1 Basic Kafka Operations</A></H3>This section =
will=20
review the most common operations you will perform on your Kafka =
cluster. All of=20
the tools reviewed in this section are available under the =
<CODE>bin/</CODE>=20
directory of the Kafka distribution and each tool will print details on =
all=20
possible commandline options if it is run with no arguments.    =20
<H4><A id=3D"basic_ops_add_topic">Adding and removing topics</A></H4>You =
have the=20
option of either adding topics manually or having them be created =
automatically=20
when data is first published to a non-existent topic. If topics are =
auto-created=20
then you may want to tune the default <A =
href=3D"https://kafka.apache.org/documentation.html#topic-config">topic=20
configurations</A> used for auto-created topics.=20
<P>Topics are added and modified using the topic tool:=20
<PRE> &gt; bin/kafka-topics.sh --zookeeper zk_host:port/chroot --create =
--topic my_topic_name =0A=
       --partitions 20 --replication-factor 3 --config x=3Dy=0A=
</PRE>
The replication factor controls how many servers will replicate each =
message=20
that is written. If you have a replication factor of 3 then up to 2 =
servers can=20
fail before you will lose access to your data. We recommend you use a=20
replication factor of 2 or 3 so that you can transparently bounce =
machines=20
without interrupting data consumption.=20
<P>The partition count controls how many logs the topic will be sharded =
into.=20
There are several impacts of the partition count. First each partition =
must fit=20
entirely on a single server. So if you have 20 partitions the full data =
set (and=20
read and write load) will be handled by no more than 20 servers (no =
counting=20
replicas). Finally the partition count impacts the maximum parallelism =
of your=20
consumers. This is discussed in greater detail in the <A =
href=3D"https://kafka.apache.org/documentation.html#intro_consumers">conc=
epts=20
section</A>.=20
<P>The configurations added on the command line override the default =
settings=20
the server has for things like the length of time data should be =
retained. The=20
complete set of per-topic configurations is documented <A =
href=3D"https://kafka.apache.org/documentation.html#topic-config">here</A=
>.=20
<H4><A id=3D"basic_ops_modify_topic">Modifying topics</A></H4>You can =
change the=20
configuration or partitioning of a topic using the same topic tool.=20
<P>To add partitions you can do=20
<PRE> &gt; bin/kafka-topics.sh --zookeeper zk_host:port/chroot --alter =
--topic my_topic_name =0A=
       --partitions 40 =0A=
</PRE>
Be aware that one use case for partitions is to semantically partition =
data, and=20
adding partitions doesn't change the partitioning of existing data so =
this may=20
disturb consumers if they rely on that partition. That is if data is =
partitioned=20
by <CODE>hash(key) % number_of_partitions</CODE> then this partitioning =
will=20
potentially be shuffled by adding partitions but Kafka will not attempt =
to=20
automatically redistribute data in any way.=20
<P>To add configs:=20
<PRE> &gt; bin/kafka-topics.sh --zookeeper zk_host:port/chroot --alter =
--topic my_topic_name --config x=3Dy=0A=
</PRE>
To remove a config:=20
<PRE> &gt; bin/kafka-topics.sh --zookeeper zk_host:port/chroot --alter =
--topic my_topic_name --deleteConfig x=0A=
</PRE>
And finally deleting a topic:=20
<PRE> &gt; bin/kafka-topics.sh --zookeeper zk_host:port/chroot --delete =
--topic my_topic_name=0A=
</PRE>
WARNING: Delete topic functionality is beta in 0.8.1. Please report any =
bugs=20
that you encounter on the <A =
href=3D"mailto:%20users@kafka.apache.org">mailing=20
list</A> or <A =
href=3D"https://issues.apache.org/jira/browse/KAFKA">JIRA</A>.=20
<P>Kafka does not currently support reducing the number of partitions =
for a=20
topic or changing the replication factor.=20
<H4><A id=3D"basic_ops_restarting">Graceful shutdown</A></H4>The Kafka =
cluster=20
will automatically detect any broker shutdown or failure and elect new =
leaders=20
for the partitions on that machine. This will occur whether a server =
fails or it=20
is brought down intentionally for maintenance or configuration changes. =
For the=20
later cases Kafka supports a more graceful mechanism for stoping a =
server then=20
just killing it. When a server is stopped gracefully it has two =
optimizations it=20
will take advantage of:=20
<OL>
  <LI>It will sync all its logs to disk to avoid needing to do any log =
recovery=20
  when it restarts (i.e. validating the checksum for all messages in the =
tail of=20
  the log). Log recovery takes time so this speeds up intentional =
restarts.    =20
  <LI>It will migrate any partitions the server is the leader for to =
other=20
  replicas prior to shutting down. This will make the leadership =
transfer faster=20
  and minimize the time each partition is unavailable to a few =
milliseconds.=20
  </LI></OL>Syncing the logs will happen automatically happen whenever =
the server=20
is stopped other than by a hard kill, but the controlled leadership =
migration=20
requires using a special setting:=20
<PRE>    controlled.shutdown.enable=3Dtrue=0A=
</PRE>Note that controlled shutdown=20
will only succeed if <I>all</I> the partitions hosted on the broker have =

replicas (i.e. the replication factor is greater than 1 <I>and</I> at =
least one=20
of these replicas is alive). This is generally what you want since =
shutting down=20
the last replica would make that topic partition unavailable.=20
<H4><A id=3D"basic_ops_leader_balancing">Balancing =
leadership</A></H4>Whenever a=20
broker stops or crashes leadership for that broker's partitions =
transfers to=20
other replicas. This means that by default when the broker is restarted =
it will=20
only be a follower for all its partitions, meaning it will not be used =
for=20
client reads and writes.=20
<P>To avoid this imbalance, Kafka has a notion of preferred replicas. If =
the=20
list of replicas for a partition is 1,5,9 then node 1 is preferred as =
the leader=20
to either node 5 or 9 because it is earlier in the replica list. You can =
have=20
the Kafka cluster try to restore leadership to the restored replicas by =
running=20
the command:=20
<PRE> &gt; bin/kafka-preferred-replica-election.sh --zookeeper =
zk_host:port/chroot=0A=
</PRE>
Since running this command can be tedious you can also configure Kafka =
to do=20
this automatically by setting the following configuration:=20
<PRE>    auto.leader.rebalance.enable=3Dtrue=0A=
</PRE>
<H4><A id=3D"basic_ops_mirror_maker">Mirroring data between =
clusters</A></H4>We=20
refer to the process of replicating data <I>between</I> Kafka clusters=20
"mirroring" to avoid confusion with the replication that happens amongst =
the=20
nodes in a single cluster. Kafka comes with a tool for mirroring data =
between=20
Kafka clusters. The tool reads from one or more source clusters and =
writes to a=20
destination cluster, like this:=20
<P><IMG src=3D"https://kafka.apache.org/images/mirror-maker.png">=20
<P>A common use case for this kind of mirroring is to provide a replica =
in=20
another datacenter. This scenario will be discussed in more detail in =
the next=20
section.=20
<P>You can run many such mirroring processes to increase throughput and =
for=20
fault-tolerance (if one process dies, the others will take overs the =
additional=20
load).=20
<P>Data will be read from topics in the source cluster and written to a =
topic=20
with the same name in the destination cluster. In fact the mirror maker =
is=20
little more than a Kafka consumer and producer hooked together.=20
<P>The source and destination clusters are completely independent =
entities: they=20
can have different numbers of partitions and the offsets will not be the =
same.=20
For this reason the mirror cluster is not really intended as a =
fault-tolerance=20
mechanism (as the consumer position will be different); for that we =
recommend=20
using normal in-cluster replication. The mirror maker process will, =
however,=20
retain and use the message key for partitioning so order is preserved on =
a=20
per-key basis.=20
<P>Here is an example showing how to mirror a single topic (named=20
<I>my-topic</I>) from two input clusters:=20
<PRE> &gt; bin/kafka-run-class.sh kafka.tools.MirrorMaker=0A=
       --consumer.config consumer-1.properties --consumer.config =
consumer-2.properties =0A=
       --producer.config producer.properties --whitelist my-topic=0A=
</PRE>
Note that we specify the list of topics with the =
<CODE>--whitelist</CODE>=20
option. This option allows any regular expression using <A =
href=3D"http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.=
html">Java-style=20
regular expressions</A>. So you could mirror two topics named <I>A</I> =
and=20
<I>B</I> using <CODE>--whitelist 'A|B'</CODE>. Or you could mirror =
<I>all</I>=20
topics using <CODE>--whitelist '*'</CODE>. Make sure to quote any =
regular=20
expression to ensure the shell doesn't try to expand it as a file path. =
For=20
convenience we allow the use of ',' instead of '|' to specify a list of =
topics.=20
<P>Sometime it is easier to say what it is that you <I>don't</I> want. =
Instead=20
of using <CODE>--whitelist</CODE> to say what you want to mirror you can =
use=20
<CODE>--blacklist</CODE> to say what to exclude. This also takes a =
regular=20
expression argument.=20
<P>Combining mirroring with the configuration=20
<CODE>auto.create.topics.enable=3Dtrue</CODE> makes it possible to have =
a replica=20
cluster that will automatically create and replicate all data in a =
source=20
cluster even as new topics are added.=20
<H4><A id=3D"basic_ops_consumer_lag">Checking consumer =
position</A></H4>Sometimes=20
it's useful to see the position of your consumers. We have a tool that =
will show=20
the position of all consumers in a consumer group as well as how far =
behind the=20
end of the log they are. To run this tool on a consumer group named=20
<I>my-group</I> consuming a topic named <I>my-topic</I> would look like =
this:=20
<PRE> &gt; bin/kafka-run-class.sh kafka.tools.ConsumerOffsetChecker =
--zkconnect localhost:2181 --group test=0A=
Group           Topic                          Pid Offset          =
logSize         Lag             Owner=0A=
my-group        my-topic                       0   0               0     =
          0               test_jkreps-mn-1394154511599-60744496-0=0A=
my-group        my-topic                       1   0               0     =
          0               test_jkreps-mn-1394154521217-1a0be913-0=0A=
</PRE>
<H4><A id=3D"basic_ops_cluster_expansion">Expanding your =
cluster</A></H4>Adding=20
servers to a Kafka cluster is easy, just assign them a unique broker id =
and=20
start up Kafka on your new servers. However these new servers will not=20
automatically be assigned any data partitions, so unless partitions are =
moved to=20
them they won't be doing any work until new topics are created. So =
usually when=20
you add machines to your cluster you will want to migrate some existing =
data to=20
these machines.=20
<P>The process of migrating data is manually initiated but fully =
automated.=20
Under the covers what happens is that Kafka will add the new server as a =

follower of the partition it is migrating and allow it to fully =
replicate the=20
existing data in that partition. When the new server has fully =
replicated the=20
contents of this partition and joined the in-sync replica one of the =
existing=20
replicas will delete their partition's data.=20
<P>The partition reassignment tool can be used to move partitions across =

brokers. An ideal partition distribution would ensure even data load and =

partition sizes across all brokers. In 0.8.1, the partition reassignment =
tool=20
does not have the capability to automatically study the data =
distribution in a=20
Kafka cluster and move partitions around to attain an even load =
distribution. As=20
such, the admin has to figure out which topics or partitions should be =
moved=20
around. =20
<P>The partition reassignment tool can run in 3 mutually exclusive modes =
-=20
<UL>
  <LI>--generate: In this mode, given a list of topics and a list of =
brokers,=20
  the tool generates a candidate reassignment to move all partitions of =
the=20
  specified topics to the new brokers. This option merely provides a =
convenient=20
  way to generate a partition reassignment plan given a list of topics =
and=20
  target brokers.</LI>
  <LI>--execute: In this mode, the tool kicks off the reassignment of =
partitions=20
  based on the user provided reassignment plan. (using the=20
  --reassignment-json-file option). This can either be a custom =
reassignment=20
  plan hand crafted by the admin or provided by using the --generate =
option</LI>
  <LI>--verify: In this mode, the tool verifies the status of the =
reassignment=20
  for all partitions listed during the last --execute. The status can be =
either=20
  of successfully completed, failed or in progress</LI></UL>
<H5>Automatically migrating data to new machines</H5>The partition =
reassignment=20
tool can be used to move some topics off of the current set of brokers =
to the=20
newly added brokers. This is typically useful while expanding an =
existing=20
cluster since it is easier to move entire topics to the new set of =
brokers, than=20
moving one partition at a time. When used to do this, the user should =
provide a=20
list of topics that should be moved to the new set of brokers and a =
target list=20
of new brokers. The tool then evenly distributes all partitions for the =
given=20
list of topics across the new set of brokers. During this move, the =
replication=20
factor of the topic is kept constant. Effectively the replicas for all=20
partitions for the input list of topics are moved from the old set of =
brokers to=20
the newly added brokers. =20
<P>For instance, the following example will move all partitions for =
topics=20
foo1,foo2 to the new set of brokers 5,6. At the end of this move, all =
partitions=20
for topics foo1 and foo2 will <I>only</I> exist on brokers 5,6=20
<P>Since, the tool accepts the input list of topics as a json file, you =
first=20
need to identify the topics you want to move and create the json file as =

follows-=20
<PRE>&gt; cat topics-to-move.json=0A=
{"topics": [{"topic": "foo1"},=0A=
            {"topic": "foo2"}],=0A=
 "version":1=0A=
}=0A=
</PRE>
Once the json file is ready, use the partition reassignment tool to =
generate a=20
candidate assignment-=20
<PRE>&gt; bin/kafka-reassign-partitions.sh --zookeeper localhost:2181 =
--topics-to-move-json-file topics-to-move.json --broker-list "5,6" =
--generate =0A=
Current partition replica assignment=0A=
=0A=
{"version":1,=0A=
 "partitions":[{"topic":"foo1","partition":2,"replicas":[1,2]},=0A=
               {"topic":"foo1","partition":0,"replicas":[3,4]},=0A=
               {"topic":"foo2","partition":2,"replicas":[1,2]},=0A=
               {"topic":"foo2","partition":0,"replicas":[3,4]},=0A=
               {"topic":"foo1","partition":1,"replicas":[2,3]},=0A=
               {"topic":"foo2","partition":1,"replicas":[2,3]}]=0A=
}=0A=
=0A=
Proposed partition reassignment configuration=0A=
=0A=
{"version":1,=0A=
 "partitions":[{"topic":"foo1","partition":2,"replicas":[5,6]},=0A=
               {"topic":"foo1","partition":0,"replicas":[5,6]},=0A=
               {"topic":"foo2","partition":2,"replicas":[5,6]},=0A=
               {"topic":"foo2","partition":0,"replicas":[5,6]},=0A=
               {"topic":"foo1","partition":1,"replicas":[5,6]},=0A=
               {"topic":"foo2","partition":1,"replicas":[5,6]}]=0A=
}=0A=
</PRE>
<P>The tool generates a candidate assignment that will move all =
partitions from=20
topics foo1,foo2 to brokers 5,6. Note, however, that at this point, the=20
partition movement has not started, it merely tells you the current =
assignment=20
and the proposed new assignment. The current assignment should be saved =
in case=20
you want to rollback to it. The new assignment should be saved in a json =
file=20
(e.g. expand-cluster-reassignment.json) to be input to the tool with the =

--execute option as follows-=20
<PRE>&gt; bin/kafka-reassign-partitions.sh --zookeeper localhost:2181 =
--reassignment-json-file expand-cluster-reassignment.json --execute=0A=
Current partition replica assignment=0A=
=0A=
{"version":1,=0A=
 "partitions":[{"topic":"foo1","partition":2,"replicas":[1,2]},=0A=
               {"topic":"foo1","partition":0,"replicas":[3,4]},=0A=
               {"topic":"foo2","partition":2,"replicas":[1,2]},=0A=
               {"topic":"foo2","partition":0,"replicas":[3,4]},=0A=
               {"topic":"foo1","partition":1,"replicas":[2,3]},=0A=
               {"topic":"foo2","partition":1,"replicas":[2,3]}]=0A=
}=0A=
=0A=
Save this to use as the --reassignment-json-file option during rollback=0A=
Successfully started reassignment of partitions=0A=
{"version":1,=0A=
 "partitions":[{"topic":"foo1","partition":2,"replicas":[5,6]},=0A=
               {"topic":"foo1","partition":0,"replicas":[5,6]},=0A=
               {"topic":"foo2","partition":2,"replicas":[5,6]},=0A=
               {"topic":"foo2","partition":0,"replicas":[5,6]},=0A=
               {"topic":"foo1","partition":1,"replicas":[5,6]},=0A=
               {"topic":"foo2","partition":1,"replicas":[5,6]}]=0A=
}=0A=
</PRE>
<P>Finally, the --verify option can be used with the tool to check the =
status of=20
the partition reassignment. Note that the same =
expand-cluster-reassignment.json=20
(used with the --execute option) should be used with the --verify option =

<PRE>&gt; bin/kafka-reassign-partitions.sh --zookeeper localhost:2181 =
--reassignment-json-file expand-cluster-reassignment.json --verify=0A=
Status of partition reassignment:=0A=
Reassignment of partition [foo1,0] completed successfully=0A=
Reassignment of partition [foo1,1] is in progress=0A=
Reassignment of partition [foo1,2] is in progress=0A=
Reassignment of partition [foo2,0] completed successfully=0A=
Reassignment of partition [foo2,1] completed successfully =0A=
Reassignment of partition [foo2,2] completed successfully =0A=
</PRE>
<H5>Custom partition assignment and migration</H5>The partition =
reassignment=20
tool can also be used to selectively move replicas of a partition to a =
specific=20
set of brokers. When used in this manner, it is assumed that the user =
knows the=20
reassignment plan and does not require the tool to generate a candidate=20
reassignment, effectively skipping the --generate step and moving =
straight to=20
the --execute step=20
<P>For instance, the following example moves partition 0 of topic foo1 =
to=20
brokers 5,6 and partition 1 of topic foo2 to brokers 2,3=20
<P>The first step is to hand craft the custom reassignment plan in a =
json file-=20
<PRE>&gt; cat custom-reassignment.json=0A=
{"version":1,"partitions":[{"topic":"foo1","partition":0,"replicas":[5,6]=
},{"topic":"foo2","partition":1,"replicas":[2,3]}]}=0A=
</PRE>
Then, use the json file with the --execute option to start the =
reassignment=20
process-=20
<PRE>&gt; bin/kafka-reassign-partitions.sh --zookeeper localhost:2181 =
--reassignment-json-file custom-reassignment.json --execute=0A=
Current partition replica assignment=0A=
=0A=
{"version":1,=0A=
 "partitions":[{"topic":"foo1","partition":0,"replicas":[1,2]},=0A=
               {"topic":"foo2","partition":1,"replicas":[3,4]}]=0A=
}=0A=
=0A=
Save this to use as the --reassignment-json-file option during rollback=0A=
Successfully started reassignment of partitions=0A=
{"version":1,=0A=
 "partitions":[{"topic":"foo1","partition":0,"replicas":[5,6]},=0A=
               {"topic":"foo2","partition":1,"replicas":[2,3]}]=0A=
}=0A=
</PRE>
<P>The --verify option can be used with the tool to check the status of =
the=20
partition reassignment. Note that the same =
expand-cluster-reassignment.json=20
(used with the --execute option) should be used with the --verify option =

<PRE>bin/kafka-reassign-partitions.sh --zookeeper localhost:2181 =
--reassignment-json-file custom-reassignment.json --verify=0A=
Status of partition reassignment:=0A=
Reassignment of partition [foo1,0] completed successfully=0A=
Reassignment of partition [foo2,1] completed successfully =0A=
</PRE>
<H4><A id=3D"basic_ops_decommissioning_brokers">Decommissioning =
brokers</A></H4>
The partition reassignment tool does not have the ability to =
automatically=20
generate a reassignment plan for decommissioning brokers yet. As such, =
the admin=20
has to come up with a reassignment plan to move the replica for all =
partitions=20
hosted on the broker to be decommissioned, to the rest of the brokers. =
This can=20
be relatively tedious as the reassignment needs to ensure that all the =
replicas=20
are not moved from the decommissioned broker to only one other broker. =
To make=20
this process effortless, we plan to add tooling support for =
decommissioning=20
brokers in 0.8.2.=20
<H4><A id=3D"basic_ops_increase_replication_factor">Increasing =
replication=20
factor</A></H4>Increasing the replication factor of an existing =
partition is=20
easy. Just specify the extra replicas in the custom reassignment json =
file and=20
use it with the --execute option to increase the replication factor of =
the=20
specified partitions. =20
<P>For instance, the following example increases the replication factor =
of=20
partition 0 of topic foo from 1 to 3. Before increasing the replication =
factor,=20
the partition's only replica existed on broker 5. As part of increasing =
the=20
replication factor, we will add more replicas on brokers 6 and 7.=20
<P>The first step is to hand craft the custom reassignment plan in a =
json file-=20
<PRE>&gt; cat increase-replication-factor.json=0A=
{"version":1,=0A=
 "partitions":[{"topic":"foo","partition":0,"replicas":[5,6,7]}]}=0A=
</PRE>
Then, use the json file with the --execute option to start the =
reassignment=20
process-=20
<PRE>&gt; bin/kafka-reassign-partitions.sh --zookeeper localhost:2181 =
--reassignment-json-file increase-replication-factor.json --execute=0A=
Current partition replica assignment=0A=
=0A=
{"version":1,=0A=
 "partitions":[{"topic":"foo","partition":0,"replicas":[5]}]}=0A=
=0A=
Save this to use as the --reassignment-json-file option during rollback=0A=
Successfully started reassignment of partitions=0A=
{"version":1,=0A=
 "partitions":[{"topic":"foo","partition":0,"replicas":[5,6,7]}]}=0A=
</PRE>
<P>The --verify option can be used with the tool to check the status of =
the=20
partition reassignment. Note that the same =
increase-replication-factor.json=20
(used with the --execute option) should be used with the --verify option =

<PRE>bin/kafka-reassign-partitions.sh --zookeeper localhost:2181 =
--reassignment-json-file increase-replication-factor.json --verify=0A=
Status of partition reassignment:=0A=
Reassignment of partition [foo,0] completed successfully=0A=
</PRE>
You can also verify the increase in replication factor with the =
kafka-topics=20
tool-=20
<PRE>&gt; bin/kafka-topics.sh --zookeeper localhost:2181 --topic foo =
--describe=0A=
Topic:foo	PartitionCount:1	ReplicationFactor:3	Configs:=0A=
	Topic: foo	Partition: 0	Leader: 5	Replicas: 5,6,7	Isr: 5,6,7=0A=
</PRE>
<H3><A id=3D"datacenters">6.2 Datacenters</A></H3>Some deployments will =
need to=20
manage a data pipeline that spans multiple datacenters. Our recommended =
approach=20
to this is to deploy a local Kafka cluster in each datacenter with =
application=20
instances in each datacenter interacting only with their local cluster =
and=20
mirroring between clusters (see the documentation on the <A =
href=3D"https://kafka.apache.org/documentation.html#basic_ops_mirror_make=
r">mirror=20
maker tool</A> for how to do this).=20
<P>This deployment pattern allows datacenters to act as independent =
entities and=20
allows us to manage and tune inter-datacenter replication centrally. =
This allows=20
each facility to stand alone and operate even if the inter-datacenter =
links are=20
unavailable: when this occurs the mirroring falls behind until the link =
is=20
restored at which time it catches up.=20
<P>For applications that need a global view of all data you can use =
mirroring to=20
provide clusters which have aggregate data mirrored from the local =
clusters in=20
<I>all</I> datacenters. These aggregate clusters are used for reads by=20
applications that require the full data set.=20
<P>This is not the only possible deployment pattern. It is possible to =
read from=20
or write to a remote Kafka cluster over the WAN, though obviously this =
will add=20
whatever latency is required to get the cluster.=20
<P>Kafka naturally batches data in both the producer and consumer so it =
can=20
achieve high-throughput even over a high-latency connection. To allow =
this=20
though it may be necessary to increase the TCP socket buffer sizes for =
the=20
producer, consumer, and broker using the =
<CODE>socket.send.buffer.bytes</CODE>=20
and <CODE>socket.receive.buffer.bytes</CODE> configurations. The =
appropriate way=20
to set this is documented <A =
href=3D"http://en.wikipedia.org/wiki/Bandwidth-delay_product">here</A>.=20
   =20
<P>It is generally <I>not</I> advisable to run a <I>single</I> Kafka =
cluster=20
that spans multiple datacenters over a high-latency link. This will =
incur very=20
high replication latency both for Kafka writes and ZooKeeper writes, and =
neither=20
Kafka nor ZooKeeper will remain available in all locations if the =
network=20
between locations is unavailable.=20
<H3><A id=3D"config">6.3 Kafka Configuration</A></H3>
<H4><A id=3D"clientconfig">Important Client Configurations</A></H4>The =
most=20
important producer configurations control=20
<UL>
  <LI>compression</LI>
  <LI>sync vs async production</LI>
  <LI>batch size (for async producers)</LI></UL>The most important =
consumer=20
configuration is the fetch size.=20
<P>All configurations are documented in the <A =
href=3D"https://kafka.apache.org/documentation.html#configuration">config=
uration</A>=20
section.=20
<P>
<H4><A id=3D"prodconfig">A Production Server Config</A></H4>Here is our =
server=20
production server configuration:=20
<PRE># Replication configurations=0A=
num.replica.fetchers=3D4=0A=
replica.fetch.max.bytes=3D1048576=0A=
replica.fetch.wait.max.ms=3D500=0A=
replica.high.watermark.checkpoint.interval.ms=3D5000=0A=
replica.socket.timeout.ms=3D30000=0A=
replica.socket.receive.buffer.bytes=3D65536=0A=
replica.lag.time.max.ms=3D10000=0A=
replica.lag.max.messages=3D4000=0A=
=0A=
controller.socket.timeout.ms=3D30000=0A=
controller.message.queue.size=3D10=0A=
=0A=
# Log configuration=0A=
num.partitions=3D8=0A=
message.max.bytes=3D1000000=0A=
auto.create.topics.enable=3Dtrue=0A=
log.index.interval.bytes=3D4096=0A=
log.index.size.max.bytes=3D10485760=0A=
log.retention.hours=3D168=0A=
log.flush.interval.ms=3D10000=0A=
log.flush.interval.messages=3D20000=0A=
log.flush.scheduler.interval.ms=3D2000=0A=
log.roll.hours=3D168=0A=
log.cleanup.interval.mins=3D30=0A=
log.segment.bytes=3D1073741824=0A=
=0A=
# ZK configuration=0A=
zk.connection.timeout.ms=3D6000=0A=
zk.sync.time.ms=3D2000=0A=
=0A=
# Socket server configuration=0A=
num.io.threads=3D8=0A=
num.network.threads=3D8=0A=
socket.request.max.bytes=3D104857600=0A=
socket.receive.buffer.bytes=3D1048576=0A=
socket.send.buffer.bytes=3D1048576=0A=
queued.max.requests=3D16=0A=
fetch.purgatory.purge.interval.requests=3D100=0A=
producer.purgatory.purge.interval.requests=3D100=0A=
</PRE>Our=20
client configuration varies a fair amount between different use cases.=20
<H3><A id=3D"java">Java Version</A></H3>We're currently running JDK 1.7 =
u51, and=20
we've switched over to the G1 collector. If you do this (and we highly =
recommend=20
it), make sure you're on u51. We tried out u21 in testing, but we had a =
number=20
of problems with the GC implementation in that version. Our tuning looks =
like=20
this:=20
<PRE>-Xms4g -Xmx4g -XX:PermSize=3D48m -XX:MaxPermSize=3D48m -XX:+UseG1GC=0A=
-XX:MaxGCPauseMillis=3D20 -XX:InitiatingHeapOccupancyPercent=3D35=0A=
</PRE>
For reference, here are the stats on one of LinkedIn's busiest clusters =
(at=20
peak):        - 15 brokers        - 15.5k partitions (replication factor =
2)     =20
  - 400k messages/sec in        - 70 MB/sec inbound, 400 MB/sec+ =
outbound The=20
tuning looks fairly aggressive, but all of the brokers in that cluster =
have a=20
90% GC pause time of about 21ms, and they're doing less than 1 young GC =
per=20
second.	=20
<H3><A id=3D"hwandos">6.4 Hardware and OS</A></H3>We are using dual =
quad-core=20
Intel Xeon machines with 24GB of memory.=20
<P>You need sufficient memory to buffer active readers and writers. You =
can do a=20
back-of-the-envelope estimate of memory needs by assuming you want to be =
able to=20
buffer for 30 seconds and compute your memory need as =
write_throughput*30.=20
<P>The disk throughput is important. We have 8x7200 rpm SATA drives. In =
general=20
disk throughput is the performance bottleneck, and more disks is more =
better.=20
Depending on how you configure flush behavior you may or may not benefit =
from=20
more expensive disks (if you force flush often then higher RPM SAS =
drives may be=20
better).=20
<H4><A id=3D"os">OS</A></H4>Kafka should run well on any unix system and =
has been=20
tested on Linux and Solaris.=20
<P>We have seen a few issues running on Windows and Windows is not =
currently a=20
well supported platform though we would be happy to change that.=20
<P>You likely don't need to do much OS-level tuning though there are a =
few=20
things that will help performance. =20
<P>Two configurations that may be important:=20
<UL>
  <LI>We upped the number of file descriptors since we have lots of =
topics and=20
  lots of connections.    =20
  <LI>We upped the max socket buffer size to enable high-performance =
data=20
  transfer between data centers <A =
href=3D"http://www.psc.edu/index.php/networking/641-tcp-tune">described=20
  here</A>. </LI></UL>
<H4><A id=3D"diskandfs">Disks and Filesystem</A></H4>We recommend using =
multiple=20
drives to get good throughput and not sharing the same drives used for =
Kafka=20
data with application logs or other OS filesystem activity to ensure =
good=20
latency. As of 0.8 you can either RAID these drives together into a =
single=20
volume or format and mount each drive as its own directory. Since Kafka =
has=20
replication the redundancy provided by RAID can also be provided at the=20
application level. This choice has several tradeoffs.=20
<P>If you configure multiple data directories partitions will be =
assigned=20
round-robin to data directories. Each partition will be entirely in one =
of the=20
data directories. If data is not well balanced among partitions this can =
lead to=20
load imbalance between disks.=20
<P>RAID can potentially do better at balancing load between disks =
(although it=20
doesn't always seem to) because it balances load at a lower level. The =
primary=20
downside of RAID is that it is usually a big performance hit for write=20
throughput and reduces the available disk space.=20
<P>Another potential benefit of RAID is the ability to tolerate disk =
failures.=20
However our experience has been that rebuilding the RAID array is so I/O =

intensive that it effectively disables the server, so this does not =
provide much=20
real availability improvement.=20
<H4><A id=3D"appvsosflush">Application vs. OS Flush =
Management</A></H4>Kafka=20
always immediately writes all data to the filesystem and supports the =
ability to=20
configure the flush policy that controls when data is forced out of the =
OS cache=20
and onto disk using the and flush. This flush policy can be controlled =
to force=20
data to disk after a period of time or after a certain number of =
messages has=20
been written. There are several choices in this configuration.=20
<P>Kafka must eventually call fsync to know that data was flushed. When=20
recovering from a crash for any log segment not known to be fsync'd =
Kafka will=20
check the integrity of each message by checking its CRC and also rebuild =
the=20
accompanying offset index file as part of the recovery process executed =
on=20
startup.=20
<P>Note that durability in Kafka does not require syncing data to disk, =
as a=20
failed node will always recover from its replicas.=20
<P>We recommend using the default flush settings which disable =
application fsync=20
entirely. This means relying on the background flush done by the OS and =
Kafka's=20
own background flush. This provides the best of all worlds for most =
uses: no=20
knobs to tune, great throughput and latency, and full recovery =
guarantees. We=20
generally feel that the guarantees provided by replication are stronger =
than=20
sync to local disk, however the paranoid still may prefer having both =
and=20
application level fsync policies are still supported.=20
<P>The drawback of using application level flush settings are that this =
is less=20
efficient in it's disk usage pattern (it gives the OS less leeway to =
re-order=20
writes) and it can introduce latency as fsync in most Linux filesystems =
blocks=20
writes to the file whereas the background flushing does much more =
granular=20
page-level locking.=20
<P>In general you don't need to do any low-level tuning of the =
filesystem, but=20
in the next few sections we will go over some of this in case it is =
useful.=20
<H4><A id=3D"linuxflush">Understanding Linux OS Flush =
Behavior</A></H4>In Linux,=20
data written to the filesystem is maintained in <A =
href=3D"http://en.wikipedia.org/wiki/Page_cache">pagecache</A>=20
until it must be written out to disk (due to an application-level fsync =
or the=20
OS's own flush policy). The flushing of data is done by a set of =
background=20
threads called pdflush (or in post 2.6.32 kernels "flusher threads").=20
<P>Pdflush has a configurable policy that controls how much dirty data =
can be=20
maintained in cache and for how long before it must be written back to =
disk.=20
This policy is described <A =
href=3D"http://www.westnet.com/~gsmith/content/linux-pdflush.htm">here</A=
>.=20
When Pdflush cannot keep up with the rate of data being written it will=20
eventually cause the writing process to block incurring latency in the =
writes to=20
slow down the accumulation of data.=20
<P>You can see the current state of OS memory usage by doing=20
<PRE>  &gt; cat /proc/meminfo=0A=
</PRE>The meaning of these values are described in=20
the link above.=20
<P>Using pagecache has several advantages over an in-process cache for =
storing=20
data that will be written out to disk:=20
<UL>
  <LI>The I/O scheduler will batch together consecutive small writes =
into bigger=20
  physical writes which improves throughput.  =20
  <LI>The I/O scheduler will attempt to re-sequence writes to minimize =
movement=20
  of the disk head which improves throughput.  =20
  <LI>It automatically uses all the free memory on the machine =
</LI></UL>
<H4><A id=3D"ext4">Ext4 Notes</A></H4>Ext4 may or may not be the best =
filesystem=20
for Kafka. Filesystems like XFS supposedly handle locking during fsync =
better.=20
We have only tried Ext4, though.=20
<P>It is not necessary to tune these settings, however those wanting to =
optimize=20
performance have a few knobs that will help:=20
<UL>
  <LI>data=3Dwriteback: Ext4 defaults to data=3Dordered which puts a =
strong order on=20
  some writes. Kafka does not require this ordering as it does very =
paranoid=20
  data recovery on all unflushed log. This setting removes the ordering=20
  constraint and seems to significantly reduce latency.  =20
  <LI>Disabling journaling: Journaling is a tradeoff: it makes reboots =
faster=20
  after server crashes but it introduces a great deal of additional =
locking=20
  which adds variance to write performance. Those who don't care about =
reboot=20
  time and want to reduce a major source of write latency spikes can =
turn off=20
  journaling entirely.  =20
  <LI>commit=3Dnum_secs: This tunes the frequency with which ext4 =
commits to its=20
  metadata journal. Setting this to a lower value reduces the loss of =
unflushed=20
  data during a crash. Setting this to a higher value will improve =
throughput.  =20
  <LI>nobh: This setting controls additional ordering guarantees when =
using=20
  data=3Dwriteback mode. This should be safe with Kafka as we do not =
depend on=20
  write ordering and improves throughput and latency.  =20
  <LI>delalloc: Delayed allocation means that the filesystem avoid =
allocating=20
  any blocks until the physical write occurs. This allows ext4 to =
allocate a=20
  large extent instead of smaller pages and helps ensure the data is =
written=20
  sequentially. This feature is great for throughput. It does seem to =
involve=20
  some locking in the filesystem which adds a bit of latency variance. =
</LI></UL>
<H3><A id=3D"monitoring">6.6 Monitoring</A></H3>Kafka uses Yammer =
Metrics for=20
metrics reporting in both the server and the client. This can be =
configured to=20
report stats using pluggable stats reporters to hook up to your =
monitoring=20
system.=20
<P>The easiest way to see the available metrics to fire up jconsole and =
point it=20
at a running kafka client or server; this will all browsing all metrics =
with=20
JMX.=20
<P>We pay particular we do graphing and alerting on the following =
metrics:=20
<TABLE class=3D"data-table">
  <TBODY>
  <TR>
    <TH>Description</TH>
    <TH>Mbean name</TH>
    <TH>Normal value</TH></TR>
  <TR>
    <TD>Message in rate</TD>
    =
<TD>"kafka.server":name=3D"AllTopicsMessagesInPerSec",type=3D"BrokerTopic=
Metrics"</TD>
    <TD></TD></TR>
  <TR>
    <TD>Byte in rate</TD>
    =
<TD>"kafka.server":name=3D"AllTopicsBytesInPerSec",type=3D"BrokerTopicMet=
rics"</TD>
    <TD></TD></TR>
  <TR>
    <TD>Request rate</TD>
    =
<TD>"kafka.network":name=3D"{Produce|Fetch-consumer|Fetch-follower}-Reque=
stsPerSec",type=3D"RequestMetrics"</TD>
    <TD></TD></TR>
  <TR>
    <TD>Byte out rate</TD>
    =
<TD>"kafka.server":name=3D"AllTopicsBytesOutPerSec",type=3D"BrokerTopicMe=
trics"</TD>
    <TD></TD></TR>
  <TR>
    <TD>Log flush rate and time</TD>
    =
<TD>"kafka.log":name=3D"LogFlushRateAndTimeMs",type=3D"LogFlushStats"</TD=
>
    <TD></TD></TR>
  <TR>
    <TD># of under replicated partitions (|ISR| &lt; |all =
replicas|)</TD>
    =
<TD>"kafka.server":name=3D"UnderReplicatedPartitions",type=3D"ReplicaMana=
ger"</TD>
    <TD>0</TD></TR>
  <TR>
    <TD>Is controller active on broker</TD>
    =
<TD>"kafka.controller":name=3D"ActiveControllerCount",type=3D"KafkaContro=
ller"</TD>
    <TD>only one broker in the cluster should have 1</TD></TR>
  <TR>
    <TD>Leader election rate</TD>
    =
<TD>"kafka.controller":name=3D"LeaderElectionRateAndTimeMs",type=3D"Contr=
ollerStats"</TD>
    <TD>non-zero when there are broker failures</TD></TR>
  <TR>
    <TD>Unclean leader election rate</TD>
    =
<TD>"kafka.controller":name=3D"UncleanLeaderElectionsPerSec",type=3D"Cont=
rollerStats"</TD>
    <TD>0</TD></TR>
  <TR>
    <TD>Partition counts</TD>
    =
<TD>"kafka.server":name=3D"PartitionCount",type=3D"ReplicaManager"</TD>
    <TD>mostly even across brokers</TD></TR>
  <TR>
    <TD>Leader replica counts</TD>
    <TD>"kafka.server":name=3D"LeaderCount",type=3D"ReplicaManager"</TD>
    <TD>mostly even across brokers</TD></TR>
  <TR>
    <TD>ISR shrink rate</TD>
    =
<TD>"kafka.server":name=3D"ISRShrinksPerSec",type=3D"ReplicaManager"</TD>=

    <TD>If a broker goes down, ISR for some of the partitions will	=
shrink.=20
      When that broker is up again, ISR will be expanded	once the =
replicas are=20
      fully caught up. Other than that, the	expected value for both ISR =
shrink=20
      rate and expansion rate is 0. </TD></TR>
  <TR>
    <TD>ISR expansion rate</TD>
    =
<TD>"kafka.server":name=3D"ISRExpandsPerSec",type=3D"ReplicaManager"</TD>=

    <TD>See above</TD></TR>
  <TR>
    <TD>Max lag in messages btw follower and leader replicas</TD>
    =
<TD>"kafka.server":name=3D"([-.\w]+)-MaxLag",type=3D"ReplicaFetcherManage=
r"</TD>
    <TD>&lt; replica.lag.max.messages</TD></TR>
  <TR>
    <TD>Lag in messages per follower replica</TD>
    =
<TD>"kafka.server":name=3D"([-.\w]+)-ConsumerLag",type=3D"FetcherLagMetri=
cs"</TD>
    <TD>&lt; replica.lag.max.messages</TD></TR>
  <TR>
    <TD>Requests waiting in the producer purgatory</TD>
    =
<TD>"kafka.server":name=3D"PurgatorySize",type=3D"ProducerRequestPurgator=
y"</TD>
    <TD>non-zero if ack=3D-1 is used</TD></TR>
  <TR>
    <TD>Requests waiting in the fetch purgatory</TD>
    =
<TD>"kafka.server":name=3D"PurgatorySize",type=3D"FetchRequestPurgatory"<=
/TD>
    <TD>size depends on fetch.wait.max.ms in the consumer</TD></TR>
  <TR>
    <TD>Request total time</TD>
    =
<TD>"kafka.network":name=3D"{Produce|Fetch-Consumer|Fetch-Follower}-Total=
TimeMs",type=3D"RequestMetrics"</TD>
    <TD>broken into queue, local, remote and response send =
time</TD></TR>
  <TR>
    <TD>Time the request waiting in the request queue</TD>
    =
<TD>"kafka.network":name=3D"{Produce|Fetch-Consumer|Fetch-Follower}-Queue=
TimeMs",type=3D"RequestMetrics"</TD>
    <TD></TD></TR>
  <TR>
    <TD>Time the request being processed at the leader</TD>
    =
<TD>"kafka.network":name=3D"{Produce|Fetch-Consumer|Fetch-Follower}-Local=
TimeMs",type=3D"RequestMetrics"</TD>
    <TD></TD></TR>
  <TR>
    <TD>Time the request waits for the follower</TD>
    =
<TD>"kafka.network":name=3D"{Produce|Fetch-Consumer|Fetch-Follower}-Remot=
eTimeMs",type=3D"RequestMetrics"</TD>
    <TD>non-zero for produce requests when ack=3D-1</TD></TR>
  <TR>
    <TD>Time to send the response</TD>
    =
<TD>"kafka.network":name=3D"{Produce|Fetch-Consumer|Fetch-Follower}-Respo=
nseSendTimeMs",type=3D"RequestMetrics"</TD>
    <TD></TD></TR>
  <TR>
    <TD>Number of messages the consumer lags behind the producer by</TD>
    =
<TD>"kafka.consumer":name=3D"([-.\w]+)-MaxLag",type=3D"ConsumerFetcherMan=
ager"</TD>
    <TD></TD></TR></TBODY></TABLE>We recommend monitor GC time and other =
stats and=20
various server stats such as CPU utilization, I/O service time, etc. On =
the=20
client side, we recommend monitor the message/byte rate (global and per =
topic),=20
request rate/size/time, and on the consumer side, max lag in messages =
among all=20
partitions and min fetch request rate. For a consumer to keep up, max =
lag needs=20
to be less than a threshold and min fetch rate needs to be larger than =
0.=20
<H4>Audit</H4>The final alerting we do is on the correctness of the data =

delivery. We audit that every message that is sent is consumed by all =
consumers=20
and measure the lag for this to occur. For important topics we alert if =
a=20
certain completeness is not achieved in a certain time period. The =
details of=20
this are discussed in KAFKA-260.=20
<H3><A id=3D"zk">6.7 ZooKeeper</A></H3>
<H4><A id=3D"zkversion">Stable version</A></H4>At LinkedIn, we are =
running=20
ZooKeeper 3.3.*. Version 3.3.3 has known serious issues regarding =
ephemeral node=20
deletion and session expirations. After running into those issues in =
production,=20
we upgraded to 3.3.4 and have been running that smoothly for over a year =
now.=20
<H4><A id=3D"zkops">Operationalizing ZooKeeper</A></H4>Operationally, we =
do the=20
following for a healthy ZooKeeper installation:=20
<UL>
  <LI>Redundancy in the physical/hardware/network layout: try not to put =
them=20
  all in the same rack, decent (but don't go nuts) hardware, try to keep =

  redundant power and network paths, etc.</LI>
  <LI>I/O segregation: if you do a lot of write type traffic you'll =
almost=20
  definitely want the transaction logs on a different disk group than=20
  application logs and snapshots (the write to the ZooKeeper service has =
a=20
  synchronous write to disk, which can be slow).</LI>
  <LI>Application segregation: Unless you really understand the =
application=20
  patterns of other apps that you want to install on the same box, it =
can be a=20
  good idea to run ZooKeeper in isolation (though this can be a =
balancing act=20
  with the capabilities of the hardware).</LI>
  <LI>Use care with virtualization: It can work, depending on your =
cluster=20
  layout and read/write patterns and SLAs, but the tiny overheads =
introduced by=20
  the virtualization layer can add up and throw off ZooKeeper, as it can =
be very=20
  time sensitive</LI>
  <LI>ZooKeeper configuration and monitoring: It's java, make sure you =
give it=20
  'enough' heap space (We usually run them with 3-5G, but that's mostly =
due to=20
  the data set size we have here). Unfortunately we don't have a good =
formula=20
  for it. As far as monitoring, both JMZ and the 4 letter commands are =
very=20
  useful, they do overlap in some cases (and in those cases we prefer =
the 4=20
  letter commands, they seem more predictable, or at the very least, =
they work=20
  better with the LI monitoring infrastructure)</LI>
  <LI>Don't overbuild the cluster: large clusters, especially in a write =
heavy=20
  usage pattern, means a lot of intracluster communication (quorums on =
the=20
  writes and subsequent cluster member updates), but don't underbuild it =
(and=20
  risk swamping the cluster).</LI>
  <LI>Try to run on a 3-5 node cluster: ZooKeeper writes use quorums and =

  inherently that means having an odd number of machines in a cluster. =
Remember=20
  that a 5 node cluster will cause writes to slow down compared to a 3 =
node=20
  cluster, but will allow more fault tolerance.</LI></UL>Overall, we try =
to keep=20
the ZooKeeper system as small as will handle the load (plus standard =
growth=20
capacity planning) and as simple as possible. We try not to do anything =
fancy=20
with the configuration or application layout as compared to the official =
release=20
as well as keep it as self contained as possible. For these reasons, we =
tend to=20
skip the OS packaged versions, since it has a tendency to try to put =
things in=20
the OS standard hierarchy, which can be 'messy', for want of a better =
way to=20
word it.		 </DIV>
<DIV id=3D"footer"><A href=3D"http://www.apache.org/"><IMG =
class=3D"feather" alt=3D"Apache Feather"=20
src=3D"http://www.apache.org/images/feather-small.png">			 </A>
		 </DIV></DIV></BODY></HTML>

------=_NextPart_000_0011_01CF9A21.CD190140
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://kafka.apache.org/images/kafka_logo.png

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

------=_NextPart_000_0011_01CF9A21.CD190140
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://kafka.apache.org/images/producer_consumer.png

iVBORw0KGgoAAAANSUhEUgAAAQIAAAC0CAYAAAB/qyKMAAAACXBIWXMAAAsTAAALEwEAmpwYAAAB
1WlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczpt
ZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS4xLjIiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0
dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRl
c2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMu
YWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOkNvbXByZXNzaW9uPjU8L3RpZmY6
Q29tcHJlc3Npb24+CiAgICAgICAgIDx0aWZmOlBob3RvbWV0cmljSW50ZXJwcmV0YXRpb24+Mjwv
dGlmZjpQaG90b21ldHJpY0ludGVycHJldGF0aW9uPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlv
bj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6
UkRGPgo8L3g6eG1wbWV0YT4KbQULngAAH8RJREFUeAHtnQuwVVUZx5eiaUmGWGQ8BAlUHkkaiISi
IfjKRNBERUtDcgZDnWgUk2hisFIkJ2C0CcNHkZISGliCAo6BhmYKiI/QMdA06aWSllqt1u/Tvdv3
3nPO3cd7zrln7/P/Zs7Zr7XXXuu/9vrv9fq+bycfxEmEgBBoaAR2bujcK/NCQAgYAiICvQhCQAg4
EYFeAiEgBEQEegeEgBBwIgK9BEJACIgI9A4IASEQENAYgV4DISAERAR6B4SAEFCLQO+AEBACAQF1
DfQaCAEh4HYpB4Odd97ZaUVyccR22mkn99///rd4gHevCMfSEAnH0vikvZoWR+IriwggARFB8WIA
+DQiHEujJBxL45P2alociU9dg7SoKpwQyDECIoIcF66yJgTSIiAiSIuUwgmBHCMgIshx4SprQiAt
AiKCtEgpnBDIMQIighwXrrImBNIiICJIi5TCCYEcIyAiyHHhKmtCIC0CmSSCt99+Wwub0pZwiXDC
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
lxCoIQL/A+1A7kDp/iT4AAAAAElFTkSuQmCC

------=_NextPart_000_0011_01CF9A21.CD190140
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://kafka.apache.org/images/log_anatomy.png

iVBORw0KGgoAAAANSUhEUgAAAaAAAAELCAYAAACf7VJ0AAAACXBIWXMAAAsTAAALEwEAmpwYAAAB
1WlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczpt
ZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS4xLjIiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0
dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRl
c2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMu
YWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOkNvbXByZXNzaW9uPjU8L3RpZmY6
Q29tcHJlc3Npb24+CiAgICAgICAgIDx0aWZmOlBob3RvbWV0cmljSW50ZXJwcmV0YXRpb24+Mjwv
dGlmZjpQaG90b21ldHJpY0ludGVycHJldGF0aW9uPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlv
bj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6
UkRGPgo8L3g6eG1wbWV0YT4KbQULngAAQABJREFUeAHtXQfYFEXSLgRzABVzQsEAmHPOmDCgCIKi
YvZXwZzT3SnoiYqIAdNx5oQ555wD5qyYQTHn3H+9dfQ4s9/M7s7ubH7reXZnpqe7pvvtma6u6uru
dk5JSESACBABIkAEqozAVFV+Hh9HBIgAESACRMAQoADii0AEiAARIAI1QYACqCaw86FEgAgQASJA
AcR3gAgQASJABGqCAAVQTWDnQ4kAESACRIACiO8AESACRIAI1AQBCqCawM6HEgEiQASIAAUQ3wEi
QASIABGoCQIUQDWBnQ8lAkSACBABCiC+A0SACBABIlATBCiAagI7H0oEiAARIAIUQHwHiAARIAJE
oCYIUADVBHY+lAgQASJABCiA+A4QASJABIhATRDoUJOn1tFD33zzTfnmm2+kXbt2svLKK9dRzpiV
Qgh8/PHH8tRTT8mHH34o2267rSywwAKFkmRyf8KECfL555+n5tWtWzeZffbZU6dLm2DSpEnywQcf
yKyzziqLLbZY2uSMTwSqhwD2A2pV+u2339wcc8yB/ZDs99hjj9UNFN9++63D76+//qqbPNVTRu68
804300wzBXV39913Vy17u+22W/Bc/+4Uc7z88surksdTTz3V8rfVVltV5Xl8CBEoFYGW1oBuu+02
mTx5ciDtL730Ull99dWD61qd/Prrr9KxY0d7/KeffirzzDNPrbJSt889//zz5YcffpB5551Xdtxx
R+natWvV8or66NGjR5vnvfvuu4K6m2222WTuueduc3+WWWZpE8YAItDKCLSD5GpVALSHKDfffLMs
vvjiAlMcGo6JEyfKNNNMU1NI0IhNN910lgcKoPiqmH/++eWTTz6R22+/XTbddNP4SFUOXW655eSF
F16Qgw46SE477bQqP/3vx33xxRcCM9zMM88sCy200N83eEYE6gyBlnVCgA0fjRfGftQ0IlNPPbV8
9dVXAq2IVP8I/PLLL5bJaoyp1D8a0Rx27txZllxySQqfKCy8qkMEWtYEB6Hzxx9/yFprrSUrrLCC
9OrVywTSZZddJltvvXVsVR111FFmYhk+fLh8/fXXMnbsWBsEx/mKK65oA+GrrbZabNr3339fzj33
XHn++eetd4pGYtFFF5WddtpJ1lxzzSANTEuvvfZacP3Pf/5TZpxxRjn++OMlbMKB48SoUaPk2Wef
tfgYgF9mmWXkgAMOkIUXXjhIj5OHHnrIND3kcbvttpP77rtPbrnlFnn55Zdlww03tPJ6k9K1114r
99xzj7zyyivSvXt32WijjSyNZwh8xo8fb1rjnnvu6YMjx4suusjyBKcOPK8YKrY848aNM94//fST
sf3vf/8rd911lwwaNKhNueOeizq/4YYbBOWEMwEMAPPNN5+sv/76ZsqDFlxJKracyMN3330nZ5xx
hkw//fRy6KGHyksvvWT1puNdMsMMM8iqq65q9e3NtT7fTzzxhNUhNPtc/NHxAs9nnnlG3nnnHYEm
iXf24IMPlrnmmsuz4JEIVAeBUgePGj3d0ksvbQO12uBbUS655BK7VvObU00otnh+0Pvhhx92+uFa
fK2l4KhmMxc3GH7rrbe6Dh06BPGmnXba4Bzp1WQTPE8FYeSe56/mpiCOen65Ll26BPGQZx9PhZUb
M2ZMEBcnflB6hx12cIMHDw7i+jTImwopt//++7e5hzj//ve/A34qdC0OsPj555+DcH+i5kOnDaLF
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
iQARIAJEoAgEKICKAIlRiAARIAJEIHsEKICyx5QciQARIAJEoAgEKICKAIlRiAARIAJEIHsEKICy
x5QciQARIAJEoAgEKICKAIlRiAARIAJEIHsEKICyx5QciQARIAJEoAgEKICKAIlRiAARIAJEIHsE
KICyx5QciQARIAJEoAgEKICKAIlRiAARIAJEIHsEKICyx5QciQARIAJEoAgEKICKAIlRiAARIAJE
IHsEKICyx5QciQARIAJEoAgEKICmgDTVVFNJu3bt+CMGfAdKeAf++c9/RpobXIe/p7j7+OZIrY1A
O6fU2hD8r/T4WMqFgjyibxLxIB5RBKJXWbwfUY68ajQE2AVptBpjfokAESACTYIABVCTVCSLQQQa
DYF//OMfjZZl5jdjBGiCmwJoFuYA8oi+ncSjefFYd9115cEHH4wWkFdEICUC1IBSAsboRIAIiEAA
kYhAuQgULYAGDRok00wzjcw000wy44wzynzzzScHHHCAfPvtt6nygIH+0aNHy++//27p5p9/fnn5
5ZfNASAuPBVzRiYCRIAIEIGGQaBoAYQSHXLIIfLDDz/Ijz/+KK+++qrcfvvtMnbs2FSF/euvv2To
0KHy66+/WrrHH39cFl98cUkKT8WckYkAEWgYBHJdsxsm48xoZgikEkDhp3bq1EkGDhwoDzzwgAV/
+umndg3NaKONNpL77rvPwt944w3ZYYcdTOuB2r711ltb+FprrSU//fSTCaOPPvooMRyR7777blly
ySWlY8eO0rdvX/nss8+Mx+mnny7nnHOO9OvXzzSy7bbbTn755Re7xz8iQAQqh0AW4z90Qqhc/TQK
55IF0IsvvihXX321bLrpplbWs846S+aZZx55/vnnZaeddpL99tvPzGoQMjfffLPccMMNcvjhh8uo
UaMs/sUXXyzTTz+9PPvssyaIksIhnCBYRo4cKe+++67MMcccsssuuxgP3DvqqKNkwIABcuWVV8rT
Tz8t1157baNgz3wSgYZF4KGHHmrYvDPj9YNAhzRZOemkkwQ/EGYxb7DBBqb14Lp3796yzDLL2PgQ
tBVoPjDXgaCVQDDMPvvs8ueff1rYIossYjOl7UL/FlxwwdjwSy+9VFZbbTXp1auX3YfaPvfcc8t3
331n1/379zetCBd9+vSx59oN/hEBIkAEiEBdI5BKA4LTwRdffGE/jAPBNAazGOiPP/4wAdC5c2fZ
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
IkAEGheB/wczOSHCAfYhbgAAAABJRU5ErkJggg==

------=_NextPart_000_0011_01CF9A21.CD190140
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://kafka.apache.org/images/consumer-groups.png

iVBORw0KGgoAAAANSUhEUgAAAdoAAAD8CAYAAADQZmUwAAAACXBIWXMAAAsTAAALEwEAmpwYAAAB
1WlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczpt
ZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS4xLjIiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0
dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRl
c2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMu
YWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOkNvbXByZXNzaW9uPjU8L3RpZmY6
Q29tcHJlc3Npb24+CiAgICAgICAgIDx0aWZmOlBob3RvbWV0cmljSW50ZXJwcmV0YXRpb24+Mjwv
dGlmZjpQaG90b21ldHJpY0ludGVycHJldGF0aW9uPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlv
bj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6
UkRGPgo8L3g6eG1wbWV0YT4KbQULngAAQABJREFUeAHtnQW83UT694dddnEoFHd3Ke5QpDjFSilQ
pFBY3N12kS2uS/FSChQpUBYKpRRY3B0Wd7fFHRbyPt/nv3Pe3NwjSU7OuUnu83w+955zkslk5jfJ
PDOPThAIOSNDwBAwBAwBQ8AQaAkCf2hJrVapIWAIGAKGgCFgCCgCxmjtQTAEDAFDwBAwBFqIgDHa
FoJrVRsChoAhYAgYAsZo7RkwBAwBQ8AQMARaiIAx2haCa1UbAoaAIWAIGALGaO0ZMAQMAUPAEDAE
WoiAMdoWgmtVGwKGgCFgCBgCxmjtGTAEDAFDwBAwBFqIgDHaFoJrVRsChoAhYAgYAsZo7RkwBAwB
Q8AQMARaiIAx2haCa1UbAoaAIWAIGALGaO0ZMAQMAUPAEDAEWoiAMdoWgmtVGwKGgCFgCBgCxmjt
GTAEDAFDwBAwBFqIgDHaFoJrVRsChoAhYAgYAhMaBIaAIdB6BH766Sf39ttvuznnnNNNPPHErb9h
6A4///yze+GFF9wHH3zg5pprLjfvvPO2vQ2h5thXQ6DbIWA72m435NbhagjABCeYYAK39957dzr9
+++/ux122EHPr7/++u7HH3/sVKbegeHDh7spp5zSLbTQQsrwRowYoXW99tpr9S5r+twXX3zh+vXr
5yaffHK39NJLu759+7rFFlvMzTjjjO6ss85y//3vfyv3uPXWW7VNt912W+VYll9ef/1195///CfL
Kq0uQ6AwCBijLcxQWUO7AoHffvvNbbfddu7yyy93W265pbv55pvdJJNMkqgpp59+upt55pn12gUW
WCDRtWkLv/zyy65Xr17upptucvvtt5+7/fbb3RNPPOFOO+00Pb7//vtXXVSkvV+963799Vc333zz
uWOPPbZeMTtnCJQWARMdl3ZorWPNIsCOb9ttt3WjRo1yO+20k7vooovcH//4x8TVvvfee27dddd1
G2+8ceJr017AzhxR8b333utWWWWVSjXsbGGyyy+/vLvgggvcVltt5Xr37l05b18MAUMgewRsR5s9
plZjCRBgFwYTgsnCmC655JJOTBbR7Nlnn+0QJ88+++xuiy22cOecc4775ptvFAH0oohuf/jhB/fo
o4/q9zfffLMqOoiuEe3+5S9/cb/88ouWaVR/1Yrk4N133+3uvPNObX+Yyfryf/jDH9yFF16o7f3o
o4/84Q6fXE+//v3vf3c4Pn78eD2OKNjTww8/7NZZZx03wwwzuHnmmcf179/fvfvuu3r6sccecxtt
tJF+RxpAnR4fDoIvx+aYYw4td+mll2pZ/4/rOf/qq6+6YcOGuaWWWkr758/bpyFQBASM0RZhlKyN
bUUARgeDHD16tPvb3/7mzjjjDNVfhhsRBIEyRsSyGDqx4+W6fffd12299dZalN0vull0vxNNNJF+
h8lFiR3vGmus4Z5++ml36KGHuj//+c8uTv3RevxvmBMEw6tFMKzrr7++0tZoOXbD48aNc19++WWH
U/74119/rcdhxGuuuab79NNP3a677qpi6TFjxqhO+Ntvv9V+zzTTTFp2sskmc3z3GBx11FG6GEDn
TVv53Hnnnd0ee+xRuednn32m7UDsPHjwYPfxxx8rPpUC9sUQKAIC8kIbGQLdHoG33norkPc12GWX
XYINN9xQvwtDCO67776q2MgOS8uI/rXDea4VBhsI06gcF2YbDBo0qPL7sssu02up4/333w9kFxjM
MsssgRhHVcokqb9y0f++CEPS+p966qnoqZq/b7nlFr1m7NixWsa3Mdp/2XFqOdH3arlDDjkkkIWE
9sNX/swzz2iZq6++Wg/JAkR/77XXXr5I8NxzzwXgK0ZmlWN8OeCAA7SsLBb0uG/XVFNNFVxzzTWB
SBo6lLcfhkAREOi8vC7C6sDaaAi0CAEshLHAFcaou8rtt9/esTOL0rTTTuv+9a9/6S4rfG666aZz
GFB999134cNVvyO2ZTf4/fffa1243Xhqpn7f3umnn95X17JPdvEy0amxGNbZ0BJLLKE73Ho66fPO
O89RXphvh7Z5q+9rr722w3EM0RDlTzihmZV0AMZ+FAIBe2oLMUzWyHYhgAEUlrkHHnigk12UusEg
Do7qDqeeemoV98JsEcGie0WPKDvj2E2FeSByhSHCoMPUTP2eYX/yySdOdsrhajP/vttuu7mRI0e6
I444wp177rlu7bXXdhtssIHqWxEV16JXXnnF/elPf3JDhw7tVITjYR0wBajTyBAoKgLGaIs6clXa
LWJIJyK/Dv6RVYrZoQgCMFJPWBnDZKEhQ4Y4EaU6drkYKm266aa+mEOvyuSPjhI3GnSeIjZ2L774
olrzVgrW+cLuDKZ+0EEHORHBuosvvrhSupn6559/fq0Hxk+7qhH1r7zyymoQdeaZZ1YrUvXYV199
1eE47kowRRHr6h87UVyhevbsqS5FWDlXI3SvMNSwYZQvx054ySWX9D/1MxrkA302rktlJXD1uv6y
9rFb9asI8m1rYzwEjj/+eNVvyQNsnwkwQD/rdbRhPSKoi0Wt6lxlxxmIIU5lIMQ6WDEWJlw5xhev
Y5TgDJXjtXS0jzzyiJYRJq56zrA+NEn9lRv978uzzz6rbRO3neipyu8TTjhBywhz12NeFxrV0d5z
zz2Va/iy++6763VeRyuGYB30piK2DsSiWcvIQkSvraajFUtk1dGGcfI3CtcZbZcvA+5lfs7R8xuV
BwHT0ZZoWeUj/cjjqXoz+4yHA2ERa9EKK6ygO052YGIoVSnGLo5dVnjXAf533XWXlgH7RjTNNNNo
EaI0UVfYtaeZ+hdffHGNZCVMUl1iou1AbIuYlwhRWFdXI9yVoLA7EtbVuA6FCX9cYeiVQ0ShwvoY
8fXnn39eOR79suyyy6qO9o477uhw6v7771cs8FmuRzvuuGNpn/G//vWvquev1387VywEjNEWa7ys
tV2AAK4liy66qMNtBX9aCIMfGI9IEVSMDMNA5Ol1tIht/cKnUZOJP3zYYYe5l156yZ188smZ1E80
KvS+uMQMHDhQVQqEVzzuuOPcqquu6vDRxZe2R48eVZuH6BY3HNn5qnsNrj4YI6H3DRM+svjRomul
TtxvTjnlFBUn41sLISLGxxZ9NgsRfJTxTeYYul18drkOMT1RuGDyiPCNDIHSIFCezbn1RFbCKk4z
JJIjUEt07Gt68sknA9GpBrJjC954441AmEogOttAmIhiLr6vKlbFtUV2inpMglDo5bVEx7jweEJc
ipuP+NsGHE9Sv68j+vnOO+8Em222mbZFJqzKpywSAtFxdiheTUQrMZkD+sW1EnYykN1v4EW2XnQs
1tUBYuBw/XwXQ6+APnlCrSHGUVpOpAN6GBH3Ioss0uHaPn36BBLow18WVGtX5WRJv9h7XL6BnYAu
yYthVAIECK7A7suGtH2DSaB8RLEY/XiDHXa67GwXXHDBToEukrYsi/rZaWKkxU6SpAK4DsUl3HfY
aSMKbmRFjLib4BwY8hAhKkq4PPGHyNoTrlDEZQYvokPRvu5O9h6X7wkwq+Pyjan1qI0IwLSijAuG
S6aeLCiL+tEFVwvFGKd9RKlCTN6IYK781SP0t/yFiehZsqvVv/Bx+24IlAkB09GWaTStL4aAIWAI
GAK5Q8AYbe6GxBpkCBgChoAhUCYEjNGWaTStL4aAIWAIGAK5Q8AYbe6GxBpkCBgChoAhUCYEjNGW
aTStL4aAIWAIGAK5Q8CsjnM3JMVvEEm/cfUgli9uHq0ObF98xPLdA7ILEYCDoBKMJbGUvStTvltu
rTME8oGA7WjzMQ6laAWB3ldccUX1h1xrrbXc6quv7maddVbNcvP444+Xoo/hThD5iXCDDz74YPhw
ab7TPyJJkV2I5AQkUcDVZ+aZZ3bHHHNM7MhXRQCEqFWEPiSjEonnJViHhogsQtutjflHwBht/seo
EC1kFytRfRwBFkibBtMlbi2ZYSTJt6ZPI9NNmeiKK67QjDvs3stIhx9+uDKfnXfe2d17771OIjlp
xhx8cgk9SWzmMhBhJlkYknXoxx9/dKNGjXLEUiZXMEE+jAyBphEoX7Cr7tujrgzddvTRR2soPYn5
22kAJJatnpN0dJ3OFe2ALCgC2c0FZKYhJKO8gIGkJixaNxq2l/CJhJeUVHpVywqz1b4TKrLI9Npr
r2k/JMZyIFGqtCvCXCtZimSh2PbudeV73PbOdpMb2o626aWKVQACEv9XgSBQfJTYGRBE3ick9+fZ
/UraNRVHErRfUtQ5iQ/sT+vnPvvso7sqdo1kzyGIvaSiUzHmDz/80KEsv8kJyw7FU9p7+Oujnx98
8IG79dZbNbg+IQPLSkgo2M2FwyWG+4roGBFrND8tu8H1119f1QeM1aWXXhq+zD322GN6Hp3vsGHD
VCRNcgOu8QkbwhdwjHPh5yLNPaJZh/w9vNifnMQkUYCwLfA5imtd56+3T0MgFgLdZEHRLbrZlSvh
E088UXcGkhkmkNi1DfGW9GvBbLPNFkw99dTBbrvtFkiWmUCYtAbkJzC/p2WWWSYQvW8gqew0f6lk
dQlOOukkvdfo0aN9Mf287rrr9LiIdPV3M/foUHGNHzfeeKPer4w7WtHPVpIACEMMRKRaA4X/f/jI
I49UPEQ3H0gy+0AWWPqbHLaefJKAbbbZRs/NNNNMgehHg6mmmiqQ9H6+WOWTpAOyQKv8TnuPBx54
oFJH+MvVV18dDBo0KPj555/Dh4OHHnpI20c7201d+R63u6/d5X5mdRxrOVL+Qu+//76mUoub2s0j
wq5OJirdjQqjU70swfRJ/cZOFn3eJpts4oSh+kv085BDDnEffvihBpT3O10Cy5OnlNRp7Bo9kYat
f//+mmJt7rnnduy20B8Ko3OSncYXc9dff73G0vXHmrlHpdIUX+gHxjRpiHjB4Ry3aerw16QdU8aL
NHkXXHCB23777R062j333NOJGNmtttpqqm9faaWV/G308/nnn3ey2NI8uLLwqJw78MAD3RlnnKHP
CGPrifG95ppr3BZbbKE7SPLissNFMuITEpDMQDL5aKIMrmv2Hv7e4c8BAwY4/sL0+++/a6o/jrEr
h3jW0FGnoSzHNM397ZocINBdVhTdoZ/NrIRJYyaPY+I/di+e0OuRRk0mat2h+PpIsSaTdfDtt99q
0Y8++kjvI2Jef2nlc4cddlDd55dffqnH2NFKRpgA3WiYuC+7Yckuo4dFbKw7MGEM+juLe4TvV+17
rR2tiBsT4+ixkiD71W6V6ljaMWUMPYkBm+5ORbSv4+DbKVl2gptvvtkXU6kE58S6vHKML7LoUCyE
4epxv6NFghEmj9mpp55aOSwWz3otaQkhJB/N3KNScZ0v7733XsCzxX0k/26lJM+l73vSz6Rj2sx7
XGmwfckVArajlbfGyFVcNeTpTA2H5FJVa00sNtkVYG187bXXqjUnuxVSpLGLQT8Hffrpp7rTCd+Q
dG7sqtHJ9erVS0+ROk3EzOFimhgcS9h77rlHrZ1Jao6/JzswKIt7dLhhgh+9e/dOlarQp0dLcKu6
Rb10opkxJbOOMD/9I93e+PHjVfJBontcYR599FHVsZMqkATvJICPEsejltm4CoWJnTKuYOwcReys
p5CQIBFBigE1ew+tpMY/sMJCHncmv6P17eCSy2SXzl9SynpMk97fyucDATOGysc4FLoVot9yMDry
inrCsARGiTiR41NMMYUTnaqjrCT+1mJMaN98802HPxjq5ptv3iH3abXgCIgaSeHGxAwxKXufXX5n
cQ/q6a6EKxZjSr5YT6TbQ8w6btw4J1bmOpY33HCDngZvGGp0PPm98cYbO5FM+Gr0MzqmPC+IzB95
5BENjAFTRVQs1sCV65q9R6WiyBdUGKg5UDWst956mrv34IMPbjqXcOQ29rMbI2A72m48+Fl1nUkS
vR67EnHl6VQtTLZv377qX/v55587MWzSMuxWzjrrrA7lmdjZXbA7rkfofLEwvummm9xpp53mRCSp
ekRvOZrFPerdv+zn0Hcfe+yxqnNnnKI0cOBAPU+0KAi8kUZcdNFFrmfPnh2Ks7gi72wjok52z4wp
1uI8A+jmPWVxD1+X/ySxPXpYJCBYM7NLNzIEskbAdrRZI9oN62Mng3hXLDsdhkBRgnE++eSTGmGI
qEIYS8F82RlFad1119VJm91uIxILZDWoQtyHWDq8+8nqHo3aUNbzSy+9tHaNIA7VCJExhNEUhKET
Y4ZIOUwELWH3CgNuRGJ17HDzQkqBhIKdcI8ePSqXZXGPSmX/+8J9CK7CM2RMNoqO/c4KAdvRZoVk
N6+HnWnv3r3dcsstp5MWIfsmnXRS3eWw40R8jBgZmmyyydxRRx3lDj30UBXXEWGIney5556rlsVY
qfqdaT1Y2YmIW4juaLkf+kRPWd3D19fdPsGWSF8XX3yxioPFzcVhPYuYlXCFp5xyivrKegtv/KTP
O+88tRifdtpplWE+9dRT6ms7++yzq049DobsasWFR58Hok+FKat7hOtkcchCEXsB7hslFmzhBVz0
vP02BGIhkCvTLGtMUwg0Y63YzLW+0WPGjFGfR3nwOlhoSiD6QJinL6afssvVCEtYZPryWBHLBB7I
zqhSFqtjYd6V39EvWDNzfbUIPlndI3pP/7uW1bE/n/QzizEI37PZ+kTMH8giKAiPEVjLIigQRhyI
uDV8u0DcXwL8Xv148inMOhAXnUo5b3U8duzYyrHwl3feeUetm4VZVyzKw+ezuEe4Pqynw+2Nfqef
zVCaMUhzTTNttGtbj8AE3EIeLqMSIOAtHNMMaTPXhqFDTIy+S0LbqeUtuxlEgkTbqUZYsiK6Exce
h7iSHWrW1I57ZNHmrMbAtyWr+jBCwjgJv1wif7HLk0AT/jYdPpFMIL1AhYCPNSqFrKkd98iqzWnG
IM01WbXX6mkNAtVnv9bcy2rtBgjAUBdeeGH9i9NdLFkJ6N5Kasc9Wtn+rq57uummc/zFIYyeEOGH
xfhxrktSph33SNIeK2sINELAjKEaIWTnDQFDwBAwBAyBJhAwRtsEeHapIWAIGAKGgCHQCAFjtI0Q
svOGgCFgCBgChkATCBijbQI8u9QQMAQMAUPAEGiEgDHaRgjZeUPAEDAEDAFDoAkEjNE2AZ5daggY
AoaAIWAINELA3HsaIWTnFYG0uU3bBV+9nJ95bnu9drcDuyJiU8Q2t2Ms7R75RcAYbX7HJlctI0UY
GVvySvhW1kqYnue212t3O7AuIjZFbHM7xtLukV8ETHSc37HJVcuI+AQRdSpvfxKyrkM6tyhweW17
o3ZH+9GK30XEpohtbsXYWZ3FQcAYbXHGylpqCBgChoAhUEAEjNEWcNCsyYaAIWAIGALFQcAYbXHG
qhAtJX0aCQKif5NMMokmFzj//PM1b2m4Mz/99JO7/fbb3X777ecOO+ww989//lOTv4fLtPp7mnYT
PP/000/XNGqk+iNN3Pfff9/qpra9/jTY+EYi5t11113dgw8+6A+17ZM0jdHnkN/kRCb3LIkvokQK
QET6nN9jjz3ciBEjOj2v0WvstyHQCAEzhmqEkJ1PhQCMZ6GFFtJr0eliKUpScCavd999t5Kb9tdf
f9U8tiSGJ5ctv8lfu+mmm7qrr75ac4WmakDKi+K2++6773abbLKJto+sQ++9954mNz/ppJMcSdFr
ZbdJ2axcXBYXm3Bjr7jiCs1pu/LKKzv+2k1kjzrggAMqt/3hhx/cSy+95K655hp3zz33uGeeecZJ
Gkc9f8IJJ6jB35xzzqlJEUaNGuVYGA4fPlyfXfLWGhkCaRAwRpsGNbumIQIwofXXX79DOXauSyyx
hO4CjzvuOGVSJNuGyd56661unXXW0fLXXXed69+/vxsyZIjuLjpU0uIfcdu9zz77OCZkGG7Pnj21
VRdeeKHbbbfd3KmnnupIXl82iosNi45LLrnEPfHEE278+PFdCsOMM87o9t13305tWGONNdxOO+2k
iwDS0r3++uvKZEnyjlWz5NxVqQrjDLMdOnSoSlw6VWQHDIEYCJjoOAZIViQbBCaeeGJltOxa2dWy
02UC6927d4XJcifEduwIR44cmc2Nm6wl2m7y20oyc10MeCbLLZi4KUvfugtFsaHfH3zwgS6cPvnk
E81Jm0csll9+eW3WG2+8oZ9etA1ThslCpHz0TJoFlZEhkBYB29GmRc6uS4wA+kt0sfiOzjrrrO7D
Dz90iPKq5aOdb7753H333ec+//zzyo4x8Q0zuiDabnbm48aNU51z+BYvvvii41yfPn3Ch0v9PYoN
nV1hhRV0N8t39O2bbbYZX3NFo0eP1vaQnB6aaKKJ3KBBgzolqmdRBU0++eT6af8MgTQIGKNNg5pd
0xABdLKvvPKKlmPn+vTTT6te7JtvvnEDBw7Uic0bo2CcEiXPaD/99NO2Mto47WZS9mJu+nPVVVdp
X/lccsklXb9+/aLdKcXvONjkraMsfPxzSNtgnHfddZc755xzdMfKswgNGDBA//TH//79/vvvDkMw
aKONNvrfUfswBJIjYIw2OWZ2RQwEsDStRujGvP4SvRg09dRTdyrqdxpfffVVp3OtPBCn3eH7s+Pe
fffdK4dgwH/+858rv8v0JSk2eej7c8895xZccMFOTcEiGT1ytXMUZlEBE7733nvdVlttVTPqWKeK
7YAhUAUBY7RVQLFDzSOw//77dxCtMrFhhbzIIotUdGDeivPrr7/udMMff/xRj0011VSdzrXyQJx2
h+8/11xzuZ9//tk9/vjjKk7++9//7j7++GO1Ug2XK8P3pNjkoc9zzz13h9ChuPegtujVq1dVSQnu
SGeeeabDWM/vaA866KA8dMXaUGAEjNEWePDy3HT0lFGr42h7Z5hhBj301ltvRU+piI+D0047badz
rTwQp93R+7OD9e4riMNvuOEGh0h5yimnjBYt9O802HR1h3l+dtxxx1jNwGYAEfL999+v4n/czLxk
JVYFVsgQqIGAWR3XAMYOtx4B9LBQNUaLVe9ss83mpp9++tY3JOEd8LeEueKWFCXcSdgVYXlrVBwE
fvnlF9XDPvXUUw7/WVzMjMkWZ/zy3lJjtHkfoRK3b5555lHjobFjx7qwLvbtt9/WSEIbbrhhLnuP
Xg8XJaIIhYnJmiAbGEvNO++84VP2PecIwFgx2ENkjHuZkSGQJQImOs4STasrMQKEXERct80222j4
RaxECcXIzpBQeHmkvn37OnSzBDqYYoopVGxMhCHC9WElTTpBr3/OY/utTZ0ReOCBB3TMGD+CqESJ
xRXBLIwMgTQIGKNNg5pdkxkCRIDCeOjQQw91t912m9aLyO76669XZpvZjTKsCLHxTTfdpIuDsMUx
x1k4HHXUURnezapqBwIErEBKcfLJJ1e9He49xmirQmMHYyBgjDYGSFYkPgKHHHKI4y8JEeaOOLqP
PPKI6mR9jOQkdTRbNmm7F1tsMY2Ti4sSBlAY3bDr6dGjR7NNyd31SbEJd4CY1fhRdwURDCUu4QZk
ZAi0CgFjtK1C1upNhAB6zdVXXz3RNV1dmAhXCyywgP51dVvs/oaAIZBfBMwYKr9jYy0zBAwBQ8AQ
KAECxmhLMIjWBUPAEDAEDIH8ImCi4/yOTS5bhqVts4Tu7IILLtCk3OSnRWzcDN0jeUXjULNtf/PN
N9W/kiT2hCMkc00zFLfdzdwj7rXNYvOf//xH/U9x08JArFpYzbhtoVwcbJpt82effeawNn7++ec1
EYKPX52kneGycdocLm/fuw8Cxmi7z1g31VN0kegkjz322KbqiV5MovQsaOGFF65ZTdZtxwWplnVq
zUbUOFGv3TUuyfRw1tjQOAL2Z0G1sGlFmx9++GHHX7NUq83N1mvXFxsBEx0Xe/za1vqtt95aIx5h
QZr2j0hK+MdOM800upMgVCH+piuttJKGLExbL9cRSaoWpW078ZaJAsUOdrLJJnPHH3+8xjUm0Dx5
aKebbjoNrNGqdtfqT5bH02Lz22+/ueHDh6uVOPlbycWLD+q///1vHWPCa2LJ2wps0rQZKcpFF12k
8bbBj4xRxKUmKQQxjfF9Jg7yiiuuqO5madtd7znMctysrmIhYIy2WONV2NaShxarYsSt+CwSG3jz
zTdXcSMB+RHbER84LzRmzBidlPGJJULVyy+/rP6x+Mquttpq6oqEeHTNNdfUNHl5aXc72vHQQw+5
5ZZbTvO3zj///Jp7dtiwYbrwIGkECxEWUL17964aprIdbfT3IH4xY0g4T8T9LJiuuOIK97ZEHzvi
iCN00QeDJSIUvtssDpZZZhlHKEYjQyArBIzRZoWk1VMTgcsuu0zjyBLbGPFcODUZfpaEv2O3C7Ot
lsmnZsUtOEHu0nXXXdcR/YmoT+jdaB8ZX8JEiEX8ftkBbbvttro7Cp8v43fiN++www66SPrkk0+U
YRGAnxy8YYL5cpzMS2uttZaDMbebeJ4IMDHnnHM61BMsju677z7NskT6u2qRu1j4sQhERbLqqqvq
IrDd7bb7lRQBEZEYlQQBCVlIZIBUvWnm2no3FPGctkmYaPDtt9/WLCqRlgLZLQayUwrEoKZmuVad
kN10INGpApmAAwk6EUiqtECSAzS8ncQ3DgYNGqR9FIYbiP624TW1CmQ9BlnVR5+EWQWyGwxEIhEc
fvjhwffff1+rG5XjktM1EH2qXidxoSvHW/VFxNnB6NGjA2GqOh6SPSmQcJ6BJK1IdEsRgQfCaLUO
MBTRcqLrw4XTjEGaa8L3tO/5QyDdrJy/fliLBIFmXtBmrq0GPkxql1120clK0pQFEt6uWrEOx0Rc
q8x22WWXDb788ssO51r546qrrgpmmmmmQHSNyjSZaJOS6G8DEUEGIhIPxJo16eVaPusxyKK+m2++
OZCcrjqOIn1IzLQkvGYgUbQC0XMHEmIzFS6NLhIpSHDWWWcFEn9a20l7zzjjjIDFU1piATV48OBK
v+stEuvdI80YpLmmXhvsXNcjYIy268cgsxY084I2c220A999910gek2dpNj9JKFbbrklEHefQPRk
LWe2oodTxogUYPnllw9EV5ykqZ3KiohZGQoT/UsvvdTpfKMDWY4B92qmPjFqCtZee20dQxhlMztS
cf0Jll56aV1E3XjjjY1giH1e3K0CSUYfiIhf27nKKqsEYmAXsLPNimDYIkrWxULSnTFtSDMGaa7J
qr9WT2sQMEbbGly7pNZmXtBmrg13VnR3ATtSJqcLL7wwfCr291tvvVWZLZPzF198Efu6uAWZ+Pfc
c0/dwUq+2+Diiy9uSjwYvu9jjz0WiGW1ip/vvPPO8KmG37MaA3+jNPWBN+LWCSecMBDr8ODss8+O
JUL396z1iTpA9NlaLxKEZkj0v8EWW2yh44eoH5G96GSbqbLutXfccUcghm+BxLMOxNCrbtnoyTRj
kOaa6H3td74QMEabr/FoqjXNvKDNXOsbLcH1A8kxG0w66aQBYuBmCDEjO9ullloqEBeMZqqqXMtO
B+YPA4GR7L333i3RB7/zzju6A+Ie4lJSuX+jL1mMQfgeSeoDG9oKM2GRJEkeMsPdtwnxq1giK4O8
9NJL/eFYn4hyR44cqTtjJBDiXhWI1XAgVsWxrm+2EM+2JLtQHf4ll1wSu7okY+ArTXONv9Y+84mA
Mdp8jkuqVjXzgjZzLY0VC1ydpMW3NHj00UdTtT960bhx49T4Rqxam570JQJQ0KtXLxUxiktOIP6O
0dtl+hv94Prrr6/3w8gqjjiz2TGIdiBufezSllhiCW3rGmusEYiLS7SqzH6LP2uw3nrrqT576NCh
DetF+jBkyJBA/F61fRIQIpCoYgH1tJvQBW+wwQbaDiQicewO4o5BuC9prglfb9/zh4Ax2vyNSeoW
NfOCNnMtBjPsYsXlJZC0canbX+1C8b9VZguTZNJNSux4dthhB50cZ5999uCaa65JWkXq8hiESThC
vTeGRI0sdZsZg2qNbFQfO28J/qDtkxzAwbXXXlutmsyP/fzzzwF4sDM99dRTq9b/4osv6q4aIyqM
zLBaR8rRjAVw1RslPMiC6YADDtC2s2BrJG1pNAbVbp/mmmr12LH8IGAhGOVtN/r/CCSNH/vEE0+4
sWPHOrHadfjEEgwga+rXr58TBukIhrD99ts7YeoNbyETohN9qfrB8l0MZdSXUoyUXNI+NrxZnQKi
A3ays9VE8SJW12Tx+OdWI3x2W0HR/pLgHN9W4vxCBBIBH2FubcOGfL7k8T344IOd6OQrKRLfeOMN
9U8mz6+I3t3iiy+ucYiJwoXfMn9dTYwfzzpBTfCnJlIV7atGrRrTaveyYzlGID8831rSLALNrIQx
UEE3J4+q/XUhBohGsyIb03w8y0nHtJn3OKtnx+rJFgGLDJXjRVA7m5YkfqwYpujOkvYR1k5EpKgg
Wv5311136W6W3RBxdaP3JLsO0X0gohOJqLFTmeg17fxNeD8RX7vJJ5/cibi9atuyjJUbHtNnnnmm
smskkhNRktrZ92r3IjzikUceWcmCxO5/xIgRjuerWvk8HpOgHBqykXjPp5xyStV2Zzmm+nDbv+Ih
IA+vUUkQaMdKGCOfPn366K5XMvm0HTn8OdEHL7roogGuRBCGMbSFqEXCxNR4Bj1gHumjjz5S9yeC
Y+A602ryrkxIKzBUO//882MZZrWyXbjiiApALXjBAX3tVlttpc8UQSLiGI61sn1J65bkExVd9zbb
bBPwuxlqx3vcTPvs2uQIsAIzKgkCrX5BMSzCKAnfRYlf3GWo3X333RrWT3S2wfDhwwMMeWSJGwwY
MCCQeLxd1q64N2ZhIHpnbfNuu+0Wy3o1bt2+HBax5557rvp/elemdkbb8u3wnzDPf/7zn4Hog7Xf
BJnYd999A9HJ+iKBBP/XcxKLOBPf3UrFbfoimZ7UdQk/8maew1a/x22Cw24TQsAYbQiMon9t5QuK
FSgMjQkSS+CuJhEx6qQGg0UHJqLQrm5SovtjPSuGQMpYsKjFdSQrIlAGixCwoW7GrqsICQg7dx/G
kTCJp59+es3+nnjiidpuAlLgO1s0wgKfd4SQnmnd3Fr5HhcNz7K01xhtWUZS+tGqF5RIPETGIeIR
YQu7kmBIBx10kAacYEIjEYFkAwoQyRaRCNyAhADGmCbEX7jPhCSEQcFgCRxCgP2uIvqCGwyB/WkP
MaAlDV2snSqMGZcewng2K4btiv4TvpKFBaoMscJP3IRWvceJG2IXZIaAMdrMoOz6ilrxghK/lwkD
ZiY5PLusk+wAL7/88kASiutOFl0e+kcWAehlaV+7ogRlDQKicBYyhIOUNIKJqye2tCQu10haYIEI
s5ksQokbELqAwCCIxdEJs4BAZ5kmhjRRqtDfSpq9hv7Hodvn5ivPJsE/WGQQ7zuJ3rkV73FugOmm
DTFGW6KBz/oF/cc//qGTHcHaGznmtxJG8dUNVlhhBZ20iJcbjWvL5M7ulpRsRWW2kgdXA36wqEkS
VOPqq68OZpllFt0BEvO3K/qPiBdXIhJBwFgIj3jYYYc1pafkeWI3CMPm+ctStN7KZzVcN3pyQlmC
CbvzuH3I+j0Ot8m+dw0Cxmi7BveW3DWrF5Td44EHHqgTBKLIrhLfkW4OYyF2NoitMXyqFRlIEnYr
sxW3nqYn+JYMToxKWcyQSxWxKXl86xGLj5VWWknHCOObNDvhevXHOUd70anC6GEmSBWwas4yPCIS
FXbG9LEVCSbi9LPZMoSMpA/YEsSJnJbVe9xsu+367BCYgKrkJTEqAQJEABI3FycvaureEEVJUpk5
fP8kCbuTuLROJv7U9aW5UJipk12rE1ce9amUSdaJGM5JkoG61b333nvuyiuvVD9VCbvoRD9Yt3we
T4I/Prb43BIVqW/fvk52dZWmShhHxUV05U4SsTsJA+jwi23nGIlY1Imhj8M3Fx9q0Udq9CaiJLWi
Ha+++qobNWqUk4QHbrvtttN+VwApyBdRu2gfmG633HJLxaxW04kmJfGn2QTVKmLHC4aAMdqCDVi9
5ooYUSciJmsjQ8AQKC4CsvvVxW5xe2AtDyNgkaHCaBT8ezgSEKvhJH/vvvuuxhIWK14Hw05ybRZl
ibAjOkYdAXEjciIyTN0GdltTTTWVI7Yw/cqifV1RhwT516hJxJEWtxjFhrjJ7PDa1R5RGzhJC6fP
Bg2gLccdd5wTsX7b2uD7SjQr0cXruEpChLbf37ejmU9JFeg22WQTHctddtmlZhQsiyalEJXnnzw0
Rt0cAdKioWcT5hRgAdtOIoKThK5Ty2EMgbCezULHRwL2Hj16qJuFMNt2dimzewlDVbcYmW1UT40+
tF2EuxRjQX5a7k+qQnyXuzriFr6pWGiTiYkcsUUk7AywRAbXVVddNZBwokXshrU5AQKsCo26MQIS
P1gZ7Kyzzho8//zzbUWCfLPzzTefTjiyyg/eEt/LLAm3EpgtQRJICVcUIsgDOWzxEcYPlUkZP1sM
aoYNG9bSbuAnLfptvTdGaIxLuxdfjTooumENJ0lQiK4MxtGonY3OY11OGkACwTz77LONitv5AiNg
jLbAg9ds00eOHKkTqgTpD8SQqNnqYl+P5eXGG2+sDBZL1fHjx8e+NmlBrHPZAc0555xd6gccp93s
dNg1YmGN5fGOO+5YieeMa8i6666rmMF4a1lfx7lPtAw+njfddFPQu3dvrR9Xqb333juWhWy0rnb9
hsHCaInfDOMtKuGqxiJXDNu6NMBIUfErSruN0RZlpDJuJwm3mcxxqv/qq68yrr16dSQ+94EVmMxP
PvnktoTZYzKbZpppdOeQ9a65ek+TH5U8q4FYeSujw22nWpAHEsnvscceWkayFDUdyEH0hcE555yj
UaQQY7IYOe2009r2PCRHqeMViI4RIbOQShvusGONXfMLMT3+4byPBBvJchHVNT2yu0YRMEYbRaTk
v9m97LXXXjpZi/FU23RuhN+bbbbZdDIhsEK7QyYiEvXMllCFeSECTLBzZZKdeeaZNfpVo4n2jDPO
UJ0tASLSBKggwhdhLNHJw2Bh7PirwsiLRvSFcJMs3IgSVlQikhcie8ZD3H+aXkQVFYeyttsYbVlH
tkq/CDyx2Wab6ctMQIpGE3qVKhIfIu6rD0WHQQ2BJbqKnn76aY1axC4onDWmK9qDURE7ekImin+w
RlIilGJcGjNmjF7L4iWufu+hhx7SSZxoS2T0YaGF0VjRiUw5Cy20kKZPvOOOOwrdHQwD0Y3zrhTV
iK/QA9CixhujbRGweauW2KvsXHiJERe2mhBH77///jqhE5LvvPPOSxTvtVXtQ5+HJS0MKk6Unla0
AybJLozdiwSkSM306Qv6PZj1LbfcUrWphAEkTKMXS7Orx9BK3Kmqli/qQSx3l1hiCY3LXQuLovTt
tttuU2kDcb27cmFaFLyK0E5jtEUYpSbbiKiUOMC4z9xwww1N1lb/cnbJhEokQD47J2K9dmWc5Gqt
ZQcIs4VJtdNFBAMe0tbBYLEizmL3hegYETJYE5vaE+EKTzrpJO0j92P8WeygJy8r0WdCNWKdjaqi
yPTyyy8HhBPF8pwMT0bFRsAYbbHHr2HrMQTCipWdDMH3W0mIIf3OiUDwiGrzSvgOY7GK/zD+qq0k
dvekjENci+HOmWeemWmyd5inVwmQLYf40JNOOqky9LXXXlt3u+1QE7QSw7h1Y53Ns8fCI02Kurj3
aUe5L7/8srIw4/kpog69HTgV4R7GaIswSinbiAgKsSLWpKyQW0WI7STKTQeDnlbdK8t68Rtm540R
UiuYLYZnElVJGToi+1133TUgUUIriN2xT67OvSQmcNv9olvRrzR1ousmvR44kG6vyARz3WeffXTR
hDQE5mtUPASM0RZvzGK1GHETO6illlqqZRa+6P8QVxIUAnEdlqy4jBSJMNbyzJZUdVkRFrAYtCC2
JSNPK3w9MW4jgMWiiy6q90Fygc6XcecYFrndlcCG1HRYc5NIvujEOCNGRpzcykVz0XHKa/uN0eZ1
ZJpo1/HHH68TLwEOWsX4iBbkJ3juU+SXX+LKakJ5AiA02w8CfyC+hcFi3YwhUtb08ccfB5KhSXfK
3KdXr17BZZddVnHVItoXix+MaYrsX9osbuTJJc0jGKGvLjqh+mFRiFsW0iqj4iBgjLY4Y9WwpYiZ
Bg8erBMLvpnsOLMmGMmAAQP0HoQ2HD16dNa36JL6MFRiR8jfSy+9lLgN7KAINoBulLB6WcVsDjeE
XTHjys4GsSi7V0klGC5S+c6CActm2iIp5irHu9sX3gn8tmG2xxxzTOG7j8sPkhJ00Oj6jYqBgDHa
YoxTw1ail0JUxoRy5JFHNiyftAAO9UOGDNFQcUzekvu2yxLCJ2173PIwWHa17ASTxNBlsYEeHOz7
9euXaVxl9LySn7bii4zOnYAjcayl0QdjGIT4tJ0JCeLi3a5yYOgXoKg3ik4YvxHUgueNIBe8m0b5
RsAYbb7HJ1brPvnkE3VrYJXbCuOPW2+9teL3Sei/IgXojwVgqBA7Qc9sESnXIyyXfTAOfDglYXe9
4onOIfJH/y3J1HVCnUMCzxM2M2m4TCbhgQMHViblrs6+kwiEDAtjdU38ZpgTYSyLboVN+1EfsIgi
fCPqBKP8ImCMNr9jE6tlWMsiIkRkSSCELIld0wYbbKCTkySiDu68884sq89tXRhFYYmMPgxjqSjh
F8yukoUNwTiGDh2amesFi5iDDz5YdawwBSZRyUvbdP1IIJiUV1999dz5NUfxbeVvgnWA66BBg3IR
QKXZvuIXT0ICfMJx5TPKJwLGaPM5LrFaRSB6Ai/gD5plKD3E0EcccYTqAknTRqD5Vuh7Y3Wyiwqx
gMHHFmx9+kD0fQR9wCcZy94999wzIEhCFvTwww8H/fv3V+ZN3VtttVXmhkwYZhG0hNSErXBnygKH
dtTBogNmi61BGZ5rArAg8UClQ+o9o/whYIw2f2MSq0WkNWMXi2gxy1CCvKgwGHY/22+/fbcWSbGj
Z6cAs8UflnSCTND4aFbb6cYauFAhJnnwXn755bVeglkccsghLU1ZSLxj+sNiIUtRd6hbhfiKGJ6x
3HTTTSvW2oVoeI1G4stOEnn6hCFe0UXjNbpZ2MPGaAs4dOeff77ufJigecGyIPSNiBV5UQnpxw7L
KFBmxE4BXFiAZBHCkl0wweOJt0y9+EYifk6SVKCZsSEkJ6oArJeHS7jM7krnnnuuLijXW2+94Icf
fig8DLgzETiGZ4oFRKtc+woPVBd0wBhtF4DezC2xKOZFInF6FnFriTRD5Bn0jYihL7zwwlLorprB
mGvBFncQRK0wWkTo7AKbCTyB7hdxMzo1xpCdMXr1rth9YFTVp08fbQfPVFe0odkxyuJ6AkHgKoVR
W7sWOlm0u14dBOhA/YAE5q233qpX1M61CQFjtG0CutnbsFpFlMsETaB+9IXNkA8PCHOFyWapb2ym
XXm4FnGu322SSo5MN+wCCUABs00aw5kAEhtttJHunkiJhyEOEoSuJkTXPEs8U7iLlGFXlwbTq666
ShkT2a2SWnWnuV87rsFwEVUE73d3VhG0A+s49zBGGwelLi7zzTffVHYfRH1qlhALIx5mgiU8YNx8
ps3eN+/Xkxze67mWXnrpTinK2B1gdAKzpWw9wq2GMJiLL7644oxvLkY4uGLljTB2Y1dHQoju6iaC
LzSidMadlJJlIGwMyNNLeNQLLrigDF0qbB+M0eZ86EiDRog9XpYRI0Y01VomUXZTGDqhbxw5cmRT
9ZXlYvTc7OxgNrj04IvMjr8aET+Y4BTsFp544olORWCkMFTqYSGDfy0MN+9BBTCuQ6TNrj0Pu+1O
wLbhwNixY1VVgMi1LAsOshn5QDa4pJXByroNj0LmtzBGmzmk2VVIdCJ2UFNMMUVw++23p66Yl+us
s85SPSOrdnwJy6KPSg2KXAgu6LN8UgQS1ccRHcJsCT8Js3388ce1CUgFWMQgGmYhg6gYkXGRiF06
CzCeN5hOdyRCWrLgIH8vKoMyEItGfLNZ+K255prd2o+6q8bTGG1XId/gvvfdd59O5EQpSqoTDFeN
rgYLU14ygk90Z//JMC4sXBCrgQtWp0mTCRBYAmbLpOzF8HxH111kjD/44APN+ITeHkvo7kgPPvig
Bu5nfMtkTER+Xoz7SKeYhXtad3w20vbZGG1a5Fp43XXXXac7owUXXDB1qjMYgY+HSuQo4uUaBepz
vMkmmyiDJXBDGlyQBsCEfHxjdrCI5cqSK5T+eYwIW9is4V0RnzvUAuji8aMu8sIpij3ZnFi8I7VI
8+xH67Pf8RAwRhsPp7aVQsSLrpBg8IT6S0pkkcFgimAW/PE97/rBpH1MUx6fwsMPP1wXMEwypE1L
GveXzCkElEDUzE54hRVWUIbLQobUZUTqKgshbjzggAMqkhAM8roboatG105GpzLtAJFaLLvssjrP
lCF9YBGeS2O0ORkl/BgPPPBAndjIoQnDTEoYtCDuggmwm4UxdHcCV0RmrOLZeZLt5KOPPkoECwyU
kIj4JvJHqMRwQA90eUTowtc2fDzRTXJaGL9q+oz1dHd8nlApoLfGTaaRpXlOh7Bqs5hffN5kPtPM
N1UrtoNVETBGWxWW9h5kx8lEDoMkeEQti9darSIQAnpGricZ+92SlN0o0PjP7DrBhShaSZKgYyhF
MH+C+nM9u1gMSmoxG3YJiKJhtoQ5LBPdcccdumNnZ5dlTO2iYPTGG2+omoBnoGwLKVJfIkFjh8sz
bNQaBIzRtgbX2LWi1yP0Ibst4q8mIcShWBBjScwkgNjZzPcDdc3wbkzsZC+77LLYkY8YD8YBNxcY
LMyTdHVxrLSZqAiniGgag5oyERbwSEuIknX99deXqWux+sICi2eBfMBlCwCBrpZnlnclyWI0FnBW
SBEwRtuFDwIv7yKLLKKMkswqSQgfWFK5waBhKnkMhJCkP1mURecKk2TSYPGBPjVuvFcMXjBownIY
BktIPiagpKEJ8XvGNYQJ+f7778+iW7mpA39joifxzJ188sm5aVe7GoLKgfeVxUYz7nbtam+S+6CD
xhoZq2RULUbZImCMNls8Y9eG3yW6H3aiSUS9uPpgKAUzIJKPrUD/D3KS07PjABd8WImKE4fwmyRu
NOIzfGB33HHHpiNlMSFjMQ6zxU2rTISaw+v2dtppp4DQoN2JPvvss2DJJZfUZwWbiDIRxpf42fIO
ISlLqsIqExZZ98UYbdaIxqiPQAbo8nAd8LlOG13GS7DHHntoXGIsIUnblnS31egeRTyPscr666+v
kwPMbdy4cQ27AbNAnEzUJiYV8PzrX/+aaTQgIgvhp8sO+d57723YpqIVIOEC2LHzzyonb1EwQL2A
7h8jMfT4ZSJUT8wzjC0RpYgsZdQ8AsZom8cwUQ1XXnmlijUJ8xYn8gyrSiw/e/bsqS82xlJxohcl
alQBCzMBYKVNaEpca84444yG+mnE68cee2xA3GEmEsaA7C2tcn+C2RIsBGZbNr0ejwzPMlIAROVx
JQgFfNSqNhmVBHHCCezBoq1sRGxk3i0Wi91tbFsxlsZoW4FqjTrRa6HfQjwTh1liULPUUktVdg5x
d781bl+Kwyw8YI7sQhH3Dh48uGFOXvwhEXP68Iis1ImY1Q6CuaPXw6c5iYqgHW3L4h4PPPCAur6w
ECybmLwRPmQ7WmeddfSdJkd02YjFIW5NhBpt1/tSNgx9f4zReiRa+AlzIDQfuyj0W40CJaDjIyUe
TJl0baRtMwrUkpfsKuCInrqeXyNi9VtuuSVYe+21tTy7SkRiuEK1mzAiwu0KZlu0+MdxsML9BbE9
BmiXX355nEtKUwZpSN++ffUZQ6pSNiIEJZIfxORY3xulQ8AYbTrcYl/FqnfTTTfVFxE/zHp6VQxL
SFmG1Sy7ryOOOCKT5O6xG5vTgojYBw4cqAsP9Nr1sg6RsP28885TNxsYMgsVot90tR4RZsuEhcVq
GXcH6C1JZA/mRx99dN3nPKePWepm8d4SxIS+n3DCCanryeuFiMn9HLbLLrt0OwO4LMbFGG0WKNao
g7yWuEMg4my0Ghw/frzuCnhZsZp9/fXXa9TafQ6zW8Chnt0obgdHHXVUzYXHe++9p5aSiLnAkAAV
uEzlya8Yi1UiLMFsCQJRNgJrJmLwJwBLd4o2RDxopFD0nQVy2YgNwpFHHqn9I2czC0ej+AgYo42P
VaKSb775phqJwCBIKl2LEM1svvnm+gDjnoKbilEQ3HjjjerXx8QFPuBUjXBvGjBggIq2MEwh9GSe
IzOx+MLameeCxVUZ6ZRTTtHFJZa53cm/G2ZEXmOe2f3226+MQ6tqLBaKc0j6zmeeeaaUfWxFp4zR
tgBVMn9g2Ur2j1oRghApkyCch5Yd24knnthQd9uCpuauShznvV4VvWY1nSa7BzIcIS1gUsPq+KCD
DgrIWFQEgtn26tVLmW0cd6Qi9CnaRhZK6KTJcFSmgPzRflb7TV5jnkuYbj1VUbVri3DsySefVNdE
5q0bbrihCE3u8jYao814CG677TYNVMAEUyvHKTtcn2KN3VgcN5+Mm5m76tCh4rqE0QULFETt0fRs
WGqjw2Y1zURGIP9zzjkndvSnPHUav2gCH7Cz5ZkpIzEhE70Mn/GyRVJqNF6Ij3lGESdHn+NG1xbh
PK5rxAHHYBOXuTIuKLIcB2O0GaJ56aWXKqPAJadahpiXXnop6NOnj76A6OrKGMggKZxYZOOzhxsB
ol8sg6PpAdFXkxeVSEtMXr179w6IysO1RSYWF1hRY/g2duzYInelZtvRnbN7ZwGFkVp3IgyjeF5R
Z5QxghY2FERS833EENGoOgLGaKvj0ukokzpxbGsRqzoeuHXXXbfTDotcnog2cQDHWKfabq1WvWU+
zkLDR2ciwhD+rmG6W7IQkYAcYzJcR3aQFHeEoCwTwWyXWWYZZba4I5WRsFolzCXvB7rLoi+QkowR
Lj/0m/63KjBKkva0oixSJhbJSGhqZbdqxX2LVOcENFYehNQkYk8nkVGciEdS11GEC0Xx78TIxkng
AyfivkqTRWTiZIJ0wgCcrNydvFBOGIOeB1phHk4sTJ2s9pzsdJ24QDjRXVWu745fJKqTE0MgJxlh
nOhXnTj9O4mgpFDIJOxEp+ckHZkTQxrFShiRkzReTna0qeCSyEVu6623TnVto4uyeP5lAnYSyN2J
OM6Jta6TDECNblu487wLIj52Yrym/ZOcy04WT4XrR5oGi82GEyNHJ0H7naiKnCy401ST62tE6uQk
q5MThqvPsGS/ynV7kzQuk/kDRtsMHX/88bpik4bbp2GQy2eA1XaryJ5/e+9t7iv3M5DF/PF/W68k
7D1S1u9kZSJDDF3KP8nz2qHX7Fg5xk6LFdxFF11U6bdYlDqxNtRdrVgeu+HDhzt2vWXFhn6JKNyJ
D2XdPo4aNcr5VS67NhExaXkJK+l23nlnlRKIYYXbYIMNVAKQFV6SLMCxS24VZfn8i7GXE/9f3en9
85//rOAp/qhOwnZqF8Q3uHI8K4zaXQ87WzGQcmIo5djtRe+PNIN3R/yOO52Lli3Sb0lAoLtZxlgC
fFT6hoRHxK56TnIaV44XqW++rfQLCRUkagKVdPpz/hMJoCQCKUQ/M5s/pPNNkTREdzFNVZLji9Ev
YQWLdZ08O5U/fuO+4PVqWBYOHTpUy2L4gYl/d8h8gQEYuPAcRI2YGFZ87UhsTxl0OMTDxUIR4x9v
GAaOu+++e00r7WYej1Y/n1nXzzOD/yn6fFxkCPrgIy7xzKHTLgPh8oPlPWNPPz29/fbbmkCD54Ww
pWUjjPgwfuNdIIDJd999V7HeZXwPOOCAwneZuRBdPGNILGiihnkSdZG6M3KOfM95p6zeb1YVTVFW
DWmqES282Bs58WBE/3hZIBJ8Y1nJeSbFF154oYUtyk/VBIZgUUG/mSTCEXHwFd1tt93USGK66TVz
R30AACaJSURBVKbTDEQsWgi+TlxcriGcIv7D1Rh0Vr1s9fPZivphtrhOgK03Fgs/e2UJ4UgwCxYV
GLudeuqpujDl2eA3/eWzlotcVs9HV9SDqxP+82TG8b7gfnxx9+LdKQOxCMeIUWwOdBwx/Jtrrrl0
TmBsSTTfKO57V+OQ1fttjLbOSPLA45TtX4Jqnz67johFAzEGqFNbuU7htoFLDgzW48LkQSAOfFux
roZR7LvvvrrwOOyww3S3T1kxbAquuuqqtoRHzOpFqTV6raqf3U6PHj0q2HqMmaCQBJSF2LETrpH+
zTLLLB2eJ/pKwP4yEiE40f35cQ1/Eiu6LETAHoL34EvNojE8X9BnoojlmbJ6v43R1hllxDjhF6DW
d9xOYDDdhegru/noSwM+pK/jE5ERSbHJVoQYlEmlX79+NSNltQq7rF6UWu1rRf24geAmVut54/iz
zz5bq0mFO44qwWdlqtbnsuXyJSb0ZpttVnN8SSqCS2BZCJcfFuXVxpaNDMEv8kpZvd9NG0MJeKUk
2bGpkU+czkk4QCe6pThFS1EG4yXcmeTl6NQfDFgOPfRQdWfC6Am3Bgk24SSVmgMnEZV1usYO/H8E
JLCBk9jO6grz/492/CY7PSei1o4HC/zr7LPPdhJFqmoP6KvYO1R91qpekPODGEZKtCgneumaLRUV
i5PgHjXPF+2EhBl1GIlWI1m0O0lWUO1UuY41u5LIiuM3246srxdmUnUFJqPf6ThiUvQP3YFIOVcN
g+ixeeaZJ5AJtFPwjnZj1OrnM8v6iR5E5qYoltV+I1YtQ3CAMWPGVJWMRPt85ZVXtvvRyfx+7Nzj
zCtIitgBlkFKhvEj0qxq0i8/xpwjXGceKav323a0MtpRkuTgThT50cM1f2PSfuaZZ9Y8X5YT7E5F
19qwOzjki2jTSezi1EEmGt6khAXAba+99tKgJnSP3Vwtkkmp8M8czwhSD/pSj8ABKQmBPYpMuPGI
WNiJuFS7IQymanfAgx3gsGHDqp4vykFJ8uEkj62619UbY3BA6lVmqv0ml7nXDfom1rMNX36qCE+E
otR3khqvQc3FPS3Wn050rLE6gE8tGBolR0B0s06sinWhIsnunRiUVa2EiUtiRDt8b4tKvD+oIcR9
TrsQfp/CfULcin9p1J89XKYI38W4TRdHRADD95xIUVC1fsN8RHqk/ulF6Fu1NoohlOvZs6eeqrWo
4CTjS9S9a665plo15TgmL2xTlNXWuqlGZHjx448/XlV0Jy9Dh+NYGROHl2TkGP2QMAD/sTISfnBk
YZEnPvYfZv1YznY1tfr5bHX9wmACLLax2gR/mbA6jMGQIUO6GuKm749xEP7oWB/jY0o/o+8bxzCc
KVPCcUTJ+JN7w7fo2NJnXGSKTvjSH3744ZWsW9X6yXgzx+RNXJ7V+83OrSnKqiFNNSLDi727Dg85
f+Q6JeAC2WMuvvji4JFHHulyvWOG3W1YFYuHKCYem3qfTIp5sJxs9fPZ6vr9AOGDjM6bBR64e0aE
j3KZgtXzzAwfPjwgyYSfkP0n/S5jEAvGWNRVgagN1L+Wfvo+Y+tQpiQMjz32mAblmGmmmfQ59v30
cwnvU54oq/e76aQCkrzcSVCHWKJWATMRZRGwPckNEcNJblANFTjjjDM6cVVRnUqSOuKWzSRQddyb
NVEOcbEkd25YA6EoCfpPaD0SBYiBmDvmmGOcJHFveG0rC7Ty+aTdra4/ig3hJLFYRVUh0hc9fckl
l6gINlq26L8RF4u/tRsxYoSTIDDaHVlgaDIK3p8ykiw01D4ES2zvyUDoxv79+5equ8JMHaJl+obI
2Fsli0TDvfbaa2622WbLRX+zer9zzWgln6MT5+1cAJ51I2BMsltMVG27Fx4YeRGXFgMOGCdZh8hc
xMsQ/cOQpxlq1cIjqxelVt9aXX+t+3Kcier00093GO+R8Uh2B/WKF/ocMbHJcDRy5EiNMS6hDAvd
n0aNR28pYmUHw4UJ4U5XVmLxKCkzleGyqCdWMjG980BZvd/VLS3y0ENpg2dErH7KRH7wkvbpMklH
WOaFR6tS2SXFOavy7VgYLb744k5CWapVLguhdlCtRVGr+0v/Bg8erDs90fnpYq/M/aVvK6+8siZX
wOpaIq+1o7uuq8aXJBN77LGHe+utt9SYsl1pFGv1N0uwc81os+xoGeqyhUexRrGsCyOkMdUWRdbf
Yj2ftVpr41sLmfTHzb0nPXZ2pSFQF4HwwgipTBn+xDikZtpB62/xx9jGt+4rnfqkMdrU0NmFhoAh
YAgYAoZAYwSM0TbGyEoYAoaAIWAIGAKpETBGmxo6u9AQMAQMAUPAEGiMgDHaxhhZCUPAEDAEDAFD
IDUCxmhTQ2cXGgKGgCFgCBgCjREwRtsYIythCBgChoAhYAikRsAYbWro7EJDwBAwBAwBQ6AxAsZo
G2NkJQwBQ8AQMAQMgdQIGKNNDZ1daAgYAoaAIWAINEbAGG1jjKyEIWAIGAKGgCGQGgFjtKmhswsN
AUPAEDAEDIHGCBijbYyRlTAEDAFDwBAwBFIjYIw2NXR2oSFgCBgChoAh0BiBbpUm7+eff3YvvPCC
++CDD9xcc83l5p13Xk1k3himcpYwPMo5rtYrQ8AQyBcC3YLRfvHFF27XXXd1N910UyWZPMMw1VRT
OZKw77XXXm7CCatDcfPNN7sHHnjAnXLKKfkauSZakwaPf/3rX+7ee+91L774optuuunc8ssv77bb
bjv3hz+YUKSJoUh0aXdbGFl/y70R6E7jW527JHr981345Zdfduuss4776KOP3H777ef69Onjevbs
6e655x43ZswYt//++7tXXnnFnX/++Z068v3337vDDz/c/fDDD6VhtGnwOOGEE9zRRx/t5pxzTrfI
Iou4UaNGKV7Dhw93d9xxh/vTn/7UCTs7kB0CSRdGv/32m7vuuuvc448/rs/9bLPN5vr16+eWXXbZ
7BrVwpqS9jfaFJ7L66+/XjGYdNJJo6dz9ztpf1nwPvroo1X7ccABB9TcNFS9oAsOJu0vTeSacePG
udtuu03nm6WWWsr95S9/Kc7cI8momyJJFBwIDk3VUeviLOpee+21A9l1Bffff3+n28iEFCyzzDLa
/rvvvrtyfuTIkcHuu+8ezDHHHHpOGEzlXBZf0vYr7XXhNifF47XXXlMMZPcagBf066+/Kj6M+5ln
nhmuPtX3LPpV68atrJt71qu/3rla7Y0ef+mllwJhlIFIXIKDDjoouP3224MnnngiOO2004LVV19d
x2a33XarXCa7hGDzzTfX40sssUQgC8tAmI3+Pv744yvl0n6p16d65+LeL2l/o/U+88wzwUQTTaT9
/eqrr6KnE/+u16d65+LeKE1/t912W30epphiiiD69+OPP8a9ddVy9fpU71zVyqocTNPfd955J+jR
o0cw/fTTB/379w/mnntuHd9VVlkl+O9//1vlLvEPNepTo/Nx79Q0h8yqIdUa3GzdIu7UAdl6662r
Va/HnnzyyWCLLbYIrrrqqkqZHXfcMVh66aX1b5JJJgnKwmjT4HHZZZcphkzuYZKdsR7v27dv+HCq
782Oc72btrJu7luv/nrn6rU5fC7pwkh2cjouF110UaUakcjo5DTBBBMEX375ZeV4mi/1+lTvXNx7
Je1vuF6RQAULLbSQTsosAovAaNP0d7nllgtkNxfuembf641hvXNxG5C0vyzuV1ttNR3XTz75RG/z
+++/B0OGDNHn/Nprr41766rlGvWp0fmqlVY5WGoF22OPPSbvm3OyCtLPav8QQSBmEmZcOY3oSRiL
/s0///yV40X/kgYP2R24QYMGucUWW6xD9xHlQJNPPnmH4/YjOwREyuLuvPNOt9VWWzlZvXeqGP34
hRde6GShqCJiCojkRg38ZLFYKS+LRR1Def/d+++/Xzmety9p+hvuA6ohnsftt99eD8vCInw6d9/T
9vf11193CyywQO7606hBaforEhx33333uSOPPNLJjlZvwbjus88+qr6aZ555Gt02F+dLraPlgYRE
BJwLsLu6EWnwGDBggOMvTLKirOisN9poo/Ap+54hAkkWRv62MJktt9yyk+5KJDdu5plnVh27L5u3
zzT99X1gsXzllVe6p59+2l188cX+cK4/0/SXBS5/8803n/YVmwt08CKBcyyo8kxp+vvqq69qlzbd
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
xACIh8DPP//sXnjhBffBBx+4ueaay80777xu4oknjnexlWqIwO+//+5ee+019/bbb7vFF1/c5r6G
iJWnQNt2tDfccIObeeaZ3SyzzOLWX39917t3b/29zjrruJdeeqk8iHZRT55++mm31FJLuWmmmUax
XW655dxUU03lVl11VXfLLbd0Uauyue1nn33m/vznP7sJJpjAjRs3LptKrZYKAl988YXr16+fm3zy
yd3SSy/t+vbt6xZbbDE344wzurPOOsv997//rZS1L8kR+PXXX91RRx2l+C644IJuvfXW07mPxcyu
u+7qvvvuu+SVdvEV//73v/V95J0M/7GBWnLJJd1f//pXe25CY9SWHe3BBx/sTjvtNF3FnXTSSW7R
RRd17777rhs/frwbNWqUW3HFFd2jjz7q8MMzSo7AlVde6XbaaSfXs2dPd+aZZ+pk+dVXX7kHHnjA
jR492m2yySZu6NChbrfddkteeQ6uuOqqqxyT1R/+8AdHX5mojLJB4OWXX3Ysdj/66CO33377uT59
+uhzROCCMWPGuP3339+98sor7vzzz8/mht2slh9++MGtttpq7sknn3QDBgxwW2yxhZt11ln19/33
3+8uueQSnfv+9a9/Ke5Fg2fdddfVRRrtZseOxPLee+91xx13nM7xw4cPL1qXWtPeoEmSlUsgLatZ
i0z2en7DDTcMRDTVqdxNN92k51dfffVO5+xAYwQ+/vjjoEePHoHsQILPP/+80wVvvvlmMNlkk2kZ
eek7nS/CARGBB7JDD4QhaF9kBxC72Y2ez9gV1SjY6vpr3Dazw2uvvXYgC5hAJv1Odf7222/BMsss
o+/n3Xff3em8HWiMwOGHH674XXTRRVUL77HHHnp+yJAhVc/n9eDzzz+v7ZZNVKcmCsPV91XUV8H3
33/f6XyRDmT1frdcdHzEEUdovOJTTz1VxX/R5QJiqkMPPdTNMMMM7pdffqmcRo+70UYbqfgKkTMr
wddff71yni+IXU488UQ9jjP13HPP7VZeeWV33nnndSj3448/umOOOcYttNBCumpkB80OL0w77rij
O+yww8KH9PsOO+zgwiHluOeRRx7p5EHTXeR8883nuPbZZ59VEZC8OA7x0LLLLqu7+GiF//nPf9zu
u+/ullhiCd3Z77XXXqqzCZfbZ599VPRCf3fZZRfFIXw+/F0eBMfuFYkBYuMoIZ5iN7LSSitpG/35
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

------=_NextPart_000_0011_01CF9A21.CD190140
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://kafka.apache.org/images/log_cleaner_anatomy.png

iVBORw0KGgoAAAANSUhEUgAAApkAAADRCAYAAACHO6l6AAAACXBIWXMAAA9hAAAPYQGoP6dpAAAB
1WlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczpt
ZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS4xLjIiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0
dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRl
c2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMu
YWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOkNvbXByZXNzaW9uPjU8L3RpZmY6
Q29tcHJlc3Npb24+CiAgICAgICAgIDx0aWZmOlBob3RvbWV0cmljSW50ZXJwcmV0YXRpb24+Mjwv
dGlmZjpQaG90b21ldHJpY0ludGVycHJldGF0aW9uPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlv
bj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6
UkRGPgo8L3g6eG1wbWV0YT4KbQULngAAQABJREFUeAHtnQfYFEW2hgtEBQUDKoIRQTCxghETigkT
ZsUcQAxrZM1rxN2rLsqa1pxz1muWFQPmrAQxIiIqogImMGvfemtvzfbMPzPdM9OTv3qe/5/pnuoK
b1d3nTrnVFWrwAajIAIiIAIiIAIiIAIiIAIJEmidYFpKSgREQAREQAREQAREQAQcAQmZaggiIAIi
IAIiIAIiIAKJE5CQmThSJSgCIiACIiACIiACIiAhU21ABERABERABERABEQgcQISMhNHqgRFQARE
QAREQAREQAQkZKoNiIAIiIAIiIAIiIAIJE5AQmbiSJWgCIiACIiACIiACIiAhEy1AREQAREQAREQ
AREQgcQJSMhMHKkSFAEREAEREAEREAERkJCpNiACIiACIiACIiACIpA4AQmZiSNVgiIgAiIgAiIg
AiIgAhIy1QZEQAREQAREQAREQAQSJyAhM3GkSlAEREAEREAEREAEREBCptqACIiACIiACIiACIhA
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
zZohgMmR2eKYHDENoBE66aSTUjspFFJQb3JkodszzjijkEsVVwREQAREQASajoDM5U13y5uzwjI5
Nud9V61FQAREQASqR0BCZvXYK2cREAEREAEREAERaFgCml3esLdWFRMBERABERABERCB6hGQkFk9
9spZBERABERABERABBqWgITMhr21qpgIiIAIiIAIiIAIVI+AhMzqsVfOIiACIiACIiACItCwBCRk
NuytVcVEQAQajcC0adPMueeea2bMmNFoVVN9REAESiRQi+8HCZkl3lRdLgIiIAKVIjB16lRz/PHH
my+//LJSWSofERCBOiFQi+8HCZl10nhUTBEQAREQAREQARGoJwISMuvpbqmsiRDA1Hjrrbca9nJW
EAEREAEREAERKA8BCZnl4apUa5jApEmTzF577eW2mKzhYqpoIiACIiACIlDXBCRk1vXtU+FFQARE
QAREQAREoDYJSMiszfuiUomACIiACIiACIhAXROQkFnXt0+FFwEREAEREAEREIHaJCAhszbvi0ol
AiIgAiIgAiIgAnVNQEJmXd8+FV4EREAEREAEREAEapOAhMzavC8qlQiIgAiIgAiIgAjUNYE2dV16
FV4EYhD46aefzIQJE1Ix3377bfedc3PmzEmd50ufPn3M3HPPnXZOByIgAiIgAiIgAoUTkJBZODNd
UWcE2rRpY7beeusW+z3vvvvuaTXp2rWrmTx5cto5HYiACIiACIiACBRHQOby4rjpqjoigJC5zz77
mNatczf3Vq1amf3339/wqSACIiACIiACIlA6gdy9bulpKwURqBkCCJB//PFHzvIEQWD23XffnL/r
BxEQAREQAREQgcIISMgsjJdi1ymBVVdd1fTq1SurphIN5wYbbGCWW265Oq2dii0CIiACIiACtUdA
Qmbt3ROVqEwEDjzwwKwpo+EcOnRo1t90UgREQAREQAREoDgCrayZMCjuUl0lAvVFYMaMGaZz587m
999/Tyt427Zt3aSg+eefP+28DkSg2gS+//57s9RSS6WtgsCgKNO/uGPHjubTTz8188wzT7WLrPxF
QAQqRGDKlCmmZ8+eaa5g2d4PK620UtoKKxUqnstGmsxK0lZeVSWw6KKLmoEDBxomAvnA9912281I
wPRE9FlLBDp06ODaLB0HgyP+0Av47/5z1113lYBZSzdOZRGBChBgRZS1117bCZn+XZDt/bDnnntW
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
mDHuXu24445mkUUWyZtmvh9ps4899lha20qiLZMmf+Gw3nrrmZ122smdSuKek9AzzzzjeHzyySem
X79+5qijjjJzzTVXOFtz1113udEyz2QxIV8epdZj9OjR5t///nfWYh1yyCFm+eWXT/1WbD3i5IFj
/D333GMefPBBw7py++23n9l0001TeUd9iZNHEm33t99+M48//ri58847zdJLL20GDRpkVlllFVe8
pJ7zfHmQUbnrQR5vv/22ufzyy82XX37p2vXee+9tFlxwQX6KHX744Qdz3nnnmXHjxpmVV17Z7Lrr
rqZXr16p65N4zqPy8JkV23a5PiqPJPqoqDxKfc7j1MOz4vPQQw8166yzjtl3333DpyO/R9UjiT4q
Ko9S3yVUMl8eST3nkTALiFB2TSYCzrbbbuuETATMBx54wGy11VYOVAHlzBp1zpw55tRTT3Uv/3AE
BE+cWcN/9913n+tww/GivtOZcNMQlhZddFFz3HHHpYRUhD467ldffdX079/fCbUbbLCBeeutt6KS
Tfs9Xx68ADfaaCMzc+ZMJ7jxYuVFyMu1kJAvjyRYcY8333xzc//995u11lrL4FC82mqruXvuy/n3
v//d8MLj5e3/fv31V/9z5GdUHj/99JNZYYUVzP/+7/+aVVdd1Vx99dVmjTXWMHSKxYRJkya5wRAD
Ix+Sast0Ks8++2yKAzxmz57tsknqniPY8Jx17tzZtZkzzzzTnHPOOb4q7nPy5MnmxBNPNG+++Wba
+bgH+fJIoh7Mfgw/w3x/7bXXzPnnn5/2/iilHnHyGDZsmGPHIPPnn382W2yxhXn//ffjYjJReSTV
dg866CBz5JFHmuWWW858+OGH7p3BAJmQxHNOOvnyqEQ9Jk6caNZee20nHCJA805EmP7jjz8oXqxA
XO4lCoKVVlrJpbXxxhsb2hEhiec8Kg9f0FLablQeSfRRUXkk8ZxH5eFZ8Yki47LLLit4skqcPErt
o+LkUeq7JCqPQp5zvwan/wxzTvS71dAVFV588cXAFiSwD33e622DCJZYYonACoQunu1Mg4UXXji4
7rrr8l7Hjz4PK7y0iHvYYYcFc889tyvDYost1uL38InPPvssWGqppQLbmYZPu++58rBas6B169aB
7dRS15x11lmB1RAE9iUUWM1p0KNHj8AKManfrWAV2EaUOvZfis3DCgDB9ttv75MJrDAStG3bNrjt
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
MitBWXmIgAiIgAiIgAiIQJMRkJDZZDdc1RUBERABERABERCBShCQkFkJyspDBERABERABERABGqE
APufE/xnuYolIbNcZJWuCIiACIiACIiACNQgAbaVvOOOO0zPnj3LWro2ZU1diYuACIiACIiACIiA
CBRMYIEFFij4mrgXtGnTxgwaNChu9KLjSZNZNDpdKAIiIAIiIAIiIALlIdCpU6fyJFzBVCVkVhC2
shIBERABERABERCBZiEgIbNZ7rTqKQIiIAIiIAIiIAKWAIuwjxo1quwsJGSWHbEyEAEREAEREAER
EIHaIfDmm2+arbbaynzwwQdlLVTJE38mTZpUtgJOnjzZpT116lTz9ttvlyUf5REfq1iJVXwC8WOq
XYlVfALxY6pdiVV8AvFjVrJdvffee2kFYyLQUkstlXbu559/Nh9++GHaOQ7atWtnlltuubTzbCXJ
XuVBEBif9q+//poWJ/EDm1lRYfz48YEtjP7EQG1AbUBtQG1AbUBtQG2gzG3AbgUZzJo1K01mGzZs
WE7uEyZMSIs7cuTIFnGnTJmSFifpg1YkWKzkaitg5syZU+zlsa5j787OnTvHiltsJOURn5xYiVV8
AvFjql2JVXwC8WOqXYlVfALxY1arXaHJXHnlldMK+v3335uJEyemneMATWbv3r3Tzv/0009m3Lhx
TpPJD9nSS7sggYOShMwE8lcSIiACIiACIiACIiACDUhAE38a8KaqSiIgAiIgAiIgAiJQbQISMqt9
B5S/CIiACIiACIiACDQgAQmZDXhTVSUREAEREAEREAERqDYBCZnVvgPKXwREQAREQAREQAQakICE
zAa8qaqSCIiACIiACIiACFSbgITMat8B5S8CIiACIiACIiACDUhAQmYD3lRVSQREQAREQAREQASq
TUBCZrXvgPIXAREQAREQAREQgQYkICGzAW+qqiQCIiACIiACIiAC1SYgIbPad0D5i4AIiIAIiIAI
iEADEpCQ2YA3VVUSAREQAREQAREQgWoTkJBZ7Tug/EVABERABERABESgAQlIyGzAm6oqiYAIiIAI
iIAIiEC1CUjIrPYdUP4iIAIiIAIiIAIi0IAEJGQ24E1VlURABERABERABESg2gQkZFb7Dih/ERAB
ERABERABEWhAAnUhZE6dOrUB0Td3lX777TezwAILmD/96U81A2LPPfd0ZaJcUX+HHHJIrHI///zz
Lq0RI0a4+GPHjnXHZ555ZqzrFamxCEybNs38/vvvjVWpOq5NLb6HwHneeee598Rll12Wk+7DDz/s
4hx11FE545T7h88//9y0bt3anHDCCeXOqq7SP+mkk8zpp59uJk2aVFflLkdh25Qj0STS/Oqrr8wt
t9xirr/+evPee++Z6dOnmwUXXDCJpJVGjRD4/vvvzZw5c2qkNMastNJK5ptvvkkrz6hRo0ybNm3M
Zpttlna+R48eace5DhAoqOOvv/7qovzxxx+Gev/888+5LtH5Biaw1157mXfffdfsvffeZv/99zer
rLJK1WtLG33sscfMp59+ag488MCql6fSBai19xD1/+WXX9x7gs9cAQGZsv/000+5olTkfBAEhj+F
/xDgfX/RRRe59/7f/vY3s95665n99tvPDBo0yCy00EJNh6mmhEw6YkZnCJaPPPJIqmPmrtxxxx3m
oIMOarobpApXjsCpp57aIjMEzPbt27v22OLHGCc23HBDaa5icGqGKB999JF5+umnXYc8cuRIw9+a
a67phM099tjDdOzYsaIYPvjgA3PdddeZG264waBhRXuPEDzffPNVtBzKTAQaicALL7yQJvhzzN+R
Rx5ptttuO7PvvvuaLbfc0ikvGqneuepSE+ZyTIjDhg0zSyyxhNlxxx3N/fffnyZgrrPOOqZLly65
6qDzTULgiy++MA899JDBhPTUU0+ZH374IWfNv/32W/P444+bd955x8VhpD1r1izz448/5rymmB/Q
uN91113mueeey6qdRGP58ccfG8qj0NwE0ErtvPPOZp555kmBeO2118zhhx/u3m+77rqrG2SX05w+
e/ZsJ1j269fP9OzZ05x99tlOwKRA3333nbnvvvtSZdOX7ARq8T2UWVLa2uuvv+6UM++//37mz2nH
WFdefvllFzfKNQ3NKe9e0uY6hZYENt98c2cVYBC56qqrpiLQF9BXbLvttmbJJZc0f/nLX8ybb76Z
+r1hv9jOtyrhyy+/DM4///ygd+/e6Nlb/NmbEJx44omBNS1VpXzKtLwErNba3fPlllsuVkYXX3xx
MO+886a1k65duwZPPPFEi+tpV1YDmYq7zDLLBHfffbc7PuOMM1rEz3dirrnmChZeeOEWUezLIejT
p0/QqlWrVD6Ub4sttgi+/vrrVPwxY8a4363ZxJ2zL2d3bLWmqTj60lwEZs6cGdCerRYz1XbC78DO
nTsHxx57bPDWW28lBubZZ58NBg8eHFitfIs855577mCHHXYIHnjggYDnsplCrb6HrPDv7tMFF1yQ
83bYAYGLYy18aXGstjywCpu0+2zde7K2JyvouPdbuP0tvfTSgbUmpqXJwTnnnBNY/8tUurwXice1
xx13XIv4OvEfAvQVcF588cVT7MK87byE4Nxzzw2sNaEhkVXUXI45HE0U5hnM4viUZIZ27do5bSaj
ARyKGWHhVGxfuJlRdVyHBFZYYQV37wspOiY9tD2bbrqp+cc//mGWWmopZ344+OCD3aiQtmGFVZfk
VVdd5UaIG2ywgbuGEePNN99sMEcmGdBIWWHS4HODidEKDubyyy8311xzjbGCrLGCbqzsPvvsM7PR
RhvFiqtI9U8Ak/iQIUNMhw4dzBFHHOHea7RPJlD4gP95EuZ02taNN97oNJeYxjNDr169jBU8nX9o
p06dMn+u2WPbEzstWvgz/B0NW7bjzHO4B7Rt2zZ2PavxHuIejhs3LmsZp0yZ0uI8GsZNNtnE4DPO
u3D55Zc3r776qmFyEL6BaM69P/lNN93k3lN2YOzaoh00u7gHHHCAa6No3LwLB9aj448/3qy++uru
/UZ7uf322w1xw+G0004zWHcyWXOc7Zy/V/l+ixOn1q7HTxb5heDLlkvzO2HCBGOFdGOVaga5B3O6
HfQZZKGGCBZA2QOSvG3kwaKLLppVkuc+6K85GFjzgWtvcTUI1rwdoNW2nXLA93BAi0m7sQKkO23N
54F1qwgYiaMtCgc7c9zFTUKTaQWCwDpwB3YGYTiLwJrEA/tiCPr37586H6XJtB2F2r6e/8g2YE3s
wS677BLYQXpgB+ep9pX5xZrkAmuSC7baaqsALXyu96oVHlw7tQOcwJrOg/XXX99pv9Zee+2gb9++
AZ9oWtdYY41gtdVWc1p7rE5oXaxwGqy88sqBnSgX2EFjYM3uAZqy7t27B926dQuwMCy77LLuObQD
QpcuzyUaWiucBIsttliwyCKLBJSB58hO6AyswOe0rPPPP797hqzwF1BntKzUI6xBy1WnQs9feuml
TnPLdVEWlUq/h7wmM06dwppM7iXX0OeGg3UdcufDGkffJ1s3onBU914jDd5dBNoU72DunTWXp8Ud
OnRoWrrc/zhlVpzc/T1t3ypQAuvaksa6Xg8qoslkthV/+WbK2UaXN1jVfNM4yuYFUec/ch8LCYzy
GM3bTrOF1gG/MvzbGJ0TJk6c6DRCLC/kR+A+L/syNLfeeqs/LOnTdpZOixlOBH/PRx991Dl8o7GP
Gxjt2k43bnTFq3MCtJNifC79KgW8R7EAWcErjQRtDq06Gie06lGBclghokU0JgAptCRQrffQNtts
4zSQLUtknL85WnAfuO/WLcLYgYFBKxkOduDrVmexLhHGmr3dT9YUb/jzgTb04YcfmhdffNGd8u+x
l156yb2D0bYxCTIcWI3g6quvDp+qme/Wlcn4P96zfM/8zHaukDi5rrfugMaax40dJKXy/eSTT9wq
ObkAcd+wcrCUXiPNQq+IkGlHyYa/Cy+80Nx7773G+nE45+Fs6mNUxDvttJOLH74ZnOOmKTQXAb/O
WDaTMg+w1ag4kyNtiRckgQkNmcGb0zPPF3uMAzzmJtoyS9JwbH0y3QulkDSt1tXwQlJoDgK4U4QH
25MnT3ZLtYXN5WESLKvFUkf77LNP3smPPAuszcfzgDsSk96KEWbJO7NjztWRZsbL7Jz9ca1eb7Vu
YdR5v1frPYT5NNc6mEyQDQuZfoIP7yPchDIDEyVxxQgHTOlWo2usVcgJkrxHM820/r2K6T0zZL5X
EWIZBIXvefi7bxP+M99vceJkuz5zAJZZ5koeM9H0nnvuMddee61hwlhmsNZd566CcFlLa0ZnlosG
FgIAAAaTSURBVLOU44oImb6ALI3B+nD8MYsNfyFeiP4BJh43hfUxX3nlFbe2FP4JdMQKzUmA9kCw
ZrSsAPzSK7yQ/Mg7U4vJhXG0O1kzyHKS9rrWWmu52e1oWHfbbTcn2OLzVEjHlSVpnWpwAviwMcPb
TkRzA5RnnnnG+WyFq422f/fdd3fCpTVbh3/K+x3hAN9j/hBaEUB4x2bzZycP4iHAWnN4mlCQN5MG
+zHbvIBsVazF91BmOf16mfjaopTJFhiM+IBPsJ2A5nw0WdmA65gNzTJbxxxzjI+WWo6H1QcyQya/
Wlj3NbOM1ThmLgmCJX6rmdwQglnCCMESv9fwPalGWcudZ0WFzHBl7Ixfc8opp7g/ln+53mqEmN7v
bwiO6vyOIzGOzHa2pcFBWaG5CPjR85NPPukm8oRrjxYILSBrDRL8qDqbQ7z1UQpfWtJ3Ftpl0XZ2
dBg+fHgqLUyZ+ZZVSkXUl6YkwODkf/7nf5yASVsJBzqeAQMGOKFv++23d1rx8O+FfmfJN8yb/L3x
xhtO2LzttttSWnMmraHB4g/BgsWiMdPhCqLQkkAtvocyS+ktOLyDmKSTGRhs+OWzGHQjYDLYwBwe
HpijeQsHP1GIpYvoh8MhrCAKn2/m7wwcs1nemPTKRDsUZ820JGNNrJPJTGD8Ohh9Y4JkFjGaKQLq
e0w/XmXfzI23GetuJxs4/xRecGEzIyzYpYTAKJzAKJpZu7ShcFw6dF6oSQVv2mQUGg5opzJH9uHf
9V0EsNyEBUzM4Ww5ir8WG1CwKwhuF0kGZgTje4dv84MPPmjsBKK0PMaPH+80V6zagBVJoSWBWnwP
ZZaSdaYRCPEfzVzvku1tMcfiskbwZnPc2MICJgIqJu9wwFeQmfj4e3qNrv+dFTUU0gkgz6BEI9Af
Yb1AkYYbAyvlNJOACYOqaTLJPDPkMqfzAsZ8pNB4BNBEYm7OFjCRY3I4+eSTnUYGEwPabbQtjBaP
Pvpo98Aeeuih7nKcpdEuMtpG+80EIDQ2TPjxgmG2fAo9x4sZgRJtAfnh+8b2k2iF2PqUFzhaA8xP
CiLgCaANowNiglox5nCfTrGf7F41cOBA98dzceeddzp3JT/RgwE9Lh/NGOrxPZR5n/BPxMqCCw/a
8LPOOssJO/hdItygtfQaToRRJhwyWZH3Fu0SjTfXe9cijnGlsCsBOH9flthB247vL0sY4YqBAkgh
nQAKMibhERjQ5XL1Sr+qgY/qYVq8FmSvh7tUWBmt/2TkUhcsb0KwnV9g18dMW2DdPpKB9YsM7Ii9
RcZXXnllwNIpxGFJFJZz8Ut4kE4hwZoxWyzGTtntOplp5Wc5FxZa9+VkMWQCy4BQDi3GXgj1xo1r
t5YMrO9cTVXQThgJ2BzArvdaU+WqRGFq9T3klzAqZjF2lrCyAmXa+8kOugMrNKYhtZagtGUFWX7N
+mIGdg97tyQV7y3epQTewXZAnbb5BO9Yu6Oayye8NFJaJjpoegKtIGAbk4II1DwB/CDZgpSJE/iR
eZNEroKjrUGzyMgSn07cMJjdi8N1EuHtt982+H9iSgvP5sQsySSkrl27JpGN0hABEaghArX2HsqG
BrM2bhC8i5iMmLmkkb+GORAsAYcVEbcK77OJdQZrDH6e4dnmaHzRjOJagaWmlmZy+zrps7YISMis
rfuh0pRAAMEOP0kmALFeYDgMGzbM+SMhGOIHpyACIiAC5SCg91A5qCrNeiVQUz6Z9QpR5a4NAiwF
gV8SzuiMsNn6kZE5W5ji8M72jxIwa+NeqRQi0KgE9B5q1DurehVDQJrMYqjpmpolgNM667+NHj3a
zJgxw5UTx2smWlxxxRUy79TsnVPBRKBxCOg91Dj3UjUpjYCEzNL46eoaJYCr8bhx45xQyS4o8h2q
0RulYolAAxPQe6iBb66qFouAhMxYmBRJBERABERABERABESgEAI1sRh7IQVWXBEQAREQAREQAREQ
gdonICGz9u+RSigCIiACIiACIiACdUdAQmbd3TIVWAREQAREQAREQARqn4CEzNq/RyqhCIiACIiA
CIiACNQdAQmZdXfLVGAREAEREAEREAERqH0CEjJr/x6phCIgAiIgAiIgAiJQdwQkZNbdLVOBRUAE
REAEREAERKD2CUjIrP17pBKKgAiIgAiIgAiIQN0RkJBZd7dMBRYBERABERABERCB2icgIbP275FK
KAIiIAIiIAIiIAJ1R0BCZt3dMhVYBERABERABERABGqfwP8BY8fhmoq7rBwAAAAASUVORK5CYII=

------=_NextPart_000_0011_01CF9A21.CD190140
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://kafka.apache.org/images/log_compaction.png

iVBORw0KGgoAAAANSUhEUgAAAlAAAAGPCAYAAACTYu4iAAAACXBIWXMAAAsTAAALEwEAmpwYAAAB
1WlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczpt
ZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS4xLjIiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0
dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRl
c2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMu
YWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOkNvbXByZXNzaW9uPjU8L3RpZmY6
Q29tcHJlc3Npb24+CiAgICAgICAgIDx0aWZmOlBob3RvbWV0cmljSW50ZXJwcmV0YXRpb24+Mjwv
dGlmZjpQaG90b21ldHJpY0ludGVycHJldGF0aW9uPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlv
bj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6
UkRGPgo8L3g6eG1wbWV0YT4KbQULngAAQABJREFUeAHsXQeYFEUTbRDFHEARUSQqCiZQMIFgxJwV
MyImzAlRUcH8q5hRMCGoYM5ZEcQIYgIRUVEwIEkUURQDzP9ec73OhrsNNzszt/vq++pmpqenu/p1
30xtdXV1Lc/zjEgICAEhIASEgBAQAkIgdwRq555VOYWAEBACQkAICAEhIASIgBQojQMhIASEgBAQ
AkJACOSJgBSoPAFTdiEgBISAEBACQkAISIHSGBACQkAICAEhIASEQJ4ISIHKEzBlFwJCQAgIASEg
BISAFCiNASEgBISAEBACQkAI5ImAFKg8AVN2ISAEhIAQEAJCQAhIgdIYEAJCQAgIASEgBIRAnghI
gcoTMGUXAkJACAgBISAEhIAUKI0BISAEhIAQEAJCQAjkiYAUqDwBU3YhIASEgBAQAkJACEiB0hgQ
AkJACAgBISAEhECeCEiByhMwZRcCQkAICAEhIASEgBQojQEhIASEgBAQAkJACOSJgBSoPAFTdiEg
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
2y7TqVMnM2XKlDRAvvvuO7PLLrsYbGFlGjZsaDbffHNz0003mbvvvts0adLEvPfee2nPKKH4CGgv
vOJjrBqEgBAQAkJACCQQuOCCC8y1115rsOequfDCC02DBg3MO++8Y+iM3q5dOzNhwgSzwQYb2Pzf
fvut2WqrrczPP/9sFayOHTsa7PNozj33XNO0aVND5Qp7+SXK1kl4CEiBCg9r1SQEhIAQEAJljgCV
nxtvvNE0b97cvP3226Z+/foWkeOOO85ss8025sQTTzQnn3yyef31121637597fTeFVdcYS6++OIE
egcffLA59NBD7TWnAkXhI6ApvPAxV41CQAgIASFQpgjcfvvt5p9//jEHHHBAQnlyUBx//PF2mm7U
qFHml19+sVanESNGmMaNG5uLLrrIZbPHQw45xGy33XZJaboIF4FIFahatWo1BXvg21KbjbTa4GFg
3n8JvEJqHl0LASEgBISAEKhJCHzxxRdWXPo9pRK+c6Zt27Y2mfmmTp1qaF1q3bq1qV07/XPdoUOH
1CJ0HSICsZzCwyBaBhjcDz4C/Bj4SAyif3AUCQEhIASEgBCosQh88803VvbKrEeNGjWy97kqz0U2
d/5QqY2uV69eapKuQ0QgXaUNsfJMVUF5olI3AkzlaQj48DgqTxzQZ511FsT7j5YsWWIOO+wws8wy
y5iHHnrovxsVZ2eccYZ5//3309Krk0Cz7rrrrptWxCOPPGLloDyLFy+29zn3fskll5g999zT0FTM
pbNBUk3ExLX/4YcfNjfffLO7DOyYKyb8lXnvvfeao446ypx55pmGJvx///03MDlq+jiZO3eu2XXX
Xc27774bOiacbqHDbiqPGTMmMFlyHSfjx49Pk4Ny/frrr4HIUlPHyYwZM8z1119v322nnnqqdawO
BJAiFMKVdySnSKVW8eGHH9okOog7/yhuFZOJMq3Yy5RPacVBIFYKFJSnZdHMR8D0jLsJfDw+LEu/
/rhwhHyHgjmt9y34efBx7h6PuL4UzPtrpKSvWpF+oT89iHN+AOn89+ijj5p77rnHHH744UnFfvLJ
J2bgwIFm5syZSenFuHjuuefsh3jfffc1Dz74oFWk+M9KkzGvueXA008/bXbaaSfz7LPPFkMEW2bc
MXEN58vp6quvNh988IFLKtqxMkzOO+8806tXL+vzMHHiRLtkee+99y6aHCy4powTysr/rZEjR1p8
eF0syoTJ9OnTrdMv/7f9zPg9xaLKxslrr71mBg8enCQHZXKWimLIkwmTOL1P6Cu0xRZbGPoKrbPO
OmbIkCHWN8j9cCwGJtUpk8oyyTmJ+8viSjuOqzp16phmzZpZR3Pe/+yzz/zZEudO2Uok6CRUBGKj
QEGxWQ4tfxx8ILg/XiDngNOWFiDflbhPJYs+UY9WHO9F+h04dzQDJ7uDU79Ae1Wkf+8yBnU855xz
rAXhjjvuMD169EgUy5c+r6m8ZGhOIl9QJ7RccGUGf63TCsV/RNJtt91mVlhhBfPxxx+b4cOHmx9+
+MG0bNnSXHrppUFVnVZO3DH58ccfDRWXzTbbzHz66adp8hcjIRMmv/32m7V+DRo0yLz44otm9OjR
5pprrjGvvPKKXa5cDDlqwjhx7ebS7qCtpa5s/7EyTKgs0Mr7/fffJ/EJJ5zgfzzQ80zjhBV8/fXX
VplMlYWKQzGoMkzi9D6hVZ3WGsZCohV38uTJNthkkBbCILE98EB+4oz98Zqq5FEZJtESvdJKK9kY
T/R/YoiD1PZwJZ/zp7IP6U/oCMRFgaqLlj8J3he8BDwKnEZQkjZFIq1Hw6CMdAH3Bu+M6xvBvXC/
PY4klkWb5wG88BFH7p/gZ3xp1T6lEsLpHw5oLj/106xZs+xUDBWaYhNfILQ6cW79ySefNMstR510
KXHqcL/99rOB25iy/PLLGy6DnTRpUqBTRRXVWcUs7pgsXLjQvmjbt29v47A42Yt1rGycuGldtySZ
9bOvSEFNzdjCKv7UlHFCcWn94ZTmnXfe6W9C4OdVYUKlxVkNAq84Q4GVjRNmpTIXlixVYRKX9wmt
xxwbjKXEdxqJlhv+EMnk2mAzFPEP6+X7pDImblSgdthhB6vw7bXXXuaxxx6z1qj+/fub008/3a7C
Y+gCEh3HOXPB4x577GGnb/md4fvh/PPPNy1atChia1R0NgSWmiey5Sr+fZpsKMt94GPB90MZ2gzK
0W8499MpuKDSN9CfiHOu4jsH3A08Hs/9gudfxnlXHFfE9R840mK1B/iFDOUiuTDivDvjc3D65eyz
z04rhL8kyFSknnjiibT7QSVwipC+TWuuuab9ZeNeJq78yy+/3Fqc3DWPY8eOtSZvZ6Xy36vOeU3B
hB+iBx54wDaVEYCLSVVhwqlUfgjoO0f6/fff7TTNeuutZ7bccstAxapJ44Q+hd27dzdHH320HduB
AuErLBsmVFpWWWUVw48afU64pJw/lBgEMWiqapywLipzfJeccsophn5hHB/86NJaESRlwyQu7xP2
DX0FGXxywIABtn/4f33SSSclfiwGiUu2sjgFR66MFixYYG89//zzdgxx2pGWZke0NvHHL2cHHO24
447mrbfesj8kbrnlFsP/C96n4sgfwPyhytkFUfgIxMUCReXpPCg2x+F4C7hpxRGHJGqFK67GOxUK
0X2Ocd2vIv2/UWfMQ0hbEdwVTNoNzLcM0wMh+g/16dPHcNXEM888Y+bNmxdIufkWwn/K3Xbbzb5E
GbWW04aptPPOO1tzMNP5sabcNM9feeWVqVmrdV2TMKlWQ/N4OBsmGMcJ5alr165mtdVWM3xRcjqY
94KimjZO+EubSgKVimJRLphQaXnhhRfMtGnTrE8K/Qe5lQb/f4KkbOOE/7d0lub2HbQu86PJ/18q
UZwGDopywSQu7xMujOEPQFreuXCHFltO6bVp0ybUPePoo4fvV1bmdiwkKuR0peBULH3MnnrqKWtd
pELErV1SibMKXEDAfp4/f771k+rZs2fim8NtYEThIxAXBWo4Bt8NFc2/CEd6Z/bAx2P/FEg4SqhA
rZqBn0Oa3wuY1wvBbhqP03dU/18EB0JUVvgrgC9SDmpGko2CaLHgPxidD3nkPxZftJmIv3bocEnL
C03H/IUfJNVETIJsf6ay8sGEviXsG5roGSgvyFVnNWmc0CeNVg5+ZIr56zoXTOjDyB8ltBZQmaPV
g9bB1FW4mfo+n7Rs44SWFgZh5IeUVof777/f+svRD4bXQVEumLi6on6f0I+RuHB7EzpU851GhZc/
ZmmRijtxHHGxyP7772+nHjP9YKI1jf52XA3K/wXuh0fi9i20THHWgT5goggQyEVrLlYeNLcpmI7i
t/nrwPU2YK7hngNe293DOZUirsqr79LcEWl1wXXcNY+gEeBfwLRE0a5K36msvxKQz+vXrx+yVk4w
oXoY1IkMsBawQg/z1Yk0/wlW39n7+PXqT67ynOXhn2dBVZkw9+/hH8jDP5fNhpe7h183HqaFPDgo
Jh7FS8bDtIO37LLLenwGvzIT93I5iQsmlDWbLLli4m83XsDekUcy3FjulE0OlpTLOIGfj4ePYFLF
+CVt+xH+P0npmS5KcZwgzIa39tpre/iwWN5nn31sv2OrC++0007LBENaWrb+KWScuEr4foDlI+l/
zN1LPWaTg/lzGSep5bprTPt43bp1c5eVHktxnPB9ynbBHSGp3bD0eHBpSEqr7ILPg/vjftZvQ0qe
fpWVGWQ620EZ+S7Aj2RbNN/zBx10kE2/7LLLgqyunMvKt/+tPxH6Jl6EHhwLifjzgRanu33Sjcc5
rWZJHtnQ2unAsgh8IthPnK5j0I3+4DXAw8GB0YorUi9bSvSBokMgV3XRDBsm0Zzv/JjoQHnrrbda
qxg3q3TEVV3Dhg2zfk9csk8TcjGoJmFSjPZnKjMbJlx9Rx8sjPvE43yGU3n81RkU1aRxgo+D/V/a
fvvtjWPisPHGGyciNQeBSzZMaFlmSJLUaXFOHdFJOVN06ELlyjZOXn75ZesPRpkcLVq0yE4D0S8r
KMqGCeuJy/vEOdTTKugnXhdrZaK/njDO+X6gzxOn9TfccENrgeI+evSppd9tMVdSh9G+mlxHXKbw
MmHYD4nURPaBgnR8RQbGhpoNvhppu4AbgvfENT2BvwOnKkj0zqMFig7mM8Gvg4tGXEJLxYQvXL7Y
oqJjjz3W8APEf6xx48ZZMTj9wDSuPKPZ18/FlDPOmBSz3VWVnYoJ/TfmzJljQ01QYaKTMPuOoSa4
X1axKM7jZPfdd7cKFH+QkBksksQVTMWcKk/FhEEPGfrjmGOOsf3y559/Wh8k+jzS76WYlDpOGjZs
aKcR6TTOccIpP65QpExhYsI2x+V9Qqdr+g1yapXT3fQR4g9H+qsVE5Ni9ntq2euvv74NZ8JYUFSi
OBbvuusuQ0d/+gmKokOgTnRVV10zfo3/BeWoO3JRA7gJ56OQ9g2OdAbn1NxrYEc8Pwv3f3UJPOL6
b+R/HKcngO/DNaf/ikaYcrBxSPhB5Auf/gpREf/BuAz5iCOOsEtkP//8c0NmIM1UAi6pSYFdxxUT
vnyKZYXLBl4mTK677jqrKPTu3dv6dNAaQX8o53SarcxC72ucpCPnx4TjxP3Sb9KkiXX2548jTCPa
/kp/OriUTOOEShWVBfrBUInikVH0aZkrJvkxYQDIOL1PXOBiWippPaNVkMFG6Q9aSkRlkSyKEQL8
eNY0Bnxc790GvDd406rkx/3zwIwt1ayqfP57yJvVBwr5i06UI5sPVNGFqKggLphQnLjIErQcmJrx
oPR6cIb14Mibc9dqnGSGKuj+QcRrDw7cRfEfzNyCylPpCwMlJuH7WHnO/+6U+jiB87jtH1jZ/2t0
DmfEBdwfWfP9FvbLoXhlqTkI5Nv/JrYWKAzoSgn9QUvSZxVcaT5Yn7gGvCf4JTwzrdKMuiEEYoAA
fZ7gJB0DSSRCJgQ4nbfVVltluhV6mvP9Cb3iGFdIvyCySAiEhUCNVKByAQe600DkawlmtLseuTyj
PEJACAgBISAEhIAQyAWBklWg0Pj2YIZC4IbEXNUnEgJCQAgIASEgBIRAIAiUrAIFpWnrQBBSIUJA
CAgBISAEqkCAQS25GjITcbGK26Yp0/180xiRnmE0Zs+ebbgNlCg6BOIcxiA6VFSzEBACQkAICIEc
EeCGv2ussUZGXnnlle12O//73/+sk3KORWbMxijrXHG5ySab2O27MmZSYmgIlKwFKjQEVZEQEAJC
QAgIASBA5ca/ATi3xZk6darh1kQfffSRPXJ7okKJISsYJJR1cJN6UbQISIGKFn/VLgSEgBAQAiWC
ALZdybgH3/vvv2+4ATMVIAa/ZIyvQohxyUjcbaLU4lwVgkfUz2gKL+oeUP1CQAgIASFQ0gh06NDB
dO7c2SxZssS89po/BvR/zYbfrrVW0bepMuLGyaTKggCzDG4q/+abb5qffvqpsmKS0hkYls+kUi7y
pD5TbtdSoMqtx9VeISAEhIAQCB0Bt70Xo8f7iU7h3NOOccYY34tb9my00UY2mrrLx+m/evXqmRde
eMEmYfNz06BBA3fbHhktnmW0atXKKmtrrbWW3WNzypQpSflOPfVUg03lzeTJkw021LZ7OiJgcyJP
LvIkMpf5iabwynwAqPlCQAgIASFQXASo+HD/UW767N+eidvx0DI1duxYs+OOO9oN6efOnWueeuop
ww3qudruhhtusMrSySefbLcVorWIW3TVr18/IfQFF1xg9wCk4kWliMrVO++8Y4YOHWratWtnJkyY
YJUzPrB48WK7XRT322Q9VLic31au8iQqLvMTKVBlPgDUfCEgBISAEAgGgaeffjppOoxO5JMmTTJU
ijbddFOrAHGfS0d33HGHVZ5OOeWUpL1T+/TpY61H9JfiptVUcq6++mq7ByEVKG6w3aJFC1sMlSzm
YxT2t99+O6FYcTNl7mzA56l8cQ9DPz3//PNm5MiRVnFz6fnI454p56Om8Mq599V2ISAEhIAQCAyB
7777zowaNSrB3NCdyhOJq+foRM6YUY6uueYaU7duXcPNxP3EkAjHH3+8Tbr//vv9t9LOuWk9LUcH
HHBAQnlymVgGpwwpE/ZydMn2uNdeeyUpT0wMQp6kSkr8QhaoEu9gNU8ICAEhIATCQeCMM85IW4U3
a9Ysw9Vz9D3itBk2DbfTcnTypsP4uuuuay1TqRI6hWfixImpt5Kuv/jiC3vNqcBU4nawbdu2NWPG
jDHM599r87DDDkvKHpQ8SYWW+IUUqBLvYDVPCAgBISAEokOATuG77767eemll+xUHC1GtDgxKCZp
xowZpnv37pUKyGnAqoiWLVJlYQ0aNWpk76euyqOTuZ+CksdfZsmfc6miOBkDdPoSsCeOJwb4VaW+
0fjMOgY0TuL5/xvT9+ojBXwH++EZSwMGDLDj8dxzz3VJGY+YTrP5pk+f7sGXyZ7Dd8n78ccfK2Uo
Pomy9t9/f/sMgnMm0hAiwaYh1lQizX+y4YYb2vsI5mmTseLOXo8ePdqfrSB5kgqo+Rd560KyQOG/
OQPVatKkiWnatGmGW+El0ey65ppr/tumTZvI+4my0NTcsmXL8ACopKa4yBInOTRO0gdLnPonDv87
xEPjJPM4QeoP6XeCTaEz+YIFC+y+eLRKcX88hhOgBYkhDpo1a5ZUISOYP/vss4YxpBi2oDJi6AMG
6qSTePv27ZOy/fzzz9apvU6dOmnlJ2XEBesPQp7Uckv6Gkpj3lpXqT+DDvf69esXuT5NOfBrYUHk
grDDY4IJsYiLLHGSQ+Mk/b8kTv2j90ly/8Slb9z7BPL056slT+7H50nZLFBz5szxsPGvfXd169Zt
6UP4e/DBB9s0hCpIpPEEATe9rl272nuvvPJK4l4mC9QTTzxh82277bYeAm0m8vJk0KBB9t6xxx6b
SK/MAsUM+cqTKLQ0TvLtfxO5ZQMDVyQEhIAQEAJCoMYj8Oijj9o97/wNoRM5Qw0wijiduG+66abE
bYYfoG8U4zjRaXyHHXawx7vvvtuGGIDClHXT4AMPPNA+x+jjXFnXs2dPG3STcaeuuuoquwqvb9++
iTqrOglCnqrKL7V7UqBKrUfVHiEgBISAEIgEge+//96Q/bTOOuvYcAFcJXf++efbaTJ3n4E1x40b
Z4488khz5ZVXumSz8sor2xV7zJ8LMaYTYz2NGDHCwGKVeKR169bmySefzNn1Iih5EgKU+IkUqBLv
YDVPCAgBISAEiosAnMcNuRCCj6u1WnHLFTh6W+WJfk+pq+RYNiOHZyLujTd8+HAbjZwhE2jt2nzz
za0fL0MZ+Gnw4MFJ28T47/E8H3lSny23aylQ5dbjaq8QEAJCQAjECoHatWsbWovI1aH11lvPkKtL
QclTXTni/rwikce9hySfEBACQkAICAEhEDsEpEDFrkskkBAQAkJACAgBIRB3BKRAxb2HJJ8QEAJC
QAgIASEQOwSkQMWuSySQEBACQkAICAEhEHcEpEDFvYcknxAQAkJACAgBIRA7BKRAxa5LJJAQEAJC
QAgIASEQdwSkQMW9hySfEBACQkAICAEhEDsEFAcqdl0igYSAEBACQqAmI/D333+bzz77zHz88ccG
+9qZDTfc0GyyySZ2i5Wa3K6wZP/jjz8MMWSAUG66HFeSBSquPSO5hIAQEAJCoEYhwAjgvXv3th/+
du3a2X3pTjjhBMNtXBjg8vLLLzeLFi2qUW0qprCLFy82v//+u/nrr7+SqiFma6yxht3mJulGzC6k
QMWsQySOEBACQkAI1DwEZs+ebfe8GzBggFWgevXqZbgp8LBhw0yfPn3M8ssvb/r162f22Wcfa5Wq
eS0MXuLXX3/dYnX22WcHX3gIJWoKLwSQVYUQEAJCQAiUNgKnnXaaefvtt03Hjh3Nww8/bNZdd92k
BnOvvI033tiMHDnS7ll34YUXJt3XxX8IUOkcMmSIWW655f5LjOGZLFAx7BSJJASEgBAQAjUHgXHj
xpnHH3/crLTSSuaJJ55IU57YEm4OfOWVV9pG3XvvvRkbt2DBAquE0X+K04G50MyZM83PP/+clnXe
vHnmiy++MJ7npd1LTeC0Ijch/vPPP1NvpV3Tp4ubHv/6669p91ITOEU3ceJE8+abb5off/wx9Xal
13Xq1DF169Y1qRsh8wG258svv7Rl/vTTT5WW4b9BOSZPnmzmz5/vT672uRSoakOoAoSAEBACQqCc
Ebj55ptt808//XTToEGDSqGgb89NN91kTjrppCRfqBkzZpidd97ZrL766qZTp07W4ZznN9xwg+HH
39HUqVPNsssuaw499FDD6a/27dtbZY11dunSxUyZMsV89dVXpm3btmbNNdc0G220kfUluv/++10R
9rjLLrtYh3YqX/vuu6895zOrrrqq9duiE3cqvffee6Zbt262fZtttpl9ZvPNNzdnnnmmWbhwYWp2
Q0xYHvPQB4wWub333tuwrSTKu+eee9rzwYMH23Y9+uij9vrEE0+05b///vv22v256667LEatWrWy
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
wFJWISAEhIAQEAJCQAgQASlQGgdCQAgIASEgBISAEMgTASlQeQKm7EJACAgBISAEhIAQkAKlMSAE
hIAQEAJCQAgIgTwRkAKVJ2DKLgSEgBAQAkJACAgBKVAaA0JACAgBISAEhIAQyBMBBdLMEzBlzw8B
xr4ZMmSIGT16tKlfv77Zb7/9zA477GDq1Il26J111lmmQYMG5qKLLsqvQQHlnjFjhhkxYoTFpVmz
ZqZPnz5m/fXXD6j03IuZOHGiGThwoPn+++9NixYtzDnnnGOaN2+eewEB5hw2bJh59dVXzWqrrWYQ
FNTsvvvuAZaevaiHH37YzJo1y3Bs+Onff/81L7/8snn88cfNuuuua7p162Y222wzfxadCwEhUIYI
yAJVhp0eZpPPO+8806tXL/Pzzz8bfqx32WUXs/fee4cpQlpdVFxuueUW88UXX6TdCyPhl19+MVts
sYVVoNZZZx2rYG633XZm8eJwt8D75JNPTPv27c2zzz5rVlhhBSsHIpqb7777LgwYkurgODn22GPt
GBk3bpzZY489zH333ZeUp5gXf//9t7n66qvNBx98kFYNAsiagw8+2MyfP9+89NJLpmPHjmbSpElp
+ZQgBIRAeSEgBaq8+jvU1v7222/m5ptvNoMGDTIvvviitbZcc8015pVXXjFfffVVqLK4yn744Qdz
6qmnmnr16rmk0I+XXHKJadq0qXnvvffMvffeayZPnmxmz55txowZE6os119/vbWo0Pr05JNPmqlT
p5pFixbZ/gpTkOnTp1uF9tJLL7UK1IcffmiuvPJKc8YZZ5g5c+YUVZQff/zRUHmjRenTTz9Nq+vL
L780AwYMMPfcc495+umnDWVr166dOeGEE9LyKkEICIHyQkAKVHn1d6itff/99219hx56aKJeTuGR
fv3110RaWCecTuzRo4c54IADzDbbbBNWtUn10NJx5513mgsvvNAsv/zy9h6n8KhgcnooTKLSRkvY
sssua6tt1KiRVeyoRIVJb731lrW+nXjiiaZWraV7Infv3t0sXLjQjB8/vqiisA7iQEscp3RT6bHH
HrNTz0ceeaS9RfmOOOIIQysZp2FFQkAIlC8C0TqilC/uZdHynXbayVBhWGYZ7qVqzO+//24GDx5s
1ltvPbPllluGjsFtt91mvvnmG/PUU09ZP5bQBUCFrJ8+NbRi0LIxZcoUs8EGGxjsZWdWX331UEU6
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

------=_NextPart_000_0011_01CF9A21.CD190140
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://kafka.apache.org/images/kafka_log.png

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
AEFKAicnI6MC/g875wnuegQabAAAAAlwSFlzAAALEwAACxMBAJqcGAAAIABJREFUeAHsfQl8VcX1
/+FfELACgoIKWrDQVqo8WqkVK1vAWnDh0f6wthKtuARqrQRtxbhgDVYMliVoMWJtaCW4BC3B2uAS
AsElaIP6UIKSaFgSIIEEXpAXeLHz/565d27uu3kvCwQMcM7nc95sZ86c+d65M+fOnZsQCQkCgoAg
IAgIAoKAICAICAKCgCAgCAgCgoAgIAgIAoKAICAICAKCgCAgCAgCgoAgIAgIAoKAICAICAKCgCAg
CAgCgoAgIAgIAoKAICAICAKCgCAgCAgCgoAgIAgIAoKAICAICAKCgCAgCAgCgoAgIAgIAoKAICAI
CAKCgCAgCAgCgoAgIAgIAoKAICAICAKCgCAgCAgCgoAgIAgIAoKAICAICAKCgCAgCAgCgoAgIAgI
AoKAICAICAKCgCAgCAgCgoAgIAgIAoKAICAICAKCQMsj0KblVYpGQUAQEAQEAUFAEPi6Efh/MKA/
+EPwCnAXcCw6GwW54FfBOeD54MOhjqh8M1jZXILwVPCD4NfAieCjTc3B42jb1lh7btvfhLCvsQpH
ufwstLcG3BptO8pQHJXmOqCVX4LfBd93VFqURgQBQUAQiILAN5B3MZgX+21gdiai0bnINA4Bh1vA
p0UTbGJee8iNB7t1liB9DngrOAx+C3y0qal4HG27mtJeWwhdCmZMK8GTwK2JzBhqjbYdTZzOQGN/
Ak8Fs7N9uBRLXycovh/8dd1Lh9svqX+cIcBPQkKCQCwEeIH43FXIjsAA8G5XXnOjJ6HCeXalvQjv
Bo8GfwUOgoWajwA7GLXNr3bUarB9JzqxM9gP/CD4LjDv8hwONaSPX0eeDOb5vfPhNCJ1BYGWQEAc
jZZA8fjU4XUyeCfj+2B2Dg6HeNEJ2Qr2IHwMvNFOSyAIHK8IeJ3Bg4fZ0Yb0scPOr0x49/AHh9mO
VBcEDhsB9oqFBAEvAtGcDN6FMA6CV56foHi7tg+Ydyz46foLcDSnhJ1b96sXHoNNfRpn2f+BeZJl
NtSc9k2dIxFy3/ncyyngA2BeTDaAG+ofv7LpAf4S3A58OLtFqB6VzAMFY8fxbmB+oma7SsDmujKO
fFbmbDDvMJWCo11DlmPia8D29wJzH3irvhi8D9xcYuy+DeYncW6zDGzsQjSCWro/RrnBpicyuF/b
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
HdMHcx1MfmNhCfTwWI6lz1w793Vlef56zK2by93jlMtKwO3BhvogwvnGVpNvwj6IcLm3r6ZcQkHA
8WgFihMbAZ4oamNAwIvGO2De9mfip58nwNvBPwPzU5KXSpHxPfBITwFPdtwWPy1xGAQb4vZZJy82
XN9NnB5iZ3RDOAN8qO3balos4KftRPDttkZekNnGs+00vyIYC37KTnPAdVieHTY3BjzxvwE2uDFO
q8HNIcbRix/Xj3aN+Um3GhwNc85jO2PRlyhYHqWQ+/MQ+IooZV7b2In4NtiMLcaus12PZd8FDwCz
8+GlluoPvyZ4AWww97bDC+hvwXd4C5COZoNbjPFlp9MQx2eahCssQ/xn4ObeS7H0sV3ee4zzWP93
wOw0MLUFm3HKOxkvgvuBOe6l5vbVW1/SJzACPPELCQKHgwAvDrywngU2C5Z7YeAnRp7QeBGNNoEh
+7Do627fbXx7JM4DdwLzIsOL1KdgnqQbIu4DM+PH9D1wIZgdhsFgszAg+rUS72j8CMxb6/wk/EMw
X+tzwN8E7wdvAbOT0Fw6BRW+DeaxwjrZQeOdhKNJ3L9e4B5gvhbbwbyDx9eyJYn7yG1xG26seAwc
yr0USx/URSVu50zwuWC+L/ke/QjMuAsJAoKAICAIHOMI8ILKZzTY+SgB8yLhJnZS7gdz+WYwy7cW
4sXxYjDbtg1snoYRFRIEBAFBIDoC7NkKCQKCwNFDgJ9i+SAkE7+bfwXckRMgdipuAM8A81M0P2Ee
7ad6NCkkCAgCgoAgIAgIAscyAr1hPO8KNMRbUM5fQrQmkh2N1nQ1xBZB4BhBQHY0jpELJWYeVwjw
KxE+B2AOQbo7x+/MXwP/EMyH/VoTsWPE9jHxjgsfOBQSBAQBQaBBBOQwaIPwSKEgcMQR4F0C/tKC
z2rwFz78NYf7gCCSQoKAICAICAKCgCAgCAgCgoAgIAgIAoKAICAICAKCgCAgCAgCgoAgIAgIAoKA
ICAICAKCgCAgCAgCgoAgIAgIAoKAICAICAKCgCAgCAgCgoAgIAgIAoKAICAICAKCgCAgCAgCgoAg
IAgIAoKAICAICAKCgCAgCAgCgoAgIAgIAoKAICAICAKCgCAgCAgCgoAgIAgIAoKAICAICAKCgCAg
CAgCgoAgIAgIAoKAICAICAKCgCAgCAgCgoAgIAgIAoKAICAICAKCgCAgCAgCgoAgIAgIAoKAICAI
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
gU8w0bUI9sWnqIJy+wPWMA4yJpkDnracP1kFzNem+AiWdVhfVvjwOWmiHbe+OgkVptu6E1TA+pzD
+bQ0LcCHPXEoNd2ywZ9mfToawiexic5XG1abCak51tcgrsOgaXzalMk5uBmvD6CqcJFKdupH/+ok
w/6yxbRpKXL9enQWplsHZ8c+aX/e2gguhVkpzkFZg68vPjXKp7ZOm6WteYjJP1VrzVdHbBMEBAFB
4GtGAEtZg/9Urba6isorg3ojoF3nM6hnV8/jP+yvqa6gysr9+Cvlnaln965Wj2o209J/5NJBHNU4
c7CfRp7XlarWLaJugyaiPJ4Kgs8Sv205VKqqKKPg/jCd3K0XdW/0VGf9Vmqq8eIHZ0Y6dKjfn/rS
h5YTFRejqraaykorG8TViCJs1f9UzWWnRAUBQUAQEAQEgUgE2NFwnptbNFLifP5q/WGtuLqdEX+G
vQPRog0ez8pa9Y5G5IiSlCAgCAgCgoAg4EIAq/MRcjSUqizMUcnxLgcDr2ESUrKUefNyPHsGLdy3
Vu1oyKsT1w0lUUFAEBAEBIFIBLAgnoKcuyJzWzhVW0sHDx5s87+TTlYd5BOFQwG3uk2bNnMOpaLU
EQQEAUFAEBAEBAFBQBAQBAQBQUAQEAQEAUFAEBAEBAFBQBAQBAQBQUAQEAQEAUFAEBAEBAFBQBAQ
BAQBQUAQEAQEAUFAEBAEBAFBQBAQBAQBQUAQEAQEAUFAEBAEBAFBQBAQBAQBQUAQEAQEAUFAEBAE
BAFBQBAQBAQBQUAQEAQEAUFAEBAEBAFBQBAQBAQBQUAQEAQEAUFAEBAEBAFBQBAQBAQBQUAQEAQE
AUFAEBAEBAFBQBAQBAQBQeC4R0D+e+txf4mlg4KAIHAiIID/stoN/XzpROir9PGoIbAL/xX2msNt
Tf4h7+EiKPUFAUFAEGgdCLSHGSNahylixXGCQFlL9OP/tYQS0SEICAKCgCAgCAgCgkA0BMTRiIaK
5AkCgoAgIAjUQ6CqKJ9WrNlItfVKYmVU0doVK2hjRdNrxNIk+ccuAuJoHLvXTiwXBAQBQaBRBIqX
z6Bx9y6n6kYlGxf4dMklNGbYi03WVbs5hwaPGUMf729ct0i0DAK1NdVU08r8Ojmj0TLXVrQIAoKA
INAqEQhvz6WsV3tQu0cO37wf/b6UNt3Ylro2UVVh7mJIptCo3rW0ZtFMmv3PXKJeA2ncxEl048jz
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
ZoAZYAaIgf8PV+afgK1ANP0AAAAASUVORK5CYII=

------=_NextPart_000_0011_01CF9A21.CD190140
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://kafka.apache.org/images/mirror-maker.png

iVBORw0KGgoAAAANSUhEUgAAAboAAAEtCAYAAAB+lKV+AAAACXBIWXMAAAsTAAALEwEAmpwYAAAB
1WlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczpt
ZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS4xLjIiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0
dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRl
c2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMu
YWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOkNvbXByZXNzaW9uPjU8L3RpZmY6
Q29tcHJlc3Npb24+CiAgICAgICAgIDx0aWZmOlBob3RvbWV0cmljSW50ZXJwcmV0YXRpb24+Mjwv
dGlmZjpQaG90b21ldHJpY0ludGVycHJldGF0aW9uPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlv
bj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6
UkRGPgo8L3g6eG1wbWV0YT4KbQULngAAQABJREFUeAHtnQ28TVX+/78ehkQoTwlFD8pD4iYZDyma
f1FEUSEqJeF6GGEYE1eTmKEoz/kVkaE0RiRRRkpJqKkRkaKSkhEqeYrz/34W67TPufvce+6955x7
9j6f7+u17L3XXmfttd/rOJ+71vqutQoEAgGhkQAJkAAJkIBfCRT064vxvUiABEiABEgABCh0/B6Q
AAmQAAn4mgCFztfVy5cjARIgARKg0PE7QAIkQAIk4GsCFDpfVy9fjgRIgARIgELH7wAJkAAJkICv
CVDofF29fDkSIAESIAEKHb8DJEACJEACviZAofN19fLlSIAESIAEKHT8DpAACZAACfiaAIXO19XL
lyMBEiABEqDQ8TtAAiRAAiTgawIUOl9XL1+OBEiABEiAQsfvAAmQAAmQgK8JUOh8Xb18ORIgARIg
gcJ5RVCgQIFPNI+aec2Hn084gRP6xC66H+G8hD+ZDyQBEiCBBBLIs9BpWWumpaUdaN26dekElpuP
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
AAAASUVORK5CYII=

------=_NextPart_000_0011_01CF9A21.CD190140
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://www.apache.org/images/feather-small.png

iVBORw0KGgoAAAANSUhEUgAAAPcAAABGCAYAAAFnHTIVAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJ
bWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdp
bj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6
eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYxIDY0LjE0
MDk0OSwgMjAxMC8xMi8wNy0xMDo1NzowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJo
dHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlw
dGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAv
IiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RS
ZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpD
cmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNS4xIFdpbmRvd3MiIHhtcE1NOkluc3RhbmNl
SUQ9InhtcC5paWQ6MTYyMzQwM0U5NzUwMTFFMTg1ODBGOEUwQTk1QUEzRTciIHhtcE1NOkRvY3Vt
ZW50SUQ9InhtcC5kaWQ6MTYyMzQwM0Y5NzUwMTFFMTg1ODBGOEUwQTk1QUEzRTciPiA8eG1wTU06
RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDoxNjIzNDAzQzk3NTAxMUUxODU4
MEY4RTBBOTVBQTNFNyIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDoxNjIzNDAzRDk3NTAxMUUx
ODU4MEY4RTBBOTVBQTNFNyIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1w
bWV0YT4gPD94cGFja2V0IGVuZD0iciI/PgE7krcAAHbTSURBVHjatJJdaFt1HIaf/9nJR3PatGls
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

------=_NextPart_000_0011_01CF9A21.CD190140
Content-Type: text/css;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: https://kafka.apache.org/styles.css

html {
	margin: 0px; padding: 0px; color: rgb(51, 51, 51); line-height: 175%; =
font-family: "Source Sans Pro", sans-serif; font-size: 13pt; =
background-color: rgb(255, 255, 255);
}
body {
	margin: 0px; padding: 0px; color: rgb(51, 51, 51); line-height: 175%; =
font-family: "Source Sans Pro", sans-serif; font-size: 13pt; =
background-color: rgb(255, 255, 255);
}
code {
	font: 1em/normal "courier new", courier, monospace; font-size-adjust: =
none; font-stretch: normal;
}
pre {
	font: 1em/normal "courier new", courier, monospace; font-size-adjust: =
none; font-stretch: normal;
}
h1 {
	color: rgb(46, 74, 142);
}
h2 {
	color: rgb(46, 74, 142);
}
h3 {
	color: rgb(46, 74, 142);
}
h4 {
	color: rgb(46, 74, 142);
}
h1 {
	font-size: 24pt;
}
h2 {
	font-size: 18pt;
}
h3 {
	font-size: 16pt;
}
h4 {
	font-size: 14pt;
}
a {
	color: rgb(46, 74, 142); text-decoration: none;
}
#everything {
	margin: auto; width: 1000px;
}
#header {
	margin: auto; overflow: hidden; padding-top: 10px; padding-bottom: =
10px; padding-left: 35px; min-width: 1000px; background-color: white;
}
#header a {
	color: black; text-decoration: none;
}
#header table {
	border-collapse: collapse; border-spacing: 0px;
}
#header img {
	margin: 5px;
}
#footer {
	margin: auto; width: 500px; text-align: center; line-height: 100%; =
font-size: 10pt;
}
.title {
	color: black; line-height: 55%; font-size: 50pt;
}
.subtitle {
	color: black; line-height: 55%; font-size: 50pt;
}
.subtitle {
	font-size: 16pt;
}
.feather {
	margin: 5px; border: 0px currentColor; border-image: none;
}
.projects {
	font-size: 11pt; font-style: normal;
}
.projects a {
	font-size: 11pt; font-style: normal;
}
.lsidebar {
	width: 250px; color: rgb(46, 74, 142); line-height: 120%; font-size: =
15pt; float: left;
}
.lsidebar li {
	list-style-type: none;
}
.lsidebar li a {
	color: rgb(46, 74, 142); text-decoration: none;
}
.lsidebar li li {
	list-style-type: circle;
}
.content {
	padding: 0px; width: 800px; margin-left: 250px; min-height: 550px;
}
.numeric {
	text-align: right;
}
.data-table {
	border: 1px solid rgb(169, 169, 169); border-image: none; width: =
1000px; border-collapse: collapse;
}
.data-table td {
	padding: 2px; border: 1px solid rgb(136, 136, 136); border-image: none;
}
.data-table th {
	padding: 2px; border: 1px solid rgb(136, 136, 136); border-image: none;
}
.data-table th {
	font-weight: bold; background-color: rgb(204, 204, 204);
}
.advert-message {
	padding: 15px; border: 3px solid rgb(46, 74, 142); border-image: none;
}
.buzzword {
	color: rgb(46, 74, 142); line-height: 200%; font-size: 18pt;
}
.caption {
	font-size: 11pt; font-weight: bold;
}
.toc {
	font-size: 15pt;
}
.toc ul {
	font-size: 14pt;
}
.toc ul ul {
	font-size: 13pt;
}

------=_NextPart_000_0011_01CF9A21.CD190140
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://fonts.googleapis.com/css?family=Source+Sans+Pro:400,400italic

@font-face {
	font-family: Source Sans Pro;
	src: local("Source Sans Pro"), local("SourceSansPro-Regular"), =
url(http://themes.googleusercontent.com/static/fonts/sourcesanspro/v7/ODe=
lI1aHBYDBqgeIAH2zlBM0YzuT7MdOe03otPbuUS0.woff) format("woff");
	font-weight: 400;
	font-style: normal;
}
@font-face {
	font-family: Source Sans Pro;
	src: local("Source Sans Pro Italic"), local("SourceSansPro-It"), =
url(http://themes.googleusercontent.com/static/fonts/sourcesanspro/v7/M2J=
d71oPJhLKp0zdtTvoMzNrcjQuD0pTu1za2FULaMs.woff) format("woff");
	font-weight: 400;
	font-style: italic;
}

------=_NextPart_000_0011_01CF9A21.CD190140--
